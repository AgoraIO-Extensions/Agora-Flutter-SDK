/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:integration_test_app/main.dart' as app;

void mediaPlayerControllerSmokeTestCases() {
  testWidgets(
    'getMediaPlayerId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        mediaPlayerController.getMediaPlayerId();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getMediaPlayerId] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getMediaPlayerId] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'open',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String url = "hello";
        const int startPos = 10;
        await mediaPlayerController.open(
          url: url,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[open] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[open] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'openWithMediaSource',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String sourceUrl = "hello";
        const String sourceUri = "hello";
        const int sourceStartPos = 10;
        const bool sourceAutoPlay = true;
        const bool sourceEnableCache = true;
        const bool sourceIsAgoraSource = true;
        const bool sourceIsLiveSource = true;
        const MediaSource source = MediaSource(
          url: sourceUrl,
          uri: sourceUri,
          startPos: sourceStartPos,
          autoPlay: sourceAutoPlay,
          enableCache: sourceEnableCache,
          isAgoraSource: sourceIsAgoraSource,
          isLiveSource: sourceIsLiveSource,
        );
        await mediaPlayerController.openWithMediaSource(
          source,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[openWithMediaSource] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[openWithMediaSource] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'play',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.play();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[play] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[play] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pause',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.pause();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pause] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[pause] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stop',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.stop();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stop] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[stop] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.resume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[resume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'seek',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int newPos = 10;
        await mediaPlayerController.seek(
          newPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[seek] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[seek] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioPitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int pitch = 10;
        await mediaPlayerController.setAudioPitch(
          pitch,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioPitch] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioPitch] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getDuration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getDuration();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getDuration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getDuration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getPlayPosition();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getPlayPosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getPlayPosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getStreamCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getStreamCount();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getStreamCount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getStreamCount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getStreamInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int index = 10;
        await mediaPlayerController.getStreamInfo(
          index,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getStreamInfo] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getStreamInfo] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLoopCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int loopCount = 10;
        await mediaPlayerController.setLoopCount(
          loopCount,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLoopCount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLoopCount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackSpeed',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int speed = 10;
        await mediaPlayerController.setPlaybackSpeed(
          speed,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setPlaybackSpeed] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setPlaybackSpeed] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'selectAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int index = 10;
        await mediaPlayerController.selectAudioTrack(
          index,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[selectAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[selectAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'takeScreenshot',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String filename = "hello";
        await mediaPlayerController.takeScreenshot(
          filename,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[takeScreenshot] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[takeScreenshot] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'selectInternalSubtitle',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int index = 10;
        await mediaPlayerController.selectInternalSubtitle(
          index,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[selectInternalSubtitle] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[selectInternalSubtitle] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExternalSubtitle',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String url = "hello";
        await mediaPlayerController.setExternalSubtitle(
          url,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setExternalSubtitle] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setExternalSubtitle] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getState',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getState();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getState] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getState] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'mute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const bool muted = true;
        await mediaPlayerController.mute(
          muted,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[mute] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[mute] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getMute();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getMute] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getMute] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int volume = 10;
        await mediaPlayerController.adjustPlayoutVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustPlayoutVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustPlayoutVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getPlayoutVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getPlayoutVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getPlayoutVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPublishSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int volume = 10;
        await mediaPlayerController.adjustPublishSignalVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustPublishSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustPublishSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPublishSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getPublishSignalVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getPublishSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getPublishSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const RenderModeType renderMode = RenderModeType.renderModeHidden;
        await mediaPlayerController.setRenderMode(
          renderMode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setRenderMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRenderMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerPlayerSourceObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerSourceObserver observer = MediaPlayerSourceObserver(
          onPlayerSourceStateChanged:
              (MediaPlayerState state, MediaPlayerError ec) {},
          onPositionChanged: (int positionMs) {},
          onPlayerEvent:
              (MediaPlayerEvent eventCode, int elapsedTime, String message) {},
          onMetaData: (Uint8List data, int length) {},
          onPlayBufferUpdated: (int playCachedBuffer) {},
          onPreloadEvent: (String src, PlayerPreloadEvent event) {},
          onCompleted: () {},
          onAgoraCDNTokenWillExpire: () {},
          onPlayerSrcInfoChanged: (SrcInfo from, SrcInfo to) {},
          onPlayerInfoUpdated: (PlayerUpdatedInfo info) {},
          onAudioVolumeIndication: (int volume) {},
        );
        mediaPlayerController.registerPlayerSourceObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[registerPlayerSourceObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[registerPlayerSourceObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterPlayerSourceObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerSourceObserver observer = MediaPlayerSourceObserver(
          onPlayerSourceStateChanged:
              (MediaPlayerState state, MediaPlayerError ec) {},
          onPositionChanged: (int positionMs) {},
          onPlayerEvent:
              (MediaPlayerEvent eventCode, int elapsedTime, String message) {},
          onMetaData: (Uint8List data, int length) {},
          onPlayBufferUpdated: (int playCachedBuffer) {},
          onPreloadEvent: (String src, PlayerPreloadEvent event) {},
          onCompleted: () {},
          onAgoraCDNTokenWillExpire: () {},
          onPlayerSrcInfoChanged: (SrcInfo from, SrcInfo to) {},
          onPlayerInfoUpdated: (PlayerUpdatedInfo info) {},
          onAudioVolumeIndication: (int volume) {},
        );
        mediaPlayerController.unregisterPlayerSourceObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unregisterPlayerSourceObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unregisterPlayerSourceObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerMediaPlayerAudioSpectrumObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final AudioSpectrumObserver observer = AudioSpectrumObserver(
          onLocalAudioSpectrum: (AudioSpectrumData data) {},
          onRemoteAudioSpectrum: (List spectrums, int spectrumNumber) {},
        );
        const int intervalInMS = 10;
        mediaPlayerController.registerMediaPlayerAudioSpectrumObserver(
          observer: observer,
          intervalInMS: intervalInMS,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[registerMediaPlayerAudioSpectrumObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[registerMediaPlayerAudioSpectrumObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterMediaPlayerAudioSpectrumObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final AudioSpectrumObserver observer = AudioSpectrumObserver(
          onLocalAudioSpectrum: (AudioSpectrumData data) {},
          onRemoteAudioSpectrum: (List spectrums, int spectrumNumber) {},
        );
        mediaPlayerController.unregisterMediaPlayerAudioSpectrumObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[unregisterMediaPlayerAudioSpectrumObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unregisterMediaPlayerAudioSpectrumObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioDualMonoMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const AudioDualMonoMode mode = AudioDualMonoMode.audioDualMonoStereo;
        await mediaPlayerController.setAudioDualMonoMode(
          mode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioDualMonoMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioDualMonoMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayerSdkVersion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getPlayerSdkVersion();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getPlayerSdkVersion] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getPlayerSdkVersion] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaySrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getPlaySrc();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getPlaySrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getPlaySrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'openWithAgoraCDNSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        const int startPos = 10;
        await mediaPlayerController.openWithAgoraCDNSrc(
          src: src,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[openWithAgoraCDNSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[openWithAgoraCDNSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAgoraCDNLineCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getAgoraCDNLineCount();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAgoraCDNLineCount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAgoraCDNLineCount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchAgoraCDNLineByIndex',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const int index = 10;
        await mediaPlayerController.switchAgoraCDNLineByIndex(
          index,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[switchAgoraCDNLineByIndex] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[switchAgoraCDNLineByIndex] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCurrentAgoraCDNIndex',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        await mediaPlayerController.getCurrentAgoraCDNIndex();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getCurrentAgoraCDNIndex] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getCurrentAgoraCDNIndex] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAutoSwitchAgoraCDN',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const bool enable = true;
        await mediaPlayerController.enableAutoSwitchAgoraCDN(
          enable,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableAutoSwitchAgoraCDN] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableAutoSwitchAgoraCDN] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'renewAgoraCDNSrcToken',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String token = "hello";
        const int ts = 10;
        await mediaPlayerController.renewAgoraCDNSrcToken(
          token: token,
          ts: ts,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[renewAgoraCDNSrcToken] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[renewAgoraCDNSrcToken] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchAgoraCDNSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        const bool syncPts = true;
        await mediaPlayerController.switchAgoraCDNSrc(
          src: src,
          syncPts: syncPts,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[switchAgoraCDNSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[switchAgoraCDNSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        const bool syncPts = true;
        await mediaPlayerController.switchSrc(
          src: src,
          syncPts: syncPts,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[switchSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[switchSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'preloadSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        const int startPos = 10;
        await mediaPlayerController.preloadSrc(
          src: src,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[preloadSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[preloadSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playPreloadedSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        await mediaPlayerController.playPreloadedSrc(
          src,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[playPreloadedSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[playPreloadedSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String src = "hello";
        await mediaPlayerController.unloadSrc(
          src,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unloadSrc] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[unloadSrc] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSpatialAudioParams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const double paramsSpeakerAzimuth = 10.0;
        const double paramsSpeakerElevation = 10.0;
        const double paramsSpeakerDistance = 10.0;
        const int paramsSpeakerOrientation = 10;
        const bool paramsEnableBlur = true;
        const bool paramsEnableAirAbsorb = true;
        const double paramsSpeakerAttenuation = 10.0;
        const SpatialAudioParams params = SpatialAudioParams(
          speakerAzimuth: paramsSpeakerAzimuth,
          speakerElevation: paramsSpeakerElevation,
          speakerDistance: paramsSpeakerDistance,
          speakerOrientation: paramsSpeakerOrientation,
          enableBlur: paramsEnableBlur,
          enableAirAbsorb: paramsEnableAirAbsorb,
          speakerAttenuation: paramsSpeakerAttenuation,
        );
        await mediaPlayerController.setSpatialAudioParams(
          params,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSpatialAudioParams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSpatialAudioParams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSoundPositionParams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const double pan = 10.0;
        const double gain = 10.0;
        await mediaPlayerController.setSoundPositionParams(
          pan: pan,
          gain: gain,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSoundPositionParams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSoundPositionParams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerAudioFrameObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerAudioFrameObserver observer =
            MediaPlayerAudioFrameObserver(
          onFrame: (AudioPcmFrame frame) {},
        );
        mediaPlayerController.registerAudioFrameObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[registerAudioFrameObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[registerAudioFrameObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterAudioFrameObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerAudioFrameObserver observer =
            MediaPlayerAudioFrameObserver(
          onFrame: (AudioPcmFrame frame) {},
        );
        mediaPlayerController.unregisterAudioFrameObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unregisterAudioFrameObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unregisterAudioFrameObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerVideoFrameObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerVideoFrameObserver observer =
            MediaPlayerVideoFrameObserver(
          onFrame: (VideoFrame frame) {},
        );
        mediaPlayerController.registerVideoFrameObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[registerVideoFrameObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[registerVideoFrameObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterVideoFrameObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        final MediaPlayerVideoFrameObserver observer =
            MediaPlayerVideoFrameObserver(
          onFrame: (VideoFrame frame) {},
        );
        mediaPlayerController.unregisterVideoFrameObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unregisterVideoFrameObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unregisterVideoFrameObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlayerOptionInInt',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String key = "hello";
        const int value = 10;
        await mediaPlayerController.setPlayerOptionInInt(
          key: key,
          value: value,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setPlayerOptionInInt] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setPlayerOptionInInt] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlayerOptionInString',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = MediaPlayerController(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));
      await mediaPlayerController.initialize();

      try {
        const String key = "hello";
        const String value = "hello";
        await mediaPlayerController.setPlayerOptionInString(
          key: key,
          value: value,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setPlayerOptionInString] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setPlayerOptionInString] errorcode: ${(e as AgoraRtcException).code}');
      }

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );
}

