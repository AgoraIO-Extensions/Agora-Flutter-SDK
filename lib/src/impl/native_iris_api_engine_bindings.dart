// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to IrisApiEngine
class NativeIrisApiEngineBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeIrisApiEngineBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeIrisApiEngineBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void enableUseJsonArray(
    bool enable,
  ) {
    return _enableUseJsonArray(
      enable ? 1 : 0,
    );
  }

  late final _enableUseJsonArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'enableUseJsonArray');
  late final _enableUseJsonArray =
      _enableUseJsonArrayPtr.asFunction<void Function(int)>();

  void InitIrisLogger(
    ffi.Pointer<ffi.Int8> path,
    int maxSize,
    int level,
  ) {
    return _InitIrisLogger(
      path,
      maxSize,
      level,
    );
  }

  late final _InitIrisLoggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Int32)>>('InitIrisLogger');
  late final _InitIrisLogger = _InitIrisLoggerPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, int, int)>();

  IrisVideoFrameBufferManagerPtr CreateIrisVideoFrameBufferManager() {
    return _CreateIrisVideoFrameBufferManager();
  }

  late final _CreateIrisVideoFrameBufferManagerPtr =
      _lookup<ffi.NativeFunction<IrisVideoFrameBufferManagerPtr Function()>>(
          'CreateIrisVideoFrameBufferManager');
  late final _CreateIrisVideoFrameBufferManager =
      _CreateIrisVideoFrameBufferManagerPtr.asFunction<
          IrisVideoFrameBufferManagerPtr Function()>();

  void FreeIrisVideoFrameBufferManager(
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _FreeIrisVideoFrameBufferManager(
      manager_ptr,
    );
  }

  late final _FreeIrisVideoFrameBufferManagerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(IrisVideoFrameBufferManagerPtr)>>(
      'FreeIrisVideoFrameBufferManager');
  late final _FreeIrisVideoFrameBufferManager =
      _FreeIrisVideoFrameBufferManagerPtr.asFunction<
          void Function(IrisVideoFrameBufferManagerPtr)>();

  IrisVideoFrameBufferDelegateHandle EnableVideoFrameBuffer(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    ffi.Pointer<IrisCVideoFrameBuffer> buffer,
    int uid,
    ffi.Pointer<ffi.Int8> channel_id,
  ) {
    return _EnableVideoFrameBuffer(
      manager_ptr,
      buffer,
      uid,
      channel_id,
    );
  }

  late final _EnableVideoFrameBufferPtr = _lookup<
      ffi.NativeFunction<
          IrisVideoFrameBufferDelegateHandle Function(
              IrisVideoFrameBufferManagerPtr,
              ffi.Pointer<IrisCVideoFrameBuffer>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('EnableVideoFrameBuffer');
  late final _EnableVideoFrameBuffer = _EnableVideoFrameBufferPtr.asFunction<
      IrisVideoFrameBufferDelegateHandle Function(
          IrisVideoFrameBufferManagerPtr,
          ffi.Pointer<IrisCVideoFrameBuffer>,
          int,
          ffi.Pointer<ffi.Int8>)>();

  IrisVideoFrameBufferDelegateHandle EnableVideoFrameBufferByConfig(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    ffi.Pointer<IrisCVideoFrameBuffer> buffer,
    ffi.Pointer<IrisVideoFrameBufferConfig> config,
  ) {
    return _EnableVideoFrameBufferByConfig(
      manager_ptr,
      buffer,
      config,
    );
  }

  late final _EnableVideoFrameBufferByConfigPtr = _lookup<
          ffi.NativeFunction<
              IrisVideoFrameBufferDelegateHandle Function(
                  IrisVideoFrameBufferManagerPtr,
                  ffi.Pointer<IrisCVideoFrameBuffer>,
                  ffi.Pointer<IrisVideoFrameBufferConfig>)>>(
      'EnableVideoFrameBufferByConfig');
  late final _EnableVideoFrameBufferByConfig =
      _EnableVideoFrameBufferByConfigPtr.asFunction<
          IrisVideoFrameBufferDelegateHandle Function(
              IrisVideoFrameBufferManagerPtr,
              ffi.Pointer<IrisCVideoFrameBuffer>,
              ffi.Pointer<IrisVideoFrameBufferConfig>)>();

  void DisableVideoFrameBufferByDelegate(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    IrisVideoFrameBufferDelegateHandle handle,
  ) {
    return _DisableVideoFrameBufferByDelegate(
      manager_ptr,
      handle,
    );
  }

  late final _DisableVideoFrameBufferByDelegatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(IrisVideoFrameBufferManagerPtr,
                  IrisVideoFrameBufferDelegateHandle)>>(
      'DisableVideoFrameBufferByDelegate');
  late final _DisableVideoFrameBufferByDelegate =
      _DisableVideoFrameBufferByDelegatePtr.asFunction<
          void Function(IrisVideoFrameBufferManagerPtr,
              IrisVideoFrameBufferDelegateHandle)>();

  void DisableVideoFrameBufferByUid(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    int uid,
    ffi.Pointer<ffi.Int8> channel_id,
  ) {
    return _DisableVideoFrameBufferByUid(
      manager_ptr,
      uid,
      channel_id,
    );
  }

  late final _DisableVideoFrameBufferByUidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IrisVideoFrameBufferManagerPtr, ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('DisableVideoFrameBufferByUid');
  late final _DisableVideoFrameBufferByUid =
      _DisableVideoFrameBufferByUidPtr.asFunction<
          void Function(
              IrisVideoFrameBufferManagerPtr, int, ffi.Pointer<ffi.Int8>)>();

  void DisableVideoFrameBufferByConfig(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    ffi.Pointer<IrisVideoFrameBufferConfig> config,
  ) {
    return _DisableVideoFrameBufferByConfig(
      manager_ptr,
      config,
    );
  }

  late final _DisableVideoFrameBufferByConfigPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(IrisVideoFrameBufferManagerPtr,
                  ffi.Pointer<IrisVideoFrameBufferConfig>)>>(
      'DisableVideoFrameBufferByConfig');
  late final _DisableVideoFrameBufferByConfig =
      _DisableVideoFrameBufferByConfigPtr.asFunction<
          void Function(IrisVideoFrameBufferManagerPtr,
              ffi.Pointer<IrisVideoFrameBufferConfig>)>();

  void DisableAllVideoFrameBuffer(
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _DisableAllVideoFrameBuffer(
      manager_ptr,
    );
  }

  late final _DisableAllVideoFrameBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              IrisVideoFrameBufferManagerPtr)>>('DisableAllVideoFrameBuffer');
  late final _DisableAllVideoFrameBuffer = _DisableAllVideoFrameBufferPtr
      .asFunction<void Function(IrisVideoFrameBufferManagerPtr)>();

  int GetVideoFrame(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    ffi.Pointer<IrisVideoFrame> video_frame,
    ffi.Pointer<ffi.Uint8> is_new_frame,
    int uid,
    ffi.Pointer<ffi.Int8> channel_id,
  ) {
    return _GetVideoFrame(
      manager_ptr,
      video_frame,
      is_new_frame,
      uid,
      channel_id,
    );
  }

  late final _GetVideoFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisVideoFrameBufferManagerPtr,
              ffi.Pointer<IrisVideoFrame>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('GetVideoFrame');
  late final _GetVideoFrame = _GetVideoFramePtr.asFunction<
      int Function(IrisVideoFrameBufferManagerPtr, ffi.Pointer<IrisVideoFrame>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Int8>)>();

  int GetVideoFrameByConfig(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    ffi.Pointer<IrisVideoFrame> video_frame,
    ffi.Pointer<ffi.Uint8> is_new_frame,
    ffi.Pointer<IrisVideoFrameBufferConfig> config,
  ) {
    return _GetVideoFrameByConfig(
      manager_ptr,
      video_frame,
      is_new_frame,
      config,
    );
  }

  late final _GetVideoFrameByConfigPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisVideoFrameBufferManagerPtr,
                  ffi.Pointer<IrisVideoFrame>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<IrisVideoFrameBufferConfig>)>>(
      'GetVideoFrameByConfig');
  late final _GetVideoFrameByConfig = _GetVideoFrameByConfigPtr.asFunction<
      int Function(IrisVideoFrameBufferManagerPtr, ffi.Pointer<IrisVideoFrame>,
          ffi.Pointer<ffi.Uint8>, ffi.Pointer<IrisVideoFrameBufferConfig>)>();

  bool StartDumpVideo(
    IrisVideoFrameBufferManagerPtr manager_ptr,
    int type,
    ffi.Pointer<ffi.Int8> dir,
  ) {
    return _StartDumpVideo(
          manager_ptr,
          type,
          dir,
        ) !=
        0;
  }

  late final _StartDumpVideoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(IrisVideoFrameBufferManagerPtr, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('StartDumpVideo');
  late final _StartDumpVideo = _StartDumpVideoPtr.asFunction<
      int Function(
          IrisVideoFrameBufferManagerPtr, int, ffi.Pointer<ffi.Int8>)>();

  bool StopDumpVideo(
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _StopDumpVideo(
          manager_ptr,
        ) !=
        0;
  }

  late final _StopDumpVideoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(IrisVideoFrameBufferManagerPtr)>>('StopDumpVideo');
  late final _StopDumpVideo = _StopDumpVideoPtr.asFunction<
      int Function(IrisVideoFrameBufferManagerPtr)>();

  ffi.Pointer<ffi.Void> GetObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> api_type,
  ) {
    return _GetObserver(
      engine_ptr,
      api_type,
    );
  }

  late final _GetObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              IrisApiEnginePtr, ffi.Pointer<ffi.Int8>)>>('GetObserver');
  late final _GetObserver = _GetObserverPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          IrisApiEnginePtr, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> CreateObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> api_type,
    IrisEventHandlerHandle handle,
    ffi.Pointer<ffi.Int8> params,
    int paramLength,
  ) {
    return _CreateObserver(
      engine_ptr,
      api_type,
      handle,
      params,
      paramLength,
    );
  }

  late final _CreateObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              IrisApiEnginePtr,
              ffi.Pointer<ffi.Int8>,
              IrisEventHandlerHandle,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint32)>>('CreateObserver');
  late final _CreateObserver = _CreateObserverPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(IrisApiEnginePtr, ffi.Pointer<ffi.Int8>,
          IrisEventHandlerHandle, ffi.Pointer<ffi.Int8>, int)>();

  void DestroyObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> api_type,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _DestroyObserver(
      engine_ptr,
      api_type,
      handle,
    );
  }

  late final _DestroyObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(IrisApiEnginePtr, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Void>)>>('DestroyObserver');
  late final _DestroyObserver = _DestroyObserverPtr.asFunction<
      void Function(
          IrisApiEnginePtr, ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Void>)>();

  int CallIrisApi(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<ffi.Int8> func_name,
    ffi.Pointer<ffi.Int8> params,
    int paramLength,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
    int bufferLength,
    ffi.Pointer<ffi.Int8> result,
  ) {
    return _CallIrisApi(
      engine_ptr,
      func_name,
      params,
      paramLength,
      buffer,
      bufferLength,
      result,
    );
  }

  late final _CallIrisApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Uint32,
              ffi.Pointer<ffi.Int8>)>>('CallIrisApi');
  late final _CallIrisApi = _CallIrisApiPtr.asFunction<
      int Function(
          IrisApiEnginePtr,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<ffi.Int8>)>();

  /// IrisRtcEngine
  IrisApiEnginePtr CreateIrisApiEngine() {
    return _CreateIrisApiEngine();
  }

  late final _CreateIrisApiEnginePtr =
      _lookup<ffi.NativeFunction<IrisApiEnginePtr Function()>>(
          'CreateIrisApiEngine');
  late final _CreateIrisApiEngine =
      _CreateIrisApiEnginePtr.asFunction<IrisApiEnginePtr Function()>();

  void DestroyIrisApiEngine(
    IrisApiEnginePtr engine_ptr,
  ) {
    return _DestroyIrisApiEngine(
      engine_ptr,
    );
  }

  late final _DestroyIrisApiEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisApiEnginePtr)>>(
          'DestroyIrisApiEngine');
  late final _DestroyIrisApiEngine =
      _DestroyIrisApiEnginePtr.asFunction<void Function(IrisApiEnginePtr)>();

  IrisEventHandlerHandle CreateIrisEventHandler(
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _CreateIrisEventHandler(
      event_handler,
    );
  }

  late final _CreateIrisEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(
              ffi.Pointer<IrisCEventHandler>)>>('CreateIrisEventHandler');
  late final _CreateIrisEventHandler = _CreateIrisEventHandlerPtr.asFunction<
      IrisEventHandlerHandle Function(ffi.Pointer<IrisCEventHandler>)>();

  void DestroyIrisEventHandler(
    IrisEventHandlerHandle handler,
  ) {
    return _DestroyIrisEventHandler(
      handler,
    );
  }

  late final _DestroyIrisEventHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(IrisEventHandlerHandle)>>(
          'DestroyIrisEventHandler');
  late final _DestroyIrisEventHandler = _DestroyIrisEventHandlerPtr.asFunction<
      void Function(IrisEventHandlerHandle)>();

  IrisEventHandlerHandle SetIrisRtcEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisRtcEngineEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisRtcEngineEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(IrisApiEnginePtr,
              ffi.Pointer<IrisCEventHandler>)>>('SetIrisRtcEngineEventHandler');
  late final _SetIrisRtcEngineEventHandler =
      _SetIrisRtcEngineEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisRtcEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    IrisEventHandlerHandle handle,
  ) {
    return _UnsetIrisRtcEngineEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisRtcEngineEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisEventHandlerHandle)>>('UnsetIrisRtcEngineEventHandler');
  late final _UnsetIrisRtcEngineEventHandler =
      _UnsetIrisRtcEngineEventHandlerPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisEventHandlerHandle)>();

  /// IrisRtcRawData
  IrisRtcAudioFrameObserverHandle RegisterAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCAudioFrameObserver> observer,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterAudioFrameObserver(
      engine_ptr,
      observer,
      order,
      identifier,
    );
  }

  late final _RegisterAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioFrameObserver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterAudioFrameObserver');
  late final _RegisterAudioFrameObserver =
      _RegisterAudioFrameObserverPtr.asFunction<
          IrisRtcAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioFrameObserver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcAudioFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterAudioFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, IrisRtcAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterAudioFrameObserver');
  late final _UnRegisterAudioFrameObserver =
      _UnRegisterAudioFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisRtcVideoFrameObserverHandle RegisterVideoFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCVideoFrameObserver> observer,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterVideoFrameObserver(
      engine_ptr,
      observer,
      order,
      identifier,
    );
  }

  late final _RegisterVideoFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoFrameObserver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterVideoFrameObserver');
  late final _RegisterVideoFrameObserver =
      _RegisterVideoFrameObserverPtr.asFunction<
          IrisRtcVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoFrameObserver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterVideoFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcVideoFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterVideoFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterVideoFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, IrisRtcVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterVideoFrameObserver');
  late final _UnRegisterVideoFrameObserver =
      _UnRegisterVideoFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisRtcVideoEncodedVideoFrameObserverHandle RegisterVideoEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCVideoEncodedVideoFrameObserver> observer,
    int order,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _RegisterVideoEncodedFrameObserver(
      engine_ptr,
      observer,
      order,
      identifier,
    );
  }

  late final _RegisterVideoEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcVideoEncodedVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoEncodedVideoFrameObserver>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('RegisterVideoEncodedFrameObserver');
  late final _RegisterVideoEncodedFrameObserver =
      _RegisterVideoEncodedFrameObserverPtr.asFunction<
          IrisRtcVideoEncodedVideoFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCVideoEncodedVideoFrameObserver>,
              int,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterVideoEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcVideoEncodedVideoFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> identifier,
  ) {
    return _UnRegisterVideoEncodedFrameObserver(
      engine_ptr,
      handle,
      identifier,
    );
  }

  late final _UnRegisterVideoEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisRtcVideoEncodedVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterVideoEncodedFrameObserver');
  late final _UnRegisterVideoEncodedFrameObserver =
      _UnRegisterVideoEncodedFrameObserverPtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisRtcVideoEncodedVideoFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisAudioEncodedFrameObserverHandle RegisterAudioEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCAudioEncodedFrameObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterAudioEncodedFrameObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterAudioEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisAudioEncodedFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCAudioEncodedFrameObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterAudioEncodedFrameObserver');
  late final _RegisterAudioEncodedFrameObserver =
      _RegisterAudioEncodedFrameObserverPtr.asFunction<
          IrisAudioEncodedFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCAudioEncodedFrameObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterAudioEncodedFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisAudioEncodedFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterAudioEncodedFrameObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterAudioEncodedFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisAudioEncodedFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterAudioEncodedFrameObserver');
  late final _UnRegisterAudioEncodedFrameObserver =
      _UnRegisterAudioEncodedFrameObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisAudioEncodedFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisEventHandlerHandle RegisterAudioEncodedFrameObserverEx(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisAudioEncodedFrameObserverHandle> handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterAudioEncodedFrameObserverEx(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _RegisterAudioEncodedFrameObserverExPtr = _lookup<
      ffi.NativeFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisAudioEncodedFrameObserverHandle>,
              ffi.Pointer<ffi.Int8>)>>('RegisterAudioEncodedFrameObserverEx');
  late final _RegisterAudioEncodedFrameObserverEx =
      _RegisterAudioEncodedFrameObserverExPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisAudioEncodedFrameObserverHandle>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterAudioEncodedFrameObserverEx(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisAudioEncodedFrameObserverHandle> handle,
  ) {
    return _UnRegisterAudioEncodedFrameObserverEx(
      engine_ptr,
      handle,
    );
  }

  late final _UnRegisterAudioEncodedFrameObserverExPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(IrisApiEnginePtr,
                  ffi.Pointer<IrisAudioEncodedFrameObserverHandle>)>>(
      'UnRegisterAudioEncodedFrameObserverEx');
  late final _UnRegisterAudioEncodedFrameObserverEx =
      _UnRegisterAudioEncodedFrameObserverExPtr.asFunction<
          int Function(IrisApiEnginePtr,
              ffi.Pointer<IrisAudioEncodedFrameObserverHandle>)>();

  IrisMediaMetadataObserverHandle RegisterMediaMetadataObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCMediaMetadataObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaMetadataObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaMetadataObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisMediaMetadataObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCMediaMetadataObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterMediaMetadataObserver');
  late final _RegisterMediaMetadataObserver =
      _RegisterMediaMetadataObserverPtr.asFunction<
          IrisMediaMetadataObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisCMediaMetadataObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaMetadataObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMediaMetadataObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterMediaMetadataObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterMediaMetadataObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, IrisMediaMetadataObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterMediaMetadataObserver');
  late final _UnRegisterMediaMetadataObserver =
      _UnRegisterMediaMetadataObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisMediaMetadataObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  int Attach(
    IrisApiEnginePtr engine_ptr,
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _Attach(
      engine_ptr,
      manager_ptr,
    );
  }

  late final _AttachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>>('Attach');
  late final _Attach = _AttachPtr.asFunction<
      int Function(IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>();

  int Detach(
    IrisApiEnginePtr engine_ptr,
    IrisVideoFrameBufferManagerPtr manager_ptr,
  ) {
    return _Detach(
      engine_ptr,
      manager_ptr,
    );
  }

  late final _DetachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>>('Detach');
  late final _Detach = _DetachPtr.asFunction<
      int Function(IrisApiEnginePtr, IrisVideoFrameBufferManagerPtr)>();

  /// IrisRtcRawDataPluginManager
  int CallIrisRtcRawDataPluginManagerApi(
    IrisApiEnginePtr engine_ptr,
    int api_type,
    ffi.Pointer<ffi.Int8> params,
    ffi.Pointer<ffi.Int8> result,
  ) {
    return _CallIrisRtcRawDataPluginManagerApi(
      engine_ptr,
      api_type,
      params,
      result,
    );
  }

  late final _CallIrisRtcRawDataPluginManagerApiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr, ffi.Int32, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('CallIrisRtcRawDataPluginManagerApi');
  late final _CallIrisRtcRawDataPluginManagerApi =
      _CallIrisRtcRawDataPluginManagerApiPtr.asFunction<
          int Function(IrisApiEnginePtr, int, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>();

  /// IrisMediaPlayerPtr
  IrisEventHandlerHandle SetIrisMediaPlayerEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisMediaPlayerEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisMediaPlayerEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              IrisEventHandlerHandle Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>>(
      'SetIrisMediaPlayerEventHandler');
  late final _SetIrisMediaPlayerEventHandler =
      _SetIrisMediaPlayerEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisMediaPlayerEventHandler(
    IrisApiEnginePtr engine_ptr,
    IrisEventHandlerHandle handle,
  ) {
    return _UnsetIrisMediaPlayerEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisMediaPlayerEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisEventHandlerHandle)>>('UnsetIrisMediaPlayerEventHandler');
  late final _UnsetIrisMediaPlayerEventHandler =
      _UnsetIrisMediaPlayerEventHandlerPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisEventHandlerHandle)>();

  IrisEventHandlerHandle SetIrisMediaRecorderEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisMediaRecorderEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisMediaRecorderEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              IrisEventHandlerHandle Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>>(
      'SetIrisMediaRecorderEventHandler');
  late final _SetIrisMediaRecorderEventHandler =
      _SetIrisMediaRecorderEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisMediaRecorderEventHandler(
    IrisApiEnginePtr engine_ptr,
    IrisEventHandlerHandle handle,
  ) {
    return _UnsetIrisMediaRecorderEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisMediaRecorderEventHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(IrisApiEnginePtr,
              IrisEventHandlerHandle)>>('UnsetIrisMediaRecorderEventHandler');
  late final _UnsetIrisMediaRecorderEventHandler =
      _UnsetIrisMediaRecorderEventHandlerPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisEventHandlerHandle)>();

  /// media player audio frame observer
  IrisMediaPlayerAudioFrameObserverHandle RegisterMediaPlayerAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCAudioFrameObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaPlayerAudioFrameObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaPlayerAudioFrameObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisMediaPlayerAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioFrameObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterMediaPlayerAudioFrameObserver');
  late final _RegisterMediaPlayerAudioFrameObserver =
      _RegisterMediaPlayerAudioFrameObserverPtr.asFunction<
          IrisMediaPlayerAudioFrameObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioFrameObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaPlayerAudioFrameObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerAudioFrameObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterMediaPlayerAudioFrameObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterMediaPlayerAudioFrameObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr,
                  IrisMediaPlayerAudioFrameObserverHandle,
                  ffi.Pointer<ffi.Int8>)>>(
      'UnRegisterMediaPlayerAudioFrameObserver');
  late final _UnRegisterMediaPlayerAudioFrameObserver =
      _UnRegisterMediaPlayerAudioFrameObserverPtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerAudioFrameObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisRtcAudioSpectrumObserverHandle RegisterRtcAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisRtcCAudioSpectrumObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterRtcAudioSpectrumObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterRtcAudioSpectrumObserverPtr = _lookup<
      ffi.NativeFunction<
          IrisRtcAudioSpectrumObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioSpectrumObserver>,
              ffi.Pointer<ffi.Int8>)>>('RegisterRtcAudioSpectrumObserver');
  late final _RegisterRtcAudioSpectrumObserver =
      _RegisterRtcAudioSpectrumObserverPtr.asFunction<
          IrisRtcAudioSpectrumObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisRtcCAudioSpectrumObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterRtcAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    IrisRtcAudioSpectrumObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterRtcAudioSpectrumObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterRtcAudioSpectrumObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisRtcAudioSpectrumObserverHandle,
              ffi.Pointer<ffi.Int8>)>>('UnRegisterRtcAudioSpectrumObserver');
  late final _UnRegisterRtcAudioSpectrumObserver =
      _UnRegisterRtcAudioSpectrumObserverPtr.asFunction<
          int Function(IrisApiEnginePtr, IrisRtcAudioSpectrumObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  /// media player audio spectrum observer
  IrisMediaPlayerAudioSpectrumObserverHandle
      RegisterMediaPlayerAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver> observer,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _RegisterMediaPlayerAudioSpectrumObserver(
      engine_ptr,
      observer,
      params,
    );
  }

  late final _RegisterMediaPlayerAudioSpectrumObserverPtr = _lookup<
          ffi.NativeFunction<
              IrisMediaPlayerAudioSpectrumObserverHandle Function(
                  IrisApiEnginePtr,
                  ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver>,
                  ffi.Pointer<ffi.Int8>)>>(
      'RegisterMediaPlayerAudioSpectrumObserver');
  late final _RegisterMediaPlayerAudioSpectrumObserver =
      _RegisterMediaPlayerAudioSpectrumObserverPtr.asFunction<
          IrisMediaPlayerAudioSpectrumObserverHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCAudioSpectrumObserver>,
              ffi.Pointer<ffi.Int8>)>();

  int UnRegisterMediaPlayerAudioSpectrumObserver(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerAudioSpectrumObserverHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _UnRegisterMediaPlayerAudioSpectrumObserver(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _UnRegisterMediaPlayerAudioSpectrumObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr,
                  IrisMediaPlayerAudioSpectrumObserverHandle,
                  ffi.Pointer<ffi.Int8>)>>(
      'UnRegisterMediaPlayerAudioSpectrumObserver');
  late final _UnRegisterMediaPlayerAudioSpectrumObserver =
      _UnRegisterMediaPlayerAudioSpectrumObserverPtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerAudioSpectrumObserverHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisMediaPlayerCustomDataProviderHandle MediaPlayerOpenWithCustomSource(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCCustomDataProvider> provider,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _MediaPlayerOpenWithCustomSource(
      engine_ptr,
      provider,
      params,
    );
  }

  late final _MediaPlayerOpenWithCustomSourcePtr = _lookup<
      ffi.NativeFunction<
          IrisMediaPlayerCustomDataProviderHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomDataProvider>,
              ffi.Pointer<ffi.Int8>)>>('MediaPlayerOpenWithCustomSource');
  late final _MediaPlayerOpenWithCustomSource =
      _MediaPlayerOpenWithCustomSourcePtr.asFunction<
          IrisMediaPlayerCustomDataProviderHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomDataProvider>,
              ffi.Pointer<ffi.Int8>)>();

  int MediaPlayerUnOpenWithCustomSource(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerCustomDataProviderHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _MediaPlayerUnOpenWithCustomSource(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _MediaPlayerUnOpenWithCustomSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisMediaPlayerCustomDataProviderHandle,
              ffi.Pointer<ffi.Int8>)>>('MediaPlayerUnOpenWithCustomSource');
  late final _MediaPlayerUnOpenWithCustomSource =
      _MediaPlayerUnOpenWithCustomSourcePtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerCustomDataProviderHandle,
              ffi.Pointer<ffi.Int8>)>();

  IrisMediaPlayerCustomDataProviderHandle MediaPlayerOpenWithMediaSource(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisMediaPlayerCCustomDataProvider> provider,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _MediaPlayerOpenWithMediaSource(
      engine_ptr,
      provider,
      params,
    );
  }

  late final _MediaPlayerOpenWithMediaSourcePtr = _lookup<
      ffi.NativeFunction<
          IrisMediaPlayerCustomDataProviderHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomDataProvider>,
              ffi.Pointer<ffi.Int8>)>>('MediaPlayerOpenWithMediaSource');
  late final _MediaPlayerOpenWithMediaSource =
      _MediaPlayerOpenWithMediaSourcePtr.asFunction<
          IrisMediaPlayerCustomDataProviderHandle Function(
              IrisApiEnginePtr,
              ffi.Pointer<IrisMediaPlayerCCustomDataProvider>,
              ffi.Pointer<ffi.Int8>)>();

  int MediaPlayerUnOpenWithMediaSource(
    IrisApiEnginePtr engine_ptr,
    IrisMediaPlayerCustomDataProviderHandle handle,
    ffi.Pointer<ffi.Int8> params,
  ) {
    return _MediaPlayerUnOpenWithMediaSource(
      engine_ptr,
      handle,
      params,
    );
  }

  late final _MediaPlayerUnOpenWithMediaSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              IrisApiEnginePtr,
              IrisMediaPlayerCustomDataProviderHandle,
              ffi.Pointer<ffi.Int8>)>>('MediaPlayerUnOpenWithMediaSource');
  late final _MediaPlayerUnOpenWithMediaSource =
      _MediaPlayerUnOpenWithMediaSourcePtr.asFunction<
          int Function(
              IrisApiEnginePtr,
              IrisMediaPlayerCustomDataProviderHandle,
              ffi.Pointer<ffi.Int8>)>();

  /// IrisCloudSpatialAudioEnginePtr
  IrisEventHandlerHandle SetIrisCloudAudioEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisCEventHandler> event_handler,
  ) {
    return _SetIrisCloudAudioEngineEventHandler(
      engine_ptr,
      event_handler,
    );
  }

  late final _SetIrisCloudAudioEngineEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              IrisEventHandlerHandle Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>>(
      'SetIrisCloudAudioEngineEventHandler');
  late final _SetIrisCloudAudioEngineEventHandler =
      _SetIrisCloudAudioEngineEventHandlerPtr.asFunction<
          IrisEventHandlerHandle Function(
              IrisApiEnginePtr, ffi.Pointer<IrisCEventHandler>)>();

  int UnsetIrisCloudAudioEngineEventHandler(
    IrisApiEnginePtr engine_ptr,
    ffi.Pointer<IrisEventHandlerHandle> handle,
  ) {
    return _UnsetIrisCloudAudioEngineEventHandler(
      engine_ptr,
      handle,
    );
  }

  late final _UnsetIrisCloudAudioEngineEventHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  IrisApiEnginePtr, ffi.Pointer<IrisEventHandlerHandle>)>>(
      'UnsetIrisCloudAudioEngineEventHandler');
  late final _UnsetIrisCloudAudioEngineEventHandler =
      _UnsetIrisCloudAudioEngineEventHandlerPtr.asFunction<
          int Function(
              IrisApiEnginePtr, ffi.Pointer<IrisEventHandlerHandle>)>();
}

abstract class IrisAppType {
  static const int kAppTypeNative = 0;
  static const int kAppTypeCocos = 1;
  static const int kAppTypeUnity = 2;
  static const int kAppTypeElectron = 3;
  static const int kAppTypeFlutter = 4;
  static const int kAppTypeUnreal = 5;
  static const int kAppTypeXamarin = 6;
  static const int kAppTypeApiCloud = 7;
  static const int kAppTypeReactNative = 8;
  static const int kAppTypePython = 9;
  static const int kAppTypeCocosCreator = 10;
  static const int kAppTypeRust = 11;
  static const int kAppTypeCSharp = 12;
  static const int kAppTypeCef = 13;
  static const int kAppTypeUniApp = 14;
}

abstract class IrisLogLevel {
  static const int levelTrace = 0;
  static const int levelDebug = 1;
  static const int levelInfo = 2;
  static const int levelWarn = 3;
  static const int levelErr = 4;
}

class IrisCEventHandler extends ffi.Struct {
  external Func_Event OnEvent;

  external Func_EventEx OnEventEx;
}

typedef Func_Event = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Uint32>,
            ffi.Uint32)>>;
typedef Func_EventEx = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Int8>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Uint32>,
            ffi.Uint32)>>;

abstract class IRIS_VIDEO_PROCESS_ERR {
  static const int ERR_OK = 0;
  static const int ERR_NULL_POINTER = 1;
  static const int ERR_SIZE_NOT_MATCHING = 2;
  static const int ERR_BUFFER_EMPTY = 5;
}

class IrisVideoFrameBufferConfig extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Uint32()
  external int id;

  @ffi.Array.multi([512])
  external ffi.Array<ffi.Int8> key;
}

abstract class IrisVideoSourceType {
  static const int kVideoSourceTypeCameraPrimary = 0;
  static const int kVideoSourceTypeCameraSecondary = 1;
  static const int kVideoSourceTypeScreenPrimary = 2;
  static const int kVideoSourceTypeScreenSecondary = 3;
  static const int kVideoSourceTypeCustom = 4;
  static const int kVideoSourceTypeMediaPlayer = 5;
  static const int kVideoSourceTypeRtcImagePng = 6;
  static const int kVideoSourceTypeRtcImageJpeg = 7;
  static const int kVideoSourceTypeRtcImageGif = 8;
  static const int kVideoSourceTypeRemote = 9;
  static const int kVideoSourceTypeTranscoded = 10;
  static const int kVideoSourceTypePreEncode = 11;
  static const int kVideoSourceTypePreEncodeSecondaryCamera = 12;
  static const int kVideoSourceTypePreEncodeScreen = 13;
  static const int kVideoSourceTypePreEncodeSecondaryScreen = 14;
  static const int kVideoSourceTypeUnknown = 15;
}

class IrisCVideoFrameBuffer extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external Func_VideoFrame OnVideoFrameReceived;

  @ffi.Int32()
  external int bytes_per_row_alignment;
}

abstract class IrisVideoFrameType {
  static const int kVideoFrameTypeYUV420 = 0;
  static const int kVideoFrameTypeYUV422 = 1;
  static const int kVideoFrameTypeRGBA = 2;
  static const int kVideoFrameTypeBGRA = 3;
}

typedef Func_VideoFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<IrisVideoFrame>,
            ffi.Pointer<IrisVideoFrameBufferConfig>, ffi.Uint8)>>;

class IrisVideoFrame extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int y_stride;

  @ffi.Int32()
  external int u_stride;

  @ffi.Int32()
  external int v_stride;

  external ffi.Pointer<ffi.Void> y_buffer;

  external ffi.Pointer<ffi.Void> u_buffer;

  external ffi.Pointer<ffi.Void> v_buffer;

  @ffi.Uint32()
  external int y_buffer_length;

  @ffi.Uint32()
  external int u_buffer_length;

  @ffi.Uint32()
  external int v_buffer_length;

  @ffi.Int32()
  external int rotation;

  @ffi.Int64()
  external int render_time_ms;

  @ffi.Int32()
  external int av_sync_type;

  external ffi.Pointer<ffi.Void> metadata_buffer;

  @ffi.Int32()
  external int metadata_size;

  external ffi.Pointer<ffi.Void> sharedContext;

  @ffi.Int32()
  external int textureId;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Float> matrix;
}

typedef IrisVideoFrameBufferManagerPtr = ffi.Pointer<ffi.Void>;
typedef IrisVideoFrameBufferDelegateHandle = ffi.Pointer<ffi.Void>;

abstract class IRIS_API_ERROR_CODE_TYPE {
  static const int IRIS_API_NOT_CREATE = 666666;
}

typedef IrisApiEnginePtr = ffi.Pointer<ffi.Void>;
typedef IrisEventHandlerHandle = ffi.Pointer<ffi.Void>;
typedef IrisRtcAudioFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCAudioFrameObserver extends ffi.Struct {
  external Func_AudioFrameLocal OnRecordAudioFrame;

  external Func_AudioFrameLocal OnPlaybackAudioFrame;

  external Func_AudioFrameLocal OnMixedAudioFrame;

  external Func_AudioFrameRemote OnPlaybackAudioFrameBeforeMixing;

  external Func_AudioFrameRemoteStringUid OnPlaybackAudioFrameBeforeMixing2;

  external Func_AudioParams GetPlaybackAudioParams;

  external Func_AudioParams GetRecordAudioParams;

  external Func_AudioParams GetMixedAudioParams;

  external Func_AudioFramePosition GetObservedAudioFramePosition;
}

typedef Func_AudioFrameLocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Pointer<IrisAudioFrame>)>>;

class IrisAudioFrame extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int samples;

  @ffi.Int32()
  external int bytes_per_sample;

  @ffi.Int32()
  external int channels;

  @ffi.Int32()
  external int samples_per_sec;

  external ffi.Pointer<ffi.Void> buffer;

  @ffi.Uint32()
  external int buffer_length;

  @ffi.Int64()
  external int render_time_ms;

  @ffi.Int32()
  external int av_sync_type;
}

abstract class AudioFrameType {
  static const int kAudioFrameTypePCM16 = 0;
}

typedef Func_AudioFrameRemote = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Uint32, ffi.Pointer<IrisAudioFrame>)>>;
typedef Func_AudioFrameRemoteStringUid = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
            ffi.Pointer<IrisAudioFrame>)>>;
typedef Func_AudioParams
    = ffi.Pointer<ffi.NativeFunction<IrisAudioParams Function()>>;

class IrisAudioParams extends ffi.Struct {
  @ffi.Int32()
  external int sample_rate;

  @ffi.Int32()
  external int channels;

  @ffi.Int32()
  external int mode;

  @ffi.Int32()
  external int samples_per_call;
}

abstract class IRIS_RAW_AUDIO_FRAME_OP_MODE_TYPE {
  static const int IRIS_RAW_AUDIO_FRAME_OP_MODE_READ_ONLY = 0;
  static const int IRIS_RAW_AUDIO_FRAME_OP_MODE_READ_WRITE = 2;
}

typedef Func_AudioFramePosition
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef IrisRtcVideoFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCVideoFrameObserver extends ffi.Struct {
  external Func_VideoCaptureLocal OnCaptureVideoFrame;

  external Func_VideoCaptureLocal OnPreEncodeVideoFrame;

  external Func_VideoFrameRemote OnRenderVideoFrame;

  external Func_Uint32_t GetObservedFramePosition;
}

typedef Func_VideoCaptureLocal = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisVideoFrame>,
            ffi.Pointer<IrisVideoFrameBufferConfig>)>>;
typedef Func_VideoFrameRemote = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Pointer<ffi.Int8>, ffi.Uint32, ffi.Pointer<IrisVideoFrame>)>>;
typedef Func_Uint32_t = ffi.Pointer<ffi.NativeFunction<ffi.Uint32 Function()>>;
typedef IrisRtcVideoEncodedVideoFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisRtcCVideoEncodedVideoFrameObserver extends ffi.Struct {
  external Func_EncodedVideoFrame OnEncodedVideoFrameReceived;
}

typedef Func_EncodedVideoFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Uint32, ffi.Pointer<ffi.Uint8>, ffi.Uint64,
            ffi.Pointer<IrisEncodedVideoFrameInfo>)>>;

class IrisEncodedVideoFrameInfo extends ffi.Struct {
  @ffi.Int32()
  external int codecType;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int height;

  @ffi.Int32()
  external int framesPerSecond;

  @ffi.Int32()
  external int frameType;

  @ffi.Int32()
  external int rotation;

  @ffi.Int32()
  external int trackId;

  @ffi.Int64()
  external int captureTimeMs;

  @ffi.Uint32()
  external int uid;

  @ffi.Int32()
  external int streamType;
}

typedef IrisAudioEncodedFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisCAudioEncodedFrameObserver extends ffi.Struct {
  external Func_RecordAudioEncodedFrame onRecordAudioEncodedFrame;

  external Func_PlaybackAudioEncodedFrame OnPlaybackAudioEncodedFrame;

  external Func_MixedAudioEncodedFrame OnMixedAudioEncodedFrame;
}

typedef Func_RecordAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;

class IrisEncodedAudioFrameInfo extends ffi.Struct {
  @ffi.Int32()
  external int codec;

  @ffi.Int32()
  external int sampleRateHz;

  @ffi.Int32()
  external int samplesPerChannel;

  @ffi.Int32()
  external int numberOfChannels;

  external IrisEncodedAudioFrameAdvancedSettings advancedSettings;

  @ffi.Int64()
  external int captureTimeMs;
}

abstract class IRIS_AUDIO_CODEC_TYPE {
  static const int AUDIO_CODEC_OPUS = 1;
  static const int AUDIO_CODEC_PCMA = 3;
  static const int AUDIO_CODEC_PCMU = 4;
  static const int AUDIO_CODEC_G722 = 5;
  static const int AUDIO_CODEC_AACLC = 8;
  static const int AUDIO_CODEC_HEAAC = 9;
  static const int AUDIO_CODEC_JC1 = 10;
  static const int AUDIO_CODEC_HEAAC2 = 11;
  static const int AUDIO_CODEC_LPCNET = 12;
}

class IrisEncodedAudioFrameAdvancedSettings extends ffi.Struct {
  @ffi.Uint8()
  external int speech;

  @ffi.Uint8()
  external int sendEvenIfEmpty;
}

typedef Func_PlaybackAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;
typedef Func_MixedAudioEncodedFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.Int32,
            ffi.Pointer<IrisEncodedAudioFrameInfo>)>>;
typedef IrisMediaMetadataObserverHandle = ffi.Pointer<ffi.Void>;

class IrisCMediaMetadataObserver extends ffi.Struct {
  external Func_MaxMetadataSize getMaxMetadataSize;

  external Func_ReadyToSendMetadata onReadyToSendMetadata;

  external Func_MetadataReceived onMetadataReceived;
}

typedef Func_MaxMetadataSize
    = ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function()>>;
typedef Func_ReadyToSendMetadata = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisMetadata>, ffi.Int32)>>;

class IrisMetadata extends ffi.Struct {
  @ffi.Uint32()
  external int uid;

  @ffi.Uint32()
  external int size;

  external ffi.Pointer<ffi.Uint8> buffer;

  @ffi.Int64()
  external int timeStampMs;
}

abstract class IRIS_VIDEO_SOURCE_TYPE {
  /// Video captured by the camera.
  static const int IRIS_VIDEO_SOURCE_CAMERA_PRIMARY = 0;
  static const int IRIS_VIDEO_SOURCE_CAMERA = 0;

  /// Video captured by the secondary camera.
  static const int IRIS_VIDEO_SOURCE_CAMERA_SECONDARY = 1;

  /// Video for screen sharing.
  static const int IRIS_VIDEO_SOURCE_SCREEN_PRIMARY = 2;
  static const int IRIS_VIDEO_SOURCE_SCREEN = 2;

  /// Video for secondary screen sharing.
  static const int IRIS_VIDEO_SOURCE_SCREEN_SECONDARY = 3;

  /// Not define.
  static const int IRIS_VIDEO_SOURCE_CUSTOM = 4;

  /// Video for media player sharing.
  static const int IRIS_VIDEO_SOURCE_MEDIA_PLAYER = 5;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_PNG = 6;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_JPEG = 7;

  /// Video for png image.
  static const int IRIS_VIDEO_SOURCE_RTC_IMAGE_GIF = 8;

  /// Remote video received from network.
  static const int IRIS_VIDEO_SOURCE_REMOTE = 9;

  /// Video for transcoded.
  static const int IRIS_VIDEO_SOURCE_TRANSCODED = 10;
  static const int IRIS_VIDEO_SOURCE_UNKNOWN = 100;
}

typedef Func_MetadataReceived = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<IrisMetadata>)>>;

abstract class ApiTypeRawDataPluginManager {
  static const int kRDPMRegisterPlugin = 0;
  static const int kRDPMUnregisterPlugin = 1;
  static const int kRDPMHasPlugin = 2;
  static const int kRDPMEnablePlugin = 3;
  static const int kRDPMGetPlugins = 4;
  static const int kRDPMSetPluginParameter = 5;
  static const int kRDPMGetPluginParameter = 6;
  static const int kRDPMRelease = 7;
}

typedef IrisMediaPlayerAudioFrameObserverHandle = ffi.Pointer<ffi.Void>;

class IrisMediaPlayerCAudioFrameObserver extends ffi.Struct {
  external Func_AudioOnFrame onFrame;
}

typedef Func_AudioOnFrame = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<IrisAudioPcmFrame>, ffi.Int32)>>;

class IrisAudioPcmFrame extends ffi.Struct {
  @ffi.Uint32()
  external int capture_timestamp;

  @ffi.Uint64()
  external int samples_per_channel_;

  @ffi.Int32()
  external int sample_rate_hz_;

  @ffi.Int32()
  external int bytes_per_sample;

  @ffi.Uint64()
  external int num_channels_;

  @ffi.Array.multi([3840])
  external ffi.Array<ffi.Int16> data_;
}

abstract class IRIS_BYTES_PER_SAMPLE {
  static const int IRIS_TWO_BYTES_PER_SAMPLE = 2;
}

typedef IrisRtcAudioSpectrumObserverHandle = ffi.Pointer<ffi.Void>;
typedef IrisRtcCAudioSpectrumObserver = IrisMediaPlayerCAudioSpectrumObserver;

class IrisMediaPlayerCAudioSpectrumObserver extends ffi.Struct {
  external Func_LocalAudioSpectrum onLocalAudioSpectrum;

  external Func_RemoteAudioSpectrum onRemoteAudioSpectrum;
}

typedef Func_LocalAudioSpectrum = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Int32, ffi.Pointer<IrisAudioSpectrumData>)>>;

class IrisAudioSpectrumData extends ffi.Struct {
  external ffi.Pointer<ffi.Float> audioSpectrumData;

  @ffi.Int32()
  external int dataLength;
}

typedef Func_RemoteAudioSpectrum = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(
            ffi.Int32, ffi.Pointer<IrisUserAudioSpectrumInfo>, ffi.Uint32)>>;

class IrisUserAudioSpectrumInfo extends ffi.Struct {
  @ffi.Uint32()
  external int uid;

  external IrisAudioSpectrumData spectrumData;
}

typedef IrisMediaPlayerAudioSpectrumObserverHandle = ffi.Pointer<ffi.Void>;
typedef IrisMediaPlayerCustomDataProviderHandle = ffi.Pointer<ffi.Void>;

class IrisMediaPlayerCCustomDataProvider extends ffi.Struct {
  external Func_OnSeek onSeek;

  external Func_onReadData onReadData;
}

typedef Func_OnSeek = ffi.Pointer<
    ffi.NativeFunction<ffi.Int64 Function(ffi.Int64, ffi.Int32, ffi.Int32)>>;
typedef Func_onReadData = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Uint8>, ffi.Int32, ffi.Int32)>>;

const int kBasicResultLength = 65536;

const int kBasicStringLength = 512;
