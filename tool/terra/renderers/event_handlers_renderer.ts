import {
  CXXFile,
  CXXTYPE,
  CXXTerraNode,
  Clazz,
  SimpleType,
  SimpleTypeKind,
} from "@agoraio-extensions/cxx-parser";
import {
  ParseResult,
  RenderResult,
  TerraContext,
} from "@agoraio-extensions/terra-core";
import path from "path";
import { getIrisApiIdValue } from "../parsers/iris_api_id_parser";
import { isCallbackClass } from "./utils";

function processCXXFiles(
  terraContext: TerraContext,
  parseResult: ParseResult,
  args: any
): CXXFile[] {
  return (parseResult.nodes as CXXFile[]).filter((it) => {
    return it.fileName == "IAgoraRtcEngine.h";
  });
}

function fileterNodes(cxxFile: CXXFile): CXXTerraNode[] {
  return cxxFile.nodes
    .filter((it) => it.__TYPE == CXXTYPE.Clazz)
    .filter((it) => isCallbackClass(it.asClazz()));
}

const dartHeader = `
/// GENERATED BY terra, DO NOT MODIFY BY HAND.\n\n// ignore_for_file: public_member_api_docs, unused_local_variable, unused_import

import 'package:agora_rtc_engine/src/binding_forward_export.dart';
import 'package:agora_rtc_engine/src/binding/impl_forward_export.dart';
import 'package:iris_method_channel/iris_method_channel.dart';
`.trim();

/// TODO(littlegnal): Move to a parser.
const filteredBaseClasses = ["RefCountInterface", "agora::base::IEngineBase"];
function getBaseClasses(parseResult: ParseResult, clazz: Clazz): Clazz[] {
  let output: Clazz[] = [];
  clazz.base_clazzs.forEach((it) => {
    if (!filteredBaseClasses.includes(it)) {
      let found = parseResult.resolveNodeByName(it);
      if (found) {
        output.push(found! as Clazz);
      }
    }
  });

  return output;
}

function genCallbackExtendBlock(parseResult: ParseResult, clazz: Clazz) {
  let extendBlock = "";
  let wrapperClassName = getBaseClasses(parseResult, clazz).map(
    (it) => `${it.name}Wrapper`
  );
  if (wrapperClassName.length === 0) {
    extendBlock = `implements EventLoopEventHandler`;
  } else {
    // Only take first one.
    extendBlock = `extends ${wrapperClassName[0]}`;
  }

  return extendBlock;
}

function dartClassName(clazz: Clazz): string {
  let name = clazz.name;
  if (name.startsWith("I")) {
    name = name.replace("I", "");
  }

  return name;
}

function dartMemberName(memberName: string): string {
  return nameWithUnderscoresToCamelCase(memberName);
}

const _cppTypedefToDartTypeMappping: Map<string, string> = new Map([
  ["uid_t", "int"],
  ["track_id_t", "int"],
  ["video_track_id_t", "int"],
  ["conn_id_t", "int"],
  ["view_t", "int"],
  ["AString", "String"],
  ["user_id_t", "String"],
]);

const _cppStdTypeToDartTypeMappping: Map<string, string> = new Map([
  ["char", "String"],
  ["char *", "String"],
  ["const char *", "String"],
  ["unsigned int", "int"],
  ["size_t", "int"],
  ["unsigned short", "int"],
  ["float", "double"],
  ["int64_t", "int"],
  ["int32_t", "int"],
  ["long", "int"],
  ["int16_t", "int"],
  ["unsigned char", "Uint8List"],
  ["unsigned char *", "Uint8List"],
  ["uint8_t", "int"],
  ["uint32_t", "int"],
  ["uint64_t", "int"],
  ["uint16_t", "int"],
  ["long long", "int"],
  ["intptr_t", "int"],
]);

function dartTypeName(type: SimpleType): string {
  let dartType = type.name.trimNamespace();
  if (type.kind == SimpleTypeKind.template_t) {
    dartType = type.template_arguments[0];
  }

  if (
    (dartType == "unsigned char" || dartType == "uint8_t") &&
    (type.kind == SimpleTypeKind.pointer_t ||
      type.kind == SimpleTypeKind.array_t)
  ) {
    dartType = "Uint8List";
  } else {
    if (_cppStdTypeToDartTypeMappping.has(dartType)) {
      dartType = _cppStdTypeToDartTypeMappping.get(dartType)!;
    }
    if (_cppTypedefToDartTypeMappping.has(dartType)) {
      dartType = _cppTypedefToDartTypeMappping.get(dartType)!;
    }
    if (dartType.includes("_")) {
      dartType = nameWithUnderscoresToCamelCase(dartType, true);
    }

    // String type
    if (
      type.name == "char" &&
      (type.kind == SimpleTypeKind.array_t ||
        type.kind == SimpleTypeKind.pointer_t)
    ) {
      if (type.source.endsWith("**")) {
        dartType = "List<" + dartType + ">";
      }
    } else {
      if (type.kind == SimpleTypeKind.array_t) {
        dartType = "List<" + dartType + ">";
      }
    }
  }

  return dartType;
}

function upperCamelCaseToLowercaseWithUnderscores(
  upperCamelCaseName: string
): string {
  const result: string[] = [];

  let toSearch = upperCamelCaseName;

  let baseRegex = new RegExp("((I[A-Z]|[A-Z])?[a-z0-9]*)");

  //   const baseRegex = /((I[A-Z]|[A-Z])?[a-z0-9]*)/g;
  let baseMatch;

  while ((baseMatch = baseRegex.exec(toSearch)) !== null) {
    let tmp = baseMatch[0];
    if (tmp.length === 0) {
      break;
    }
    result.push(tmp.toLowerCase());
    toSearch = toSearch.replace(tmp, "");
  }

  return result.join("_");
}

function nameWithUnderscoresToCamelCase(
  nameWithUnderscores: string,
  upperCamelCase: boolean = false
): string {
  if (!nameWithUnderscores.includes("_")) {
    return nameWithUnderscores;
  }

  const nameWithUnderscoresLower = nameWithUnderscores.toLowerCase();
  const words = nameWithUnderscoresLower.split("_");
  for (let i = 0; i < words.length; i++) {
    let word = words[i];

    if ((i === 0 && upperCamelCase) || i !== 0) {
      word = word[0].toUpperCase() + word.slice(1);
    }

    words[i] = word;
  }

  return words.join("");
}

function dartFileName(filePath: string): string {
  let fileName = path.basename(filePath);
  fileName = upperCamelCaseToLowercaseWithUnderscores(fileName);
  return fileName.replace("i", "");
}

function callbackSwithCaseBlock(
  parseResult: ParseResult,
  clazz: Clazz,
  firstParamNameForWrapperClass: string
): string {
  return clazz.methods
    .map((it) => {
      let className = clazz.name;
      let methodName = it.name;
      let jsonClassName = `${className.replace("I", "")}${
        methodName[0].toUpperCase() + methodName.slice(1)
      }Json`;
      let dn = dartMemberName(methodName);
      let eventName = getIrisApiIdValue(it).split("_").slice(1).join("_");

      return `
case '${eventName}':
if (${firstParamNameForWrapperClass}.${dn} == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
${jsonClassName} paramJson = ${jsonClassName}.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
${(function () {
  let paramIntList = it.parameters
    .map((it) => {
      let typeName = dartTypeName(it.type);
      let memberName = dartMemberName(it.name);
      return `${typeName}? ${memberName} = paramJson.${memberName};`;
    })
    .join("\n");

  let paramNullCheckList = it.parameters
    .map((it) => {
      let memberName = dartMemberName(it.name);
      return `${memberName} == null`;
    })
    .join("||");
  if (paramNullCheckList.length) {
    paramNullCheckList = `if (${paramNullCheckList}) { return true; }`;
  }

  let paramFillBufferList = it.parameters
    .map((it) => {
      let memberName = dartMemberName(it.name);
      let actualNode = parseResult.resolveNodeByType(it.type);
      if (actualNode.__TYPE == CXXTYPE.Struct) {
        if (it.type.kind == SimpleTypeKind.array_t) {
          return `${memberName} = ${memberName}.map((e) => e.fillBuffers(buffers)).toList();`;
        } else {
          return `${memberName} = ${memberName}.fillBuffers(buffers);`;
        }
      }

      return "";
    })
    .join("\n");

  let paramList = it.parameters.map((it) => dartMemberName(it.name));

  return `
  ${paramIntList}
  ${paramNullCheckList}
  ${paramFillBufferList}
  ${firstParamNameForWrapperClass}.${methodName}!(${paramList});
  return true;
  `.trim();
})()}
`;
    })
    .join("\n");
}

export default function EventHandlersRenderer(
  terraContext: TerraContext,
  args: any,
  parseResult: ParseResult
): RenderResult[] {
  let cxxFiles = processCXXFiles(terraContext, parseResult, args);

  return cxxFiles.map((cxxFile) => {
    let output = fileterNodes(cxxFile)
      .map((it) => it.asClazz())
      .map((it) => {
        let clazz = it;
        let className = dartClassName(clazz);
        let extendBlock = genCallbackExtendBlock(parseResult, clazz);
        let wrapperClassName = `${className}Wrapper`;
        let hasBaseClass = clazz.base_clazzs.length > 0;
        let firstParamNameForWrapperClass =
          className[0].toLowerCase() + className.slice(1);

        return `
class ${wrapperClassName} ${extendBlock} {
${(function () {
  // Constructor
  let callSuperBlock = hasBaseClass
    ? `: super(${firstParamNameForWrapperClass})`
    : "";

  return `
    const ${wrapperClassName}(this.${firstParamNameForWrapperClass})${callSuperBlock};
    `.trim();
})()}

final ${className} ${firstParamNameForWrapperClass};

@override
bool operator ==(Object other) {
  if (other.runtimeType != runtimeType) {
    return false;
  }
  return other is ${wrapperClassName} &&
      other.${firstParamNameForWrapperClass} == ${firstParamNameForWrapperClass};
}
@override
int get hashCode => ${firstParamNameForWrapperClass}.hashCode;

@override
bool handleEventInternal(String eventName, String eventData, List<Uint8List> buffers) {
    switch (eventName) {
        ${callbackSwithCaseBlock(
          parseResult,
          clazz,
          firstParamNameForWrapperClass
        )}
    }
    return false;
}

@override
bool handleEvent(String eventName, String eventData, List<Uint8List> buffers) {
    if (!eventName.startsWith('${className}')) return false;
    final newEvent = eventName.replaceFirst('${className}_', '');
    if (handleEventInternal(newEvent, eventData, buffers)) { return true; }
    ${(function () {
      // handle return block
      if (hasBaseClass) {
        return "return super.handleEventInternal(newEvent, eventData, buffers);";
      }

      return "return false;";
    })()}
}
}
`.trim();
      })
      .join("\n");

    let content = `
    ${dartHeader}
  
    ${output}
    `.trim();

    let fileName = `${dartFileName(cxxFile.fileName)}_event_impl.dart`;
    return {
      file_name: `lib/src/binding/${fileName}`,
      file_content: content,
    };
  });
}
