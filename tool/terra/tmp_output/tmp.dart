/// GENERATED BY terra, DO NOT MODIFY BY HAND.

// ignore_for_file: public_member_api_docs, unused_local_variable, unused_import

import 'package:agora_rtc_engine/src/binding_forward_export.dart';
import 'package:agora_rtc_engine/src/binding/impl_forward_export.dart';
import 'package:iris_method_channel/iris_method_channel.dart';
  
    class RtcEngineEventHandlerWrapper implements EventLoopEventHandler {
const RtcEngineEventHandlerWrapper(this.RtcEngineEventHandler);

final RtcEngineEventHandler RtcEngineEventHandler;

@override
bool operator ==(Object other) {
  if (other.runtimeType != runtimeType) {
    return false;
  }
  return other is RtcEngineEventHandlerWrapper &&
      other.RtcEngineEventHandler == RtcEngineEventHandler;
}
@override
int get hashCode => RtcEngineEventHandler.hashCode;

@override
bool handleEventInternal(String eventName, String eventData, List<Uint8List> buffers) {
    switch (eventName) {
        
case 'RtcEngineEventHandler_eventHandlerType':
if (RtcEngineEventHandler.eventhandlertype == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerEventHandlerTypeJson paramJson = RtcEngineEventHandlerEventHandlerTypeJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.eventHandlerType!();
  return true;


case 'RtcEngineEventHandler_onJoinChannelSuccess':
if (RtcEngineEventHandler.onjoinchannelsuccess == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnJoinChannelSuccessJson paramJson = RtcEngineEventHandlerOnJoinChannelSuccessJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
int? uid = paramJson.uid;
int? elapsed = paramJson.elapsed;
  if (channel == null||uid == null||elapsed == null) { return true; }
  ,,
  RtcEngineEventHandler.onJoinChannelSuccess!(channel,uid,elapsed);
  return true;


case 'RtcEngineEventHandler_onRejoinChannelSuccess':
if (RtcEngineEventHandler.onrejoinchannelsuccess == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRejoinChannelSuccessJson paramJson = RtcEngineEventHandlerOnRejoinChannelSuccessJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
int? uid = paramJson.uid;
int? elapsed = paramJson.elapsed;
  if (channel == null||uid == null||elapsed == null) { return true; }
  ,,
  RtcEngineEventHandler.onRejoinChannelSuccess!(channel,uid,elapsed);
  return true;


case 'RtcEngineEventHandler_onProxyConnected':
if (RtcEngineEventHandler.onproxyconnected == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnProxyConnectedJson paramJson = RtcEngineEventHandlerOnProxyConnectedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
int? uid = paramJson.uid;
ProxyType? proxytype = paramJson.proxytype;
String? localproxyip = paramJson.localproxyip;
int? elapsed = paramJson.elapsed;
  if (channel == null||uid == null||proxytype == null||localproxyip == null||elapsed == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onProxyConnected!(channel,uid,proxytype,localproxyip,elapsed);
  return true;


case 'RtcEngineEventHandler_onError':
if (RtcEngineEventHandler.onerror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnErrorJson paramJson = RtcEngineEventHandlerOnErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? err = paramJson.err;
String? msg = paramJson.msg;
  if (err == null||msg == null) { return true; }
  ,
  RtcEngineEventHandler.onError!(err,msg);
  return true;


case 'RtcEngineEventHandler_onAudioQuality':
if (RtcEngineEventHandler.onaudioquality == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioQualityJson paramJson = RtcEngineEventHandlerOnAudioQualityJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? quality = paramJson.quality;
int? delay = paramJson.delay;
int? lost = paramJson.lost;
  if (uid == null||quality == null||delay == null||lost == null) { return true; }
  ,,,
  RtcEngineEventHandler.onAudioQuality!(uid,quality,delay,lost);
  return true;


case 'RtcEngineEventHandler_onLastmileProbeResult':
if (RtcEngineEventHandler.onlastmileproberesult == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLastmileProbeResultJson paramJson = RtcEngineEventHandlerOnLastmileProbeResultJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
LastmileProbeResult? result = paramJson.result;
  if (result == null) { return true; }
  
  RtcEngineEventHandler.onLastmileProbeResult!(result);
  return true;


case 'RtcEngineEventHandler_onAudioVolumeIndication':
if (RtcEngineEventHandler.onaudiovolumeindication == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioVolumeIndicationJson paramJson = RtcEngineEventHandlerOnAudioVolumeIndicationJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
AudioVolumeInfo? speakers = paramJson.speakers;
int? speakernumber = paramJson.speakernumber;
int? totalvolume = paramJson.totalvolume;
  if (speakers == null||speakernumber == null||totalvolume == null) { return true; }
  ,,
  RtcEngineEventHandler.onAudioVolumeIndication!(speakers,speakernumber,totalvolume);
  return true;


case 'RtcEngineEventHandler_onLeaveChannel':
if (RtcEngineEventHandler.onleavechannel == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLeaveChannelJson paramJson = RtcEngineEventHandlerOnLeaveChannelJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  RtcEngineEventHandler.onLeaveChannel!(stats);
  return true;


case 'RtcEngineEventHandler_onRtcStats':
if (RtcEngineEventHandler.onrtcstats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRtcStatsJson paramJson = RtcEngineEventHandlerOnRtcStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  RtcEngineEventHandler.onRtcStats!(stats);
  return true;


case 'RtcEngineEventHandler_onAudioDeviceStateChanged':
if (RtcEngineEventHandler.onaudiodevicestatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioDeviceStateChangedJson paramJson = RtcEngineEventHandlerOnAudioDeviceStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? deviceid = paramJson.deviceid;
int? devicetype = paramJson.devicetype;
int? devicestate = paramJson.devicestate;
  if (deviceid == null||devicetype == null||devicestate == null) { return true; }
  ,,
  RtcEngineEventHandler.onAudioDeviceStateChanged!(deviceid,devicetype,devicestate);
  return true;


case 'RtcEngineEventHandler_onAudioMixingPositionChanged':
if (RtcEngineEventHandler.onaudiomixingpositionchanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioMixingPositionChangedJson paramJson = RtcEngineEventHandlerOnAudioMixingPositionChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? position = paramJson.position;
  if (position == null) { return true; }
  
  RtcEngineEventHandler.onAudioMixingPositionChanged!(position);
  return true;


case 'RtcEngineEventHandler_onAudioMixingFinished':
if (RtcEngineEventHandler.onaudiomixingfinished == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioMixingFinishedJson paramJson = RtcEngineEventHandlerOnAudioMixingFinishedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onAudioMixingFinished!();
  return true;


case 'RtcEngineEventHandler_onAudioEffectFinished':
if (RtcEngineEventHandler.onaudioeffectfinished == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioEffectFinishedJson paramJson = RtcEngineEventHandlerOnAudioEffectFinishedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? soundid = paramJson.soundid;
  if (soundid == null) { return true; }
  
  RtcEngineEventHandler.onAudioEffectFinished!(soundid);
  return true;


case 'RtcEngineEventHandler_onVideoDeviceStateChanged':
if (RtcEngineEventHandler.onvideodevicestatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoDeviceStateChangedJson paramJson = RtcEngineEventHandlerOnVideoDeviceStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? deviceid = paramJson.deviceid;
int? devicetype = paramJson.devicetype;
int? devicestate = paramJson.devicestate;
  if (deviceid == null||devicetype == null||devicestate == null) { return true; }
  ,,
  RtcEngineEventHandler.onVideoDeviceStateChanged!(deviceid,devicetype,devicestate);
  return true;


case 'RtcEngineEventHandler_onNetworkQuality':
if (RtcEngineEventHandler.onnetworkquality == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnNetworkQualityJson paramJson = RtcEngineEventHandlerOnNetworkQualityJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? txquality = paramJson.txquality;
int? rxquality = paramJson.rxquality;
  if (uid == null||txquality == null||rxquality == null) { return true; }
  ,,
  RtcEngineEventHandler.onNetworkQuality!(uid,txquality,rxquality);
  return true;


case 'RtcEngineEventHandler_onIntraRequestReceived':
if (RtcEngineEventHandler.onintrarequestreceived == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnIntraRequestReceivedJson paramJson = RtcEngineEventHandlerOnIntraRequestReceivedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onIntraRequestReceived!();
  return true;


case 'RtcEngineEventHandler_onUplinkNetworkInfoUpdated':
if (RtcEngineEventHandler.onuplinknetworkinfoupdated == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUplinkNetworkInfoUpdatedJson paramJson = RtcEngineEventHandlerOnUplinkNetworkInfoUpdatedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
UplinkNetworkInfo? info = paramJson.info;
  if (info == null) { return true; }
  
  RtcEngineEventHandler.onUplinkNetworkInfoUpdated!(info);
  return true;


case 'RtcEngineEventHandler_onDownlinkNetworkInfoUpdated':
if (RtcEngineEventHandler.ondownlinknetworkinfoupdated == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnDownlinkNetworkInfoUpdatedJson paramJson = RtcEngineEventHandlerOnDownlinkNetworkInfoUpdatedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
DownlinkNetworkInfo? info = paramJson.info;
  if (info == null) { return true; }
  
  RtcEngineEventHandler.onDownlinkNetworkInfoUpdated!(info);
  return true;


case 'RtcEngineEventHandler_onLastmileQuality':
if (RtcEngineEventHandler.onlastmilequality == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLastmileQualityJson paramJson = RtcEngineEventHandlerOnLastmileQualityJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? quality = paramJson.quality;
  if (quality == null) { return true; }
  
  RtcEngineEventHandler.onLastmileQuality!(quality);
  return true;


case 'RtcEngineEventHandler_onFirstLocalVideoFrame':
if (RtcEngineEventHandler.onfirstlocalvideoframe == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstLocalVideoFrameJson paramJson = RtcEngineEventHandlerOnFirstLocalVideoFrameJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? source = paramJson.source;
int? width = paramJson.width;
int? height = paramJson.height;
int? elapsed = paramJson.elapsed;
  if (source == null||width == null||height == null||elapsed == null) { return true; }
  ,,,
  RtcEngineEventHandler.onFirstLocalVideoFrame!(source,width,height,elapsed);
  return true;


case 'RtcEngineEventHandler_onFirstLocalVideoFramePublished':
if (RtcEngineEventHandler.onfirstlocalvideoframepublished == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstLocalVideoFramePublishedJson paramJson = RtcEngineEventHandlerOnFirstLocalVideoFramePublishedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? source = paramJson.source;
int? elapsed = paramJson.elapsed;
  if (source == null||elapsed == null) { return true; }
  ,
  RtcEngineEventHandler.onFirstLocalVideoFramePublished!(source,elapsed);
  return true;


case 'RtcEngineEventHandler_onFirstRemoteVideoDecoded':
if (RtcEngineEventHandler.onfirstremotevideodecoded == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstRemoteVideoDecodedJson paramJson = RtcEngineEventHandlerOnFirstRemoteVideoDecodedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? width = paramJson.width;
int? height = paramJson.height;
int? elapsed = paramJson.elapsed;
  if (uid == null||width == null||height == null||elapsed == null) { return true; }
  ,,,
  RtcEngineEventHandler.onFirstRemoteVideoDecoded!(uid,width,height,elapsed);
  return true;


case 'RtcEngineEventHandler_onVideoSizeChanged':
if (RtcEngineEventHandler.onvideosizechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoSizeChangedJson paramJson = RtcEngineEventHandlerOnVideoSizeChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? sourcetype = paramJson.sourcetype;
int? uid = paramJson.uid;
int? width = paramJson.width;
int? height = paramJson.height;
int? rotation = paramJson.rotation;
  if (sourcetype == null||uid == null||width == null||height == null||rotation == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onVideoSizeChanged!(sourcetype,uid,width,height,rotation);
  return true;


case 'RtcEngineEventHandler_onLocalVideoStateChanged':
if (RtcEngineEventHandler.onlocalvideostatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalVideoStateChangedJson paramJson = RtcEngineEventHandlerOnLocalVideoStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? source = paramJson.source;
LocalVideoStreamState? state = paramJson.state;
LocalVideoStreamReason? reason = paramJson.reason;
  if (source == null||state == null||reason == null) { return true; }
  ,,
  RtcEngineEventHandler.onLocalVideoStateChanged!(source,state,reason);
  return true;


case 'RtcEngineEventHandler_onRemoteVideoStateChanged':
if (RtcEngineEventHandler.onremotevideostatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteVideoStateChangedJson paramJson = RtcEngineEventHandlerOnRemoteVideoStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
RemoteVideoState? state = paramJson.state;
RemoteVideoStateReason? reason = paramJson.reason;
int? elapsed = paramJson.elapsed;
  if (uid == null||state == null||reason == null||elapsed == null) { return true; }
  ,,,
  RtcEngineEventHandler.onRemoteVideoStateChanged!(uid,state,reason,elapsed);
  return true;


case 'RtcEngineEventHandler_onFirstRemoteVideoFrame':
if (RtcEngineEventHandler.onfirstremotevideoframe == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstRemoteVideoFrameJson paramJson = RtcEngineEventHandlerOnFirstRemoteVideoFrameJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? width = paramJson.width;
int? height = paramJson.height;
int? elapsed = paramJson.elapsed;
  if (uid == null||width == null||height == null||elapsed == null) { return true; }
  ,,,
  RtcEngineEventHandler.onFirstRemoteVideoFrame!(uid,width,height,elapsed);
  return true;


case 'RtcEngineEventHandler_onUserJoined':
if (RtcEngineEventHandler.onuserjoined == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserJoinedJson paramJson = RtcEngineEventHandlerOnUserJoinedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? elapsed = paramJson.elapsed;
  if (uid == null||elapsed == null) { return true; }
  ,
  RtcEngineEventHandler.onUserJoined!(uid,elapsed);
  return true;


case 'RtcEngineEventHandler_onUserOffline':
if (RtcEngineEventHandler.onuseroffline == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserOfflineJson paramJson = RtcEngineEventHandlerOnUserOfflineJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
UserOfflineReasonType? reason = paramJson.reason;
  if (uid == null||reason == null) { return true; }
  ,
  RtcEngineEventHandler.onUserOffline!(uid,reason);
  return true;


case 'RtcEngineEventHandler_onUserMuteAudio':
if (RtcEngineEventHandler.onusermuteaudio == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserMuteAudioJson paramJson = RtcEngineEventHandlerOnUserMuteAudioJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
bool? muted = paramJson.muted;
  if (uid == null||muted == null) { return true; }
  ,
  RtcEngineEventHandler.onUserMuteAudio!(uid,muted);
  return true;


case 'RtcEngineEventHandler_onUserMuteVideo':
if (RtcEngineEventHandler.onusermutevideo == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserMuteVideoJson paramJson = RtcEngineEventHandlerOnUserMuteVideoJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
bool? muted = paramJson.muted;
  if (uid == null||muted == null) { return true; }
  ,
  RtcEngineEventHandler.onUserMuteVideo!(uid,muted);
  return true;


case 'RtcEngineEventHandler_onUserEnableVideo':
if (RtcEngineEventHandler.onuserenablevideo == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserEnableVideoJson paramJson = RtcEngineEventHandlerOnUserEnableVideoJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
bool? enabled = paramJson.enabled;
  if (uid == null||enabled == null) { return true; }
  ,
  RtcEngineEventHandler.onUserEnableVideo!(uid,enabled);
  return true;


case 'RtcEngineEventHandler_onUserStateChanged':
if (RtcEngineEventHandler.onuserstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserStateChangedJson paramJson = RtcEngineEventHandlerOnUserStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
RemoteUserState? state = paramJson.state;
  if (uid == null||state == null) { return true; }
  ,
  RtcEngineEventHandler.onUserStateChanged!(uid,state);
  return true;


case 'RtcEngineEventHandler_onUserEnableLocalVideo':
if (RtcEngineEventHandler.onuserenablelocalvideo == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserEnableLocalVideoJson paramJson = RtcEngineEventHandlerOnUserEnableLocalVideoJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
bool? enabled = paramJson.enabled;
  if (uid == null||enabled == null) { return true; }
  ,
  RtcEngineEventHandler.onUserEnableLocalVideo!(uid,enabled);
  return true;


case 'RtcEngineEventHandler_onRemoteAudioStats':
if (RtcEngineEventHandler.onremoteaudiostats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteAudioStatsJson paramJson = RtcEngineEventHandlerOnRemoteAudioStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RemoteAudioStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  RtcEngineEventHandler.onRemoteAudioStats!(stats);
  return true;


case 'RtcEngineEventHandler_onLocalAudioStats':
if (RtcEngineEventHandler.onlocalaudiostats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalAudioStatsJson paramJson = RtcEngineEventHandlerOnLocalAudioStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
LocalAudioStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  RtcEngineEventHandler.onLocalAudioStats!(stats);
  return true;


case 'RtcEngineEventHandler_onLocalVideoStats':
if (RtcEngineEventHandler.onlocalvideostats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalVideoStatsJson paramJson = RtcEngineEventHandlerOnLocalVideoStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? source = paramJson.source;
LocalVideoStats? stats = paramJson.stats;
  if (source == null||stats == null) { return true; }
  ,
  RtcEngineEventHandler.onLocalVideoStats!(source,stats);
  return true;


case 'RtcEngineEventHandler_onRemoteVideoStats':
if (RtcEngineEventHandler.onremotevideostats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteVideoStatsJson paramJson = RtcEngineEventHandlerOnRemoteVideoStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RemoteVideoStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  RtcEngineEventHandler.onRemoteVideoStats!(stats);
  return true;


case 'RtcEngineEventHandler_onCameraReady':
if (RtcEngineEventHandler.oncameraready == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnCameraReadyJson paramJson = RtcEngineEventHandlerOnCameraReadyJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onCameraReady!();
  return true;


case 'RtcEngineEventHandler_onCameraFocusAreaChanged':
if (RtcEngineEventHandler.oncamerafocusareachanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnCameraFocusAreaChangedJson paramJson = RtcEngineEventHandlerOnCameraFocusAreaChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? x = paramJson.x;
int? y = paramJson.y;
int? width = paramJson.width;
int? height = paramJson.height;
  if (x == null||y == null||width == null||height == null) { return true; }
  ,,,
  RtcEngineEventHandler.onCameraFocusAreaChanged!(x,y,width,height);
  return true;


case 'RtcEngineEventHandler_onCameraExposureAreaChanged':
if (RtcEngineEventHandler.oncameraexposureareachanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnCameraExposureAreaChangedJson paramJson = RtcEngineEventHandlerOnCameraExposureAreaChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? x = paramJson.x;
int? y = paramJson.y;
int? width = paramJson.width;
int? height = paramJson.height;
  if (x == null||y == null||width == null||height == null) { return true; }
  ,,,
  RtcEngineEventHandler.onCameraExposureAreaChanged!(x,y,width,height);
  return true;


case 'RtcEngineEventHandler_onFacePositionChanged':
if (RtcEngineEventHandler.onfacepositionchanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFacePositionChangedJson paramJson = RtcEngineEventHandlerOnFacePositionChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? imagewidth = paramJson.imagewidth;
int? imageheight = paramJson.imageheight;
Rectangle? vecrectangle = paramJson.vecrectangle;
int? vecdistance = paramJson.vecdistance;
int? numfaces = paramJson.numfaces;
  if (imagewidth == null||imageheight == null||vecrectangle == null||vecdistance == null||numfaces == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onFacePositionChanged!(imagewidth,imageheight,vecrectangle,vecdistance,numfaces);
  return true;


case 'RtcEngineEventHandler_onVideoStopped':
if (RtcEngineEventHandler.onvideostopped == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoStoppedJson paramJson = RtcEngineEventHandlerOnVideoStoppedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onVideoStopped!();
  return true;


case 'RtcEngineEventHandler_onAudioMixingStateChanged':
if (RtcEngineEventHandler.onaudiomixingstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioMixingStateChangedJson paramJson = RtcEngineEventHandlerOnAudioMixingStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
AudioMixingStateType? state = paramJson.state;
AudioMixingReasonType? reason = paramJson.reason;
  if (state == null||reason == null) { return true; }
  ,
  RtcEngineEventHandler.onAudioMixingStateChanged!(state,reason);
  return true;


case 'RtcEngineEventHandler_onRhythmPlayerStateChanged':
if (RtcEngineEventHandler.onrhythmplayerstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRhythmPlayerStateChangedJson paramJson = RtcEngineEventHandlerOnRhythmPlayerStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RhythmPlayerStateType? state = paramJson.state;
RhythmPlayerReason? reason = paramJson.reason;
  if (state == null||reason == null) { return true; }
  ,
  RtcEngineEventHandler.onRhythmPlayerStateChanged!(state,reason);
  return true;


case 'RtcEngineEventHandler_onConnectionLost':
if (RtcEngineEventHandler.onconnectionlost == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnConnectionLostJson paramJson = RtcEngineEventHandlerOnConnectionLostJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onConnectionLost!();
  return true;


case 'RtcEngineEventHandler_onConnectionInterrupted':
if (RtcEngineEventHandler.onconnectioninterrupted == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnConnectionInterruptedJson paramJson = RtcEngineEventHandlerOnConnectionInterruptedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onConnectionInterrupted!();
  return true;


case 'RtcEngineEventHandler_onConnectionBanned':
if (RtcEngineEventHandler.onconnectionbanned == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnConnectionBannedJson paramJson = RtcEngineEventHandlerOnConnectionBannedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onConnectionBanned!();
  return true;


case 'RtcEngineEventHandler_onStreamMessage':
if (RtcEngineEventHandler.onstreammessage == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnStreamMessageJson paramJson = RtcEngineEventHandlerOnStreamMessageJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? streamid = paramJson.streamid;
String? data = paramJson.data;
int? length = paramJson.length;
int? sentts = paramJson.sentts;
  if (uid == null||streamid == null||data == null||length == null||sentts == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onStreamMessage!(uid,streamid,data,length,sentts);
  return true;


case 'RtcEngineEventHandler_onStreamMessageError':
if (RtcEngineEventHandler.onstreammessageerror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnStreamMessageErrorJson paramJson = RtcEngineEventHandlerOnStreamMessageErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? streamid = paramJson.streamid;
int? code = paramJson.code;
int? missed = paramJson.missed;
int? cached = paramJson.cached;
  if (uid == null||streamid == null||code == null||missed == null||cached == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onStreamMessageError!(uid,streamid,code,missed,cached);
  return true;


case 'RtcEngineEventHandler_onRequestToken':
if (RtcEngineEventHandler.onrequesttoken == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRequestTokenJson paramJson = RtcEngineEventHandlerOnRequestTokenJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onRequestToken!();
  return true;


case 'RtcEngineEventHandler_onTokenPrivilegeWillExpire':
if (RtcEngineEventHandler.ontokenprivilegewillexpire == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnTokenPrivilegeWillExpireJson paramJson = RtcEngineEventHandlerOnTokenPrivilegeWillExpireJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? token = paramJson.token;
  if (token == null) { return true; }
  
  RtcEngineEventHandler.onTokenPrivilegeWillExpire!(token);
  return true;


case 'RtcEngineEventHandler_onLicenseValidationFailure':
if (RtcEngineEventHandler.onlicensevalidationfailure == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLicenseValidationFailureJson paramJson = RtcEngineEventHandlerOnLicenseValidationFailureJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
LicenseErrorType? error = paramJson.error;
  if (error == null) { return true; }
  
  RtcEngineEventHandler.onLicenseValidationFailure!(error);
  return true;


case 'RtcEngineEventHandler_onFirstLocalAudioFramePublished':
if (RtcEngineEventHandler.onfirstlocalaudioframepublished == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstLocalAudioFramePublishedJson paramJson = RtcEngineEventHandlerOnFirstLocalAudioFramePublishedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? elapsed = paramJson.elapsed;
  if (elapsed == null) { return true; }
  
  RtcEngineEventHandler.onFirstLocalAudioFramePublished!(elapsed);
  return true;


case 'RtcEngineEventHandler_onFirstRemoteAudioDecoded':
if (RtcEngineEventHandler.onfirstremoteaudiodecoded == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstRemoteAudioDecodedJson paramJson = RtcEngineEventHandlerOnFirstRemoteAudioDecodedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? elapsed = paramJson.elapsed;
  if (uid == null||elapsed == null) { return true; }
  ,
  RtcEngineEventHandler.onFirstRemoteAudioDecoded!(uid,elapsed);
  return true;


case 'RtcEngineEventHandler_onFirstRemoteAudioFrame':
if (RtcEngineEventHandler.onfirstremoteaudioframe == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnFirstRemoteAudioFrameJson paramJson = RtcEngineEventHandlerOnFirstRemoteAudioFrameJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? elapsed = paramJson.elapsed;
  if (uid == null||elapsed == null) { return true; }
  ,
  RtcEngineEventHandler.onFirstRemoteAudioFrame!(uid,elapsed);
  return true;


case 'RtcEngineEventHandler_onLocalAudioStateChanged':
if (RtcEngineEventHandler.onlocalaudiostatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalAudioStateChangedJson paramJson = RtcEngineEventHandlerOnLocalAudioStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
LocalAudioStreamState? state = paramJson.state;
LocalAudioStreamReason? reason = paramJson.reason;
  if (state == null||reason == null) { return true; }
  ,
  RtcEngineEventHandler.onLocalAudioStateChanged!(state,reason);
  return true;


case 'RtcEngineEventHandler_onRemoteAudioStateChanged':
if (RtcEngineEventHandler.onremoteaudiostatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteAudioStateChangedJson paramJson = RtcEngineEventHandlerOnRemoteAudioStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
RemoteAudioState? state = paramJson.state;
RemoteAudioStateReason? reason = paramJson.reason;
int? elapsed = paramJson.elapsed;
  if (uid == null||state == null||reason == null||elapsed == null) { return true; }
  ,,,
  RtcEngineEventHandler.onRemoteAudioStateChanged!(uid,state,reason,elapsed);
  return true;


case 'RtcEngineEventHandler_onActiveSpeaker':
if (RtcEngineEventHandler.onactivespeaker == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnActiveSpeakerJson paramJson = RtcEngineEventHandlerOnActiveSpeakerJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
  if (uid == null) { return true; }
  
  RtcEngineEventHandler.onActiveSpeaker!(uid);
  return true;


case 'RtcEngineEventHandler_onContentInspectResult':
if (RtcEngineEventHandler.oncontentinspectresult == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnContentInspectResultJson paramJson = RtcEngineEventHandlerOnContentInspectResultJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
ContentInspectResult? result = paramJson.result;
  if (result == null) { return true; }
  
  RtcEngineEventHandler.onContentInspectResult!(result);
  return true;


case 'RtcEngineEventHandler_onSnapshotTaken':
if (RtcEngineEventHandler.onsnapshottaken == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnSnapshotTakenJson paramJson = RtcEngineEventHandlerOnSnapshotTakenJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
String? filepath = paramJson.filepath;
int? width = paramJson.width;
int? height = paramJson.height;
int? errcode = paramJson.errcode;
  if (uid == null||filepath == null||width == null||height == null||errcode == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onSnapshotTaken!(uid,filepath,width,height,errcode);
  return true;


case 'RtcEngineEventHandler_onClientRoleChanged':
if (RtcEngineEventHandler.onclientrolechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnClientRoleChangedJson paramJson = RtcEngineEventHandlerOnClientRoleChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
ClientRoleType? oldrole = paramJson.oldrole;
ClientRoleType? newrole = paramJson.newrole;
ClientRoleOptions? newroleoptions = paramJson.newroleoptions;
  if (oldrole == null||newrole == null||newroleoptions == null) { return true; }
  ,,
  RtcEngineEventHandler.onClientRoleChanged!(oldrole,newrole,newroleoptions);
  return true;


case 'RtcEngineEventHandler_onClientRoleChangeFailed':
if (RtcEngineEventHandler.onclientrolechangefailed == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnClientRoleChangeFailedJson paramJson = RtcEngineEventHandlerOnClientRoleChangeFailedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
ClientRoleChangeFailedReason? reason = paramJson.reason;
ClientRoleType? currentrole = paramJson.currentrole;
  if (reason == null||currentrole == null) { return true; }
  ,
  RtcEngineEventHandler.onClientRoleChangeFailed!(reason,currentrole);
  return true;


case 'RtcEngineEventHandler_onAudioDeviceVolumeChanged':
if (RtcEngineEventHandler.onaudiodevicevolumechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioDeviceVolumeChangedJson paramJson = RtcEngineEventHandlerOnAudioDeviceVolumeChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
MediaDeviceType? devicetype = paramJson.devicetype;
int? volume = paramJson.volume;
bool? muted = paramJson.muted;
  if (devicetype == null||volume == null||muted == null) { return true; }
  ,,
  RtcEngineEventHandler.onAudioDeviceVolumeChanged!(devicetype,volume,muted);
  return true;


case 'RtcEngineEventHandler_onRtmpStreamingStateChanged':
if (RtcEngineEventHandler.onrtmpstreamingstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRtmpStreamingStateChangedJson paramJson = RtcEngineEventHandlerOnRtmpStreamingStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? url = paramJson.url;
RtmpStreamPublishState? state = paramJson.state;
RtmpStreamPublishReason? reason = paramJson.reason;
  if (url == null||state == null||reason == null) { return true; }
  ,,
  RtcEngineEventHandler.onRtmpStreamingStateChanged!(url,state,reason);
  return true;


case 'RtcEngineEventHandler_onRtmpStreamingEvent':
if (RtcEngineEventHandler.onrtmpstreamingevent == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRtmpStreamingEventJson paramJson = RtcEngineEventHandlerOnRtmpStreamingEventJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? url = paramJson.url;
RtmpStreamingEvent? eventcode = paramJson.eventcode;
  if (url == null||eventcode == null) { return true; }
  ,
  RtcEngineEventHandler.onRtmpStreamingEvent!(url,eventcode);
  return true;


case 'RtcEngineEventHandler_onTranscodingUpdated':
if (RtcEngineEventHandler.ontranscodingupdated == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnTranscodingUpdatedJson paramJson = RtcEngineEventHandlerOnTranscodingUpdatedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
RtcEngineEventHandler.onTranscodingUpdated!();
  return true;


case 'RtcEngineEventHandler_onAudioRoutingChanged':
if (RtcEngineEventHandler.onaudioroutingchanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioRoutingChangedJson paramJson = RtcEngineEventHandlerOnAudioRoutingChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? routing = paramJson.routing;
  if (routing == null) { return true; }
  
  RtcEngineEventHandler.onAudioRoutingChanged!(routing);
  return true;


case 'RtcEngineEventHandler_onChannelMediaRelayStateChanged':
if (RtcEngineEventHandler.onchannelmediarelaystatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnChannelMediaRelayStateChangedJson paramJson = RtcEngineEventHandlerOnChannelMediaRelayStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? state = paramJson.state;
int? code = paramJson.code;
  if (state == null||code == null) { return true; }
  ,
  RtcEngineEventHandler.onChannelMediaRelayStateChanged!(state,code);
  return true;


case 'RtcEngineEventHandler_onLocalPublishFallbackToAudioOnly':
if (RtcEngineEventHandler.onlocalpublishfallbacktoaudioonly == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalPublishFallbackToAudioOnlyJson paramJson = RtcEngineEventHandlerOnLocalPublishFallbackToAudioOnlyJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
bool? isfallbackorrecover = paramJson.isfallbackorrecover;
  if (isfallbackorrecover == null) { return true; }
  
  RtcEngineEventHandler.onLocalPublishFallbackToAudioOnly!(isfallbackorrecover);
  return true;


case 'RtcEngineEventHandler_onRemoteSubscribeFallbackToAudioOnly':
if (RtcEngineEventHandler.onremotesubscribefallbacktoaudioonly == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteSubscribeFallbackToAudioOnlyJson paramJson = RtcEngineEventHandlerOnRemoteSubscribeFallbackToAudioOnlyJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
bool? isfallbackorrecover = paramJson.isfallbackorrecover;
  if (uid == null||isfallbackorrecover == null) { return true; }
  ,
  RtcEngineEventHandler.onRemoteSubscribeFallbackToAudioOnly!(uid,isfallbackorrecover);
  return true;


case 'RtcEngineEventHandler_onRemoteAudioTransportStats':
if (RtcEngineEventHandler.onremoteaudiotransportstats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteAudioTransportStatsJson paramJson = RtcEngineEventHandlerOnRemoteAudioTransportStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? delay = paramJson.delay;
int? lost = paramJson.lost;
int? rxkbitrate = paramJson.rxkbitrate;
  if (uid == null||delay == null||lost == null||rxkbitrate == null) { return true; }
  ,,,
  RtcEngineEventHandler.onRemoteAudioTransportStats!(uid,delay,lost,rxkbitrate);
  return true;


case 'RtcEngineEventHandler_onRemoteVideoTransportStats':
if (RtcEngineEventHandler.onremotevideotransportstats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnRemoteVideoTransportStatsJson paramJson = RtcEngineEventHandlerOnRemoteVideoTransportStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? delay = paramJson.delay;
int? lost = paramJson.lost;
int? rxkbitrate = paramJson.rxkbitrate;
  if (uid == null||delay == null||lost == null||rxkbitrate == null) { return true; }
  ,,,
  RtcEngineEventHandler.onRemoteVideoTransportStats!(uid,delay,lost,rxkbitrate);
  return true;


case 'RtcEngineEventHandler_onConnectionStateChanged':
if (RtcEngineEventHandler.onconnectionstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnConnectionStateChangedJson paramJson = RtcEngineEventHandlerOnConnectionStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
ConnectionStateType? state = paramJson.state;
ConnectionChangedReasonType? reason = paramJson.reason;
  if (state == null||reason == null) { return true; }
  ,
  RtcEngineEventHandler.onConnectionStateChanged!(state,reason);
  return true;


case 'RtcEngineEventHandler_onWlAccMessage':
if (RtcEngineEventHandler.onwlaccmessage == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnWlAccMessageJson paramJson = RtcEngineEventHandlerOnWlAccMessageJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
WlaccMessageReason? reason = paramJson.reason;
WlaccSuggestAction? action = paramJson.action;
String? wlaccmsg = paramJson.wlaccmsg;
  if (reason == null||action == null||wlaccmsg == null) { return true; }
  ,,
  RtcEngineEventHandler.onWlAccMessage!(reason,action,wlaccmsg);
  return true;


case 'RtcEngineEventHandler_onWlAccStats':
if (RtcEngineEventHandler.onwlaccstats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnWlAccStatsJson paramJson = RtcEngineEventHandlerOnWlAccStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
WlAccStats? currentstats = paramJson.currentstats;
WlAccStats? averagestats = paramJson.averagestats;
  if (currentstats == null||averagestats == null) { return true; }
  ,
  RtcEngineEventHandler.onWlAccStats!(currentstats,averagestats);
  return true;


case 'RtcEngineEventHandler_onNetworkTypeChanged':
if (RtcEngineEventHandler.onnetworktypechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnNetworkTypeChangedJson paramJson = RtcEngineEventHandlerOnNetworkTypeChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
NetworkType? type = paramJson.type;
  if (type == null) { return true; }
  
  RtcEngineEventHandler.onNetworkTypeChanged!(type);
  return true;


case 'RtcEngineEventHandler_onEncryptionError':
if (RtcEngineEventHandler.onencryptionerror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnEncryptionErrorJson paramJson = RtcEngineEventHandlerOnEncryptionErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
EncryptionErrorType? errortype = paramJson.errortype;
  if (errortype == null) { return true; }
  
  RtcEngineEventHandler.onEncryptionError!(errortype);
  return true;


case 'RtcEngineEventHandler_onPermissionError':
if (RtcEngineEventHandler.onpermissionerror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnPermissionErrorJson paramJson = RtcEngineEventHandlerOnPermissionErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
PermissionType? permissiontype = paramJson.permissiontype;
  if (permissiontype == null) { return true; }
  
  RtcEngineEventHandler.onPermissionError!(permissiontype);
  return true;


case 'RtcEngineEventHandler_onLocalUserRegistered':
if (RtcEngineEventHandler.onlocaluserregistered == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalUserRegisteredJson paramJson = RtcEngineEventHandlerOnLocalUserRegisteredJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
String? useraccount = paramJson.useraccount;
  if (uid == null||useraccount == null) { return true; }
  ,
  RtcEngineEventHandler.onLocalUserRegistered!(uid,useraccount);
  return true;


case 'RtcEngineEventHandler_onUserInfoUpdated':
if (RtcEngineEventHandler.onuserinfoupdated == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserInfoUpdatedJson paramJson = RtcEngineEventHandlerOnUserInfoUpdatedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
UserInfo? info = paramJson.info;
  if (uid == null||info == null) { return true; }
  ,
  RtcEngineEventHandler.onUserInfoUpdated!(uid,info);
  return true;


case 'RtcEngineEventHandler_onUserAccountUpdated':
if (RtcEngineEventHandler.onuseraccountupdated == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUserAccountUpdatedJson paramJson = RtcEngineEventHandlerOnUserAccountUpdatedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
String? useraccount = paramJson.useraccount;
  if (uid == null||useraccount == null) { return true; }
  ,
  RtcEngineEventHandler.onUserAccountUpdated!(uid,useraccount);
  return true;


case 'RtcEngineEventHandler_onVideoRenderingTracingResult':
if (RtcEngineEventHandler.onvideorenderingtracingresult == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoRenderingTracingResultJson paramJson = RtcEngineEventHandlerOnVideoRenderingTracingResultJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
MediaTraceEvent? currentevent = paramJson.currentevent;
VideoRenderingTracingInfo? tracinginfo = paramJson.tracinginfo;
  if (uid == null||currentevent == null||tracinginfo == null) { return true; }
  ,,
  RtcEngineEventHandler.onVideoRenderingTracingResult!(uid,currentevent,tracinginfo);
  return true;


case 'RtcEngineEventHandler_onLocalVideoTranscoderError':
if (RtcEngineEventHandler.onlocalvideotranscodererror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnLocalVideoTranscoderErrorJson paramJson = RtcEngineEventHandlerOnLocalVideoTranscoderErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
TranscodingVideoStream? stream = paramJson.stream;
VideoTranscoderError? error = paramJson.error;
  if (stream == null||error == null) { return true; }
  ,
  RtcEngineEventHandler.onLocalVideoTranscoderError!(stream,error);
  return true;


case 'RtcEngineEventHandler_onUploadLogResult':
if (RtcEngineEventHandler.onuploadlogresult == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnUploadLogResultJson paramJson = RtcEngineEventHandlerOnUploadLogResultJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? requestid = paramJson.requestid;
bool? success = paramJson.success;
UploadErrorReason? reason = paramJson.reason;
  if (requestid == null||success == null||reason == null) { return true; }
  ,,
  RtcEngineEventHandler.onUploadLogResult!(requestid,success,reason);
  return true;


case 'RtcEngineEventHandler_onAudioSubscribeStateChanged':
if (RtcEngineEventHandler.onaudiosubscribestatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioSubscribeStateChangedJson paramJson = RtcEngineEventHandlerOnAudioSubscribeStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
int? uid = paramJson.uid;
StreamSubscribeState? oldstate = paramJson.oldstate;
StreamSubscribeState? newstate = paramJson.newstate;
int? elapsesincelaststate = paramJson.elapsesincelaststate;
  if (channel == null||uid == null||oldstate == null||newstate == null||elapsesincelaststate == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onAudioSubscribeStateChanged!(channel,uid,oldstate,newstate,elapsesincelaststate);
  return true;


case 'RtcEngineEventHandler_onVideoSubscribeStateChanged':
if (RtcEngineEventHandler.onvideosubscribestatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoSubscribeStateChangedJson paramJson = RtcEngineEventHandlerOnVideoSubscribeStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
int? uid = paramJson.uid;
StreamSubscribeState? oldstate = paramJson.oldstate;
StreamSubscribeState? newstate = paramJson.newstate;
int? elapsesincelaststate = paramJson.elapsesincelaststate;
  if (channel == null||uid == null||oldstate == null||newstate == null||elapsesincelaststate == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onVideoSubscribeStateChanged!(channel,uid,oldstate,newstate,elapsesincelaststate);
  return true;


case 'RtcEngineEventHandler_onAudioPublishStateChanged':
if (RtcEngineEventHandler.onaudiopublishstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnAudioPublishStateChangedJson paramJson = RtcEngineEventHandlerOnAudioPublishStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? channel = paramJson.channel;
StreamPublishState? oldstate = paramJson.oldstate;
StreamPublishState? newstate = paramJson.newstate;
int? elapsesincelaststate = paramJson.elapsesincelaststate;
  if (channel == null||oldstate == null||newstate == null||elapsesincelaststate == null) { return true; }
  ,,,
  RtcEngineEventHandler.onAudioPublishStateChanged!(channel,oldstate,newstate,elapsesincelaststate);
  return true;


case 'RtcEngineEventHandler_onVideoPublishStateChanged':
if (RtcEngineEventHandler.onvideopublishstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnVideoPublishStateChangedJson paramJson = RtcEngineEventHandlerOnVideoPublishStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
VideoSourceType? source = paramJson.source;
String? channel = paramJson.channel;
StreamPublishState? oldstate = paramJson.oldstate;
StreamPublishState? newstate = paramJson.newstate;
int? elapsesincelaststate = paramJson.elapsesincelaststate;
  if (source == null||channel == null||oldstate == null||newstate == null||elapsesincelaststate == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onVideoPublishStateChanged!(source,channel,oldstate,newstate,elapsesincelaststate);
  return true;


case 'RtcEngineEventHandler_onTranscodedStreamLayoutInfo':
if (RtcEngineEventHandler.ontranscodedstreamlayoutinfo == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnTranscodedStreamLayoutInfoJson paramJson = RtcEngineEventHandlerOnTranscodedStreamLayoutInfoJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? uid = paramJson.uid;
int? width = paramJson.width;
int? height = paramJson.height;
int? layoutcount = paramJson.layoutcount;
VideoLayout? layoutlist = paramJson.layoutlist;
  if (uid == null||width == null||height == null||layoutcount == null||layoutlist == null) { return true; }
  ,,,,
  RtcEngineEventHandler.onTranscodedStreamLayoutInfo!(uid,width,height,layoutcount,layoutlist);
  return true;


case 'RtcEngineEventHandler_onExtensionEvent':
if (RtcEngineEventHandler.onextensionevent == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnExtensionEventJson paramJson = RtcEngineEventHandlerOnExtensionEventJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? provider = paramJson.provider;
String? extension = paramJson.extension;
String? key = paramJson.key;
String? value = paramJson.value;
  if (provider == null||extension == null||key == null||value == null) { return true; }
  ,,,
  RtcEngineEventHandler.onExtensionEvent!(provider,extension,key,value);
  return true;


case 'RtcEngineEventHandler_onExtensionStarted':
if (RtcEngineEventHandler.onextensionstarted == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnExtensionStartedJson paramJson = RtcEngineEventHandlerOnExtensionStartedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? provider = paramJson.provider;
String? extension = paramJson.extension;
  if (provider == null||extension == null) { return true; }
  ,
  RtcEngineEventHandler.onExtensionStarted!(provider,extension);
  return true;


case 'RtcEngineEventHandler_onExtensionStopped':
if (RtcEngineEventHandler.onextensionstopped == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnExtensionStoppedJson paramJson = RtcEngineEventHandlerOnExtensionStoppedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? provider = paramJson.provider;
String? extension = paramJson.extension;
  if (provider == null||extension == null) { return true; }
  ,
  RtcEngineEventHandler.onExtensionStopped!(provider,extension);
  return true;


case 'RtcEngineEventHandler_onExtensionError':
if (RtcEngineEventHandler.onextensionerror == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnExtensionErrorJson paramJson = RtcEngineEventHandlerOnExtensionErrorJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
String? provider = paramJson.provider;
String? extension = paramJson.extension;
int? error = paramJson.error;
String? message = paramJson.message;
  if (provider == null||extension == null||error == null||message == null) { return true; }
  ,,,
  RtcEngineEventHandler.onExtensionError!(provider,extension,error,message);
  return true;


case 'RtcEngineEventHandler_onSetRtmFlagResult':
if (RtcEngineEventHandler.onsetrtmflagresult == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
RtcEngineEventHandlerOnSetRtmFlagResultJson paramJson = RtcEngineEventHandlerOnSetRtmFlagResultJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
int? code = paramJson.code;
  if (code == null) { return true; }
  
  RtcEngineEventHandler.onSetRtmFlagResult!(code);
  return true;

    }
    return false;
}

@override
bool handleEvent(String eventName, String eventData, List<Uint8List> buffers) {
    if (!eventName.startsWith('RtcEngineEventHandler')) return false;
    final newEvent = eventName.replaceFirst('RtcEngineEventHandler_', '');
    if (handleEventInternal(newEvent, eventData, buffers)) { return true; }
    return false;
}
}
class MetadataObserverWrapper implements EventLoopEventHandler {
const MetadataObserverWrapper(this.MetadataObserver);

final MetadataObserver MetadataObserver;

@override
bool operator ==(Object other) {
  if (other.runtimeType != runtimeType) {
    return false;
  }
  return other is MetadataObserverWrapper &&
      other.MetadataObserver == MetadataObserver;
}
@override
int get hashCode => MetadataObserver.hashCode;

@override
bool handleEventInternal(String eventName, String eventData, List<Uint8List> buffers) {
    switch (eventName) {
        
case 'MetadataObserver_getMaxMetadataSize':
if (MetadataObserver.getmaxmetadatasize == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
MetadataObserverGetMaxMetadataSizeJson paramJson = MetadataObserverGetMaxMetadataSizeJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
MetadataObserver.getMaxMetadataSize!();
  return true;


case 'MetadataObserver_onReadyToSendMetadata':
if (MetadataObserver.onreadytosendmetadata == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
MetadataObserverOnReadyToSendMetadataJson paramJson = MetadataObserverOnReadyToSendMetadataJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
Metadata? metadata = paramJson.metadata;
VideoSourceType? sourceType = paramJson.sourceType;
  if (metadata == null||sourceType == null) { return true; }
  ,
  MetadataObserver.onReadyToSendMetadata!(metadata,sourceType);
  return true;


case 'MetadataObserver_onMetadataReceived':
if (MetadataObserver.onmetadatareceived == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
MetadataObserverOnMetadataReceivedJson paramJson = MetadataObserverOnMetadataReceivedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
Metadata? metadata = paramJson.metadata;
  if (metadata == null) { return true; }
  
  MetadataObserver.onMetadataReceived!(metadata);
  return true;

    }
    return false;
}

@override
bool handleEvent(String eventName, String eventData, List<Uint8List> buffers) {
    if (!eventName.startsWith('MetadataObserver')) return false;
    final newEvent = eventName.replaceFirst('MetadataObserver_', '');
    if (handleEventInternal(newEvent, eventData, buffers)) { return true; }
    return false;
}
}
class DirectCdnStreamingEventHandlerWrapper implements EventLoopEventHandler {
const DirectCdnStreamingEventHandlerWrapper(this.DirectCdnStreamingEventHandler);

final DirectCdnStreamingEventHandler DirectCdnStreamingEventHandler;

@override
bool operator ==(Object other) {
  if (other.runtimeType != runtimeType) {
    return false;
  }
  return other is DirectCdnStreamingEventHandlerWrapper &&
      other.DirectCdnStreamingEventHandler == DirectCdnStreamingEventHandler;
}
@override
int get hashCode => DirectCdnStreamingEventHandler.hashCode;

@override
bool handleEventInternal(String eventName, String eventData, List<Uint8List> buffers) {
    switch (eventName) {
        
case 'DirectCdnStreamingEventHandler_onDirectCdnStreamingStateChanged':
if (DirectCdnStreamingEventHandler.ondirectcdnstreamingstatechanged == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
DirectCdnStreamingEventHandlerOnDirectCdnStreamingStateChangedJson paramJson = DirectCdnStreamingEventHandlerOnDirectCdnStreamingStateChangedJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
DirectCdnStreamingState? state = paramJson.state;
DirectCdnStreamingReason? reason = paramJson.reason;
String? message = paramJson.message;
  if (state == null||reason == null||message == null) { return true; }
  ,,
  DirectCdnStreamingEventHandler.onDirectCdnStreamingStateChanged!(state,reason,message);
  return true;


case 'DirectCdnStreamingEventHandler_onDirectCdnStreamingStats':
if (DirectCdnStreamingEventHandler.ondirectcdnstreamingstats == null) {
    return true;
}
final jsonMap = jsonDecode(eventData);
DirectCdnStreamingEventHandlerOnDirectCdnStreamingStatsJson paramJson = DirectCdnStreamingEventHandlerOnDirectCdnStreamingStatsJson.fromJson(jsonMap);
paramJson = paramJson.fillBuffers(buffers);
DirectCdnStreamingStats? stats = paramJson.stats;
  if (stats == null) { return true; }
  
  DirectCdnStreamingEventHandler.onDirectCdnStreamingStats!(stats);
  return true;

    }
    return false;
}

@override
bool handleEvent(String eventName, String eventData, List<Uint8List> buffers) {
    if (!eventName.startsWith('DirectCdnStreamingEventHandler')) return false;
    final newEvent = eventName.replaceFirst('DirectCdnStreamingEventHandler_', '');
    if (handleEventInternal(newEvent, eventData, buffers)) { return true; }
    return false;
}
}