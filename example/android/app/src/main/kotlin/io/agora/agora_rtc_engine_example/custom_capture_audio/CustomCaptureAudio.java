// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.agora.agora_rtc_engine_example.custom_capture_audio;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class CustomCaptureAudio {
  private static class CustomCaptureAudioApiCodec extends StandardMessageCodec {
    public static final CustomCaptureAudioApiCodec INSTANCE = new CustomCaptureAudioApiCodec();
    private CustomCaptureAudioApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface CustomCaptureAudioApi {
    void setExternalAudioSource(Boolean enabled, Long sampleRate, Long channels);
    void setExternalAudioSourceVolume(Long sourcePos, Long volume);
    void startAudioRecord(Long sampleRate, Long channels);
    void stopAudioRecord();

    /** The codec used by CustomCaptureAudioApi. */
    static MessageCodec<Object> getCodec() {
      return CustomCaptureAudioApiCodec.INSTANCE;
    }

    /** Sets up an instance of `CustomCaptureAudioApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, CustomCaptureAudioApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CustomCaptureAudioApi.setExternalAudioSource", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              Number sampleRateArg = (Number)args.get(1);
              if (sampleRateArg == null) {
                throw new NullPointerException("sampleRateArg unexpectedly null.");
              }
              Number channelsArg = (Number)args.get(2);
              if (channelsArg == null) {
                throw new NullPointerException("channelsArg unexpectedly null.");
              }
              api.setExternalAudioSource(enabledArg, sampleRateArg.longValue(), channelsArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CustomCaptureAudioApi.setExternalAudioSourceVolume", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number sourcePosArg = (Number)args.get(0);
              if (sourcePosArg == null) {
                throw new NullPointerException("sourcePosArg unexpectedly null.");
              }
              Number volumeArg = (Number)args.get(1);
              if (volumeArg == null) {
                throw new NullPointerException("volumeArg unexpectedly null.");
              }
              api.setExternalAudioSourceVolume(sourcePosArg.longValue(), volumeArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CustomCaptureAudioApi.startAudioRecord", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number sampleRateArg = (Number)args.get(0);
              if (sampleRateArg == null) {
                throw new NullPointerException("sampleRateArg unexpectedly null.");
              }
              Number channelsArg = (Number)args.get(1);
              if (channelsArg == null) {
                throw new NullPointerException("channelsArg unexpectedly null.");
              }
              api.startAudioRecord(sampleRateArg.longValue(), channelsArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CustomCaptureAudioApi.stopAudioRecord", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stopAudioRecord();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
