// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "CustomCaptureAudio.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface CustomCaptureAudioApiCodecReader : FlutterStandardReader
@end
@implementation CustomCaptureAudioApiCodecReader
@end

@interface CustomCaptureAudioApiCodecWriter : FlutterStandardWriter
@end
@implementation CustomCaptureAudioApiCodecWriter
@end

@interface CustomCaptureAudioApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation CustomCaptureAudioApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[CustomCaptureAudioApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[CustomCaptureAudioApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *CustomCaptureAudioApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    CustomCaptureAudioApiCodecReaderWriter *readerWriter = [[CustomCaptureAudioApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void CustomCaptureAudioApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CustomCaptureAudioApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CustomCaptureAudioApi.setExternalAudioSource"
        binaryMessenger:binaryMessenger
        codec:CustomCaptureAudioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExternalAudioSourceEnabled:sampleRate:channels:error:)], @"CustomCaptureAudioApi api (%@) doesn't respond to @selector(setExternalAudioSourceEnabled:sampleRate:channels:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = args[0];
        NSNumber *arg_sampleRate = args[1];
        NSNumber *arg_channels = args[2];
        FlutterError *error;
        [api setExternalAudioSourceEnabled:arg_enabled sampleRate:arg_sampleRate channels:arg_channels error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CustomCaptureAudioApi.setExternalAudioSourceVolume"
        binaryMessenger:binaryMessenger
        codec:CustomCaptureAudioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExternalAudioSourceVolumeSourcePos:volume:error:)], @"CustomCaptureAudioApi api (%@) doesn't respond to @selector(setExternalAudioSourceVolumeSourcePos:volume:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_sourcePos = args[0];
        NSNumber *arg_volume = args[1];
        FlutterError *error;
        [api setExternalAudioSourceVolumeSourcePos:arg_sourcePos volume:arg_volume error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CustomCaptureAudioApi.startAudioRecord"
        binaryMessenger:binaryMessenger
        codec:CustomCaptureAudioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startAudioRecordSampleRate:channels:error:)], @"CustomCaptureAudioApi api (%@) doesn't respond to @selector(startAudioRecordSampleRate:channels:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_sampleRate = args[0];
        NSNumber *arg_channels = args[1];
        FlutterError *error;
        [api startAudioRecordSampleRate:arg_sampleRate channels:arg_channels error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.CustomCaptureAudioApi.stopAudioRecord"
        binaryMessenger:binaryMessenger
        codec:CustomCaptureAudioApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopAudioRecordWithError:)], @"CustomCaptureAudioApi api (%@) doesn't respond to @selector(stopAudioRecordWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopAudioRecordWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
