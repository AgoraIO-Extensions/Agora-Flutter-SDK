/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'dart:async';
import 'dart:typed_data';

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:iris_tester/iris_tester.dart';
import 'package:iris_method_channel/iris_method_channel.dart';

void generatedTestCases(IrisTester irisTester) {
  testWidgets(
    'onMusicChartsResult',
    (WidgetTester tester) async {
      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final musicContentCenter = rtcEngine.getMusicContentCenter();
      const musicContentCenterConfiguration = MusicContentCenterConfiguration(
          appId: 'app_id', token: 'token', mccUid: 10);
      await musicContentCenter.initialize(musicContentCenterConfiguration);

      final onMusicChartsResultCompleter = Completer<bool>();
      final theMusicContentCenterEventHandler = MusicContentCenterEventHandler(
        onMusicChartsResult: (String requestId, List result,
            MusicContentCenterStatusCode errorCode) {
          onMusicChartsResultCompleter.complete(true);
        },
      );

      musicContentCenter.registerEventHandler(
        theMusicContentCenterEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String requestId = "hello";
        const List<MusicChartInfo> result = [];
        const MusicContentCenterStatusCode errorCode =
            MusicContentCenterStatusCode.kMusicContentCenterStatusOk;

        final eventJson = {
          'requestId': requestId,
          'result': result,
          'errorCode': errorCode.value(),
        };

        irisTester.fireEvent(
            'MusicContentCenterEventHandler_onMusicChartsResult',
            params: eventJson);
      }

      final eventCalled = await onMusicChartsResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        musicContentCenter.unregisterEventHandler();
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await musicContentCenter.release();
      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onMusicCollectionResult',
    (WidgetTester tester) async {
      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final musicContentCenter = rtcEngine.getMusicContentCenter();
      const musicContentCenterConfiguration = MusicContentCenterConfiguration(
          appId: 'app_id', token: 'token', mccUid: 10);
      await musicContentCenter.initialize(musicContentCenterConfiguration);

      final onMusicCollectionResultCompleter = Completer<bool>();
      final theMusicContentCenterEventHandler = MusicContentCenterEventHandler(
        onMusicCollectionResult: (String requestId, MusicCollection result,
            MusicContentCenterStatusCode errorCode) {
          onMusicCollectionResultCompleter.complete(true);
        },
      );

      musicContentCenter.registerEventHandler(
        theMusicContentCenterEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String requestId = "hello";
        const MusicContentCenterStatusCode errorCode =
            MusicContentCenterStatusCode.kMusicContentCenterStatusOk;

        final eventJson = {
          'requestId': requestId,
          'errorCode': errorCode.value(),
        };

        irisTester.fireEvent(
            'MusicContentCenterEventHandler_onMusicCollectionResult',
            params: eventJson);
      }

      final eventCalled = await onMusicCollectionResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        musicContentCenter.unregisterEventHandler();
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await musicContentCenter.release();
      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLyricResult',
    (WidgetTester tester) async {
      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final musicContentCenter = rtcEngine.getMusicContentCenter();
      const musicContentCenterConfiguration = MusicContentCenterConfiguration(
          appId: 'app_id', token: 'token', mccUid: 10);
      await musicContentCenter.initialize(musicContentCenterConfiguration);

      final onLyricResultCompleter = Completer<bool>();
      final theMusicContentCenterEventHandler = MusicContentCenterEventHandler(
        onLyricResult: (String requestId, String lyricUrl,
            MusicContentCenterStatusCode errorCode) {
          onLyricResultCompleter.complete(true);
        },
      );

      musicContentCenter.registerEventHandler(
        theMusicContentCenterEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String requestId = "hello";
        const String lyricUrl = "hello";
        const MusicContentCenterStatusCode errorCode =
            MusicContentCenterStatusCode.kMusicContentCenterStatusOk;

        final eventJson = {
          'requestId': requestId,
          'lyricUrl': lyricUrl,
          'errorCode': errorCode.value(),
        };

        irisTester.fireEvent('MusicContentCenterEventHandler_onLyricResult',
            params: eventJson);
      }

      final eventCalled = await onLyricResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        musicContentCenter.unregisterEventHandler();
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await musicContentCenter.release();
      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onPreLoadEvent',
    (WidgetTester tester) async {
      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final musicContentCenter = rtcEngine.getMusicContentCenter();
      const musicContentCenterConfiguration = MusicContentCenterConfiguration(
          appId: 'app_id', token: 'token', mccUid: 10);
      await musicContentCenter.initialize(musicContentCenterConfiguration);

      final onPreLoadEventCompleter = Completer<bool>();
      final theMusicContentCenterEventHandler = MusicContentCenterEventHandler(
        onPreLoadEvent: (int songCode, int percent, String lyricUrl,
            PreloadStatusCode status, MusicContentCenterStatusCode errorCode) {
          onPreLoadEventCompleter.complete(true);
        },
      );

      musicContentCenter.registerEventHandler(
        theMusicContentCenterEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int songCode = 10;
        const int percent = 10;
        const String lyricUrl = "hello";
        const PreloadStatusCode status =
            PreloadStatusCode.kPreloadStatusCompleted;
        const MusicContentCenterStatusCode errorCode =
            MusicContentCenterStatusCode.kMusicContentCenterStatusOk;

        final eventJson = {
          'songCode': songCode,
          'percent': percent,
          'lyricUrl': lyricUrl,
          'status': status.value(),
          'errorCode': errorCode.value(),
        };

        irisTester.fireEvent('MusicContentCenterEventHandler_onPreLoadEvent',
            params: eventJson);
      }

      final eventCalled = await onPreLoadEventCompleter.future;
      expect(eventCalled, isTrue);

      {
        musicContentCenter.unregisterEventHandler();
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await musicContentCenter.release();
      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );
}

