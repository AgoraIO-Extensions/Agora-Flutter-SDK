/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'dart:async';
import 'dart:typed_data';

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:iris_tester/iris_tester.dart';
import 'package:iris_method_channel/iris_method_channel.dart';

void generatedTestCases() {
  testWidgets(
    'onJoinChannelSuccess',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onJoinChannelSuccessCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          onJoinChannelSuccessCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onJoinChannelSuccess',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onJoinChannelSuccess',
            params: eventJson);
      }

      final eventCalled = await onJoinChannelSuccessCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRejoinChannelSuccess',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRejoinChannelSuccessCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRejoinChannelSuccess: (RtcConnection connection, int elapsed) {
          onRejoinChannelSuccessCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRejoinChannelSuccess',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRejoinChannelSuccess',
            params: eventJson);
      }

      final eventCalled = await onRejoinChannelSuccessCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onProxyConnected',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onProxyConnectedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onProxyConnected: (String channel, int uid, ProxyType proxyType,
            String localProxyIp, int elapsed) {
          onProxyConnectedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String channel = "hello";
        const int uid = 10;
        const ProxyType proxyType = ProxyType.noneProxyType;
        const String localProxyIp = "hello";
        const int elapsed = 10;

        final eventJson = {
          'channel': channel,
          'uid': uid,
          'proxyType': proxyType.value(),
          'localProxyIp': localProxyIp,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onProxyConnected',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onProxyConnected',
            params: eventJson);
      }

      final eventCalled = await onProxyConnectedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onError',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onErrorCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onError: (ErrorCodeType err, String msg) {
          onErrorCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const ErrorCodeType err = ErrorCodeType.errOk;
        const String msg = "hello";

        final eventJson = {
          'err': err.value(),
          'msg': msg,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onError',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onError',
            params: eventJson);
      }

      final eventCalled = await onErrorCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioQuality',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioQualityCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioQuality: (RtcConnection connection, int remoteUid,
            QualityType quality, int delay, int lost) {
          onAudioQualityCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const QualityType quality = QualityType.qualityUnknown;
        const int delay = 10;
        const int lost = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'quality': quality.value(),
          'delay': delay,
          'lost': lost,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioQuality',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onAudioQuality',
            params: eventJson);
      }

      final eventCalled = await onAudioQualityCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLastmileProbeResult',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLastmileProbeResultCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLastmileProbeResult: (LastmileProbeResult result) {
          onLastmileProbeResultCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const LastmileProbeResultState resultState =
            LastmileProbeResultState.lastmileProbeResultComplete;
        const int uplinkReportPacketLossRate = 10;
        const int uplinkReportJitter = 10;
        const int uplinkReportAvailableBandwidth = 10;
        const LastmileProbeOneWayResult resultUplinkReport =
            LastmileProbeOneWayResult(
          packetLossRate: uplinkReportPacketLossRate,
          jitter: uplinkReportJitter,
          availableBandwidth: uplinkReportAvailableBandwidth,
        );
        const int downlinkReportPacketLossRate = 10;
        const int downlinkReportJitter = 10;
        const int downlinkReportAvailableBandwidth = 10;
        const LastmileProbeOneWayResult resultDownlinkReport =
            LastmileProbeOneWayResult(
          packetLossRate: downlinkReportPacketLossRate,
          jitter: downlinkReportJitter,
          availableBandwidth: downlinkReportAvailableBandwidth,
        );
        const int resultRtt = 10;
        const LastmileProbeResult result = LastmileProbeResult(
          state: resultState,
          uplinkReport: resultUplinkReport,
          downlinkReport: resultDownlinkReport,
          rtt: resultRtt,
        );

        final eventJson = {
          'result': result.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLastmileProbeResult',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLastmileProbeResult',
            params: eventJson);
      }

      final eventCalled = await onLastmileProbeResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioVolumeIndication',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioVolumeIndicationCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioVolumeIndication: (RtcConnection connection, List speakers,
            int speakerNumber, int totalVolume) {
          onAudioVolumeIndicationCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const List<AudioVolumeInfo> speakers = [];
        const int speakerNumber = 10;
        const int totalVolume = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'speakers': speakers,
          'speakerNumber': speakerNumber,
          'totalVolume': totalVolume,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioVolumeIndication',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onAudioVolumeIndication',
            params: eventJson);
      }

      final eventCalled = await onAudioVolumeIndicationCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLeaveChannel',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLeaveChannelCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLeaveChannel: (RtcConnection connection, RtcStats stats) {
          onLeaveChannelCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int statsDuration = 10;
        const int statsTxBytes = 10;
        const int statsRxBytes = 10;
        const int statsTxAudioBytes = 10;
        const int statsTxVideoBytes = 10;
        const int statsRxAudioBytes = 10;
        const int statsRxVideoBytes = 10;
        const int statsTxKBitRate = 10;
        const int statsRxKBitRate = 10;
        const int statsRxAudioKBitRate = 10;
        const int statsTxAudioKBitRate = 10;
        const int statsRxVideoKBitRate = 10;
        const int statsTxVideoKBitRate = 10;
        const int statsLastmileDelay = 10;
        const int statsUserCount = 10;
        const double statsCpuAppUsage = 10.0;
        const double statsCpuTotalUsage = 10.0;
        const int statsGatewayRtt = 10;
        const double statsMemoryAppUsageRatio = 10.0;
        const double statsMemoryTotalUsageRatio = 10.0;
        const int statsMemoryAppUsageInKbytes = 10;
        const int statsConnectTimeMs = 10;
        const int statsFirstAudioPacketDuration = 10;
        const int statsFirstVideoPacketDuration = 10;
        const int statsFirstVideoKeyFramePacketDuration = 10;
        const int statsPacketsBeforeFirstKeyFramePacket = 10;
        const int statsFirstAudioPacketDurationAfterUnmute = 10;
        const int statsFirstVideoPacketDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFramePacketDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFrameDecodedDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFrameRenderedDurationAfterUnmute = 10;
        const int statsTxPacketLossRate = 10;
        const int statsRxPacketLossRate = 10;
        const RtcStats stats = RtcStats(
          duration: statsDuration,
          txBytes: statsTxBytes,
          rxBytes: statsRxBytes,
          txAudioBytes: statsTxAudioBytes,
          txVideoBytes: statsTxVideoBytes,
          rxAudioBytes: statsRxAudioBytes,
          rxVideoBytes: statsRxVideoBytes,
          txKBitRate: statsTxKBitRate,
          rxKBitRate: statsRxKBitRate,
          rxAudioKBitRate: statsRxAudioKBitRate,
          txAudioKBitRate: statsTxAudioKBitRate,
          rxVideoKBitRate: statsRxVideoKBitRate,
          txVideoKBitRate: statsTxVideoKBitRate,
          lastmileDelay: statsLastmileDelay,
          userCount: statsUserCount,
          cpuAppUsage: statsCpuAppUsage,
          cpuTotalUsage: statsCpuTotalUsage,
          gatewayRtt: statsGatewayRtt,
          memoryAppUsageRatio: statsMemoryAppUsageRatio,
          memoryTotalUsageRatio: statsMemoryTotalUsageRatio,
          memoryAppUsageInKbytes: statsMemoryAppUsageInKbytes,
          connectTimeMs: statsConnectTimeMs,
          firstAudioPacketDuration: statsFirstAudioPacketDuration,
          firstVideoPacketDuration: statsFirstVideoPacketDuration,
          firstVideoKeyFramePacketDuration:
              statsFirstVideoKeyFramePacketDuration,
          packetsBeforeFirstKeyFramePacket:
              statsPacketsBeforeFirstKeyFramePacket,
          firstAudioPacketDurationAfterUnmute:
              statsFirstAudioPacketDurationAfterUnmute,
          firstVideoPacketDurationAfterUnmute:
              statsFirstVideoPacketDurationAfterUnmute,
          firstVideoKeyFramePacketDurationAfterUnmute:
              statsFirstVideoKeyFramePacketDurationAfterUnmute,
          firstVideoKeyFrameDecodedDurationAfterUnmute:
              statsFirstVideoKeyFrameDecodedDurationAfterUnmute,
          firstVideoKeyFrameRenderedDurationAfterUnmute:
              statsFirstVideoKeyFrameRenderedDurationAfterUnmute,
          txPacketLossRate: statsTxPacketLossRate,
          rxPacketLossRate: statsRxPacketLossRate,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLeaveChannel',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLeaveChannel',
            params: eventJson);
      }

      final eventCalled = await onLeaveChannelCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRtcStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRtcStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRtcStats: (RtcConnection connection, RtcStats stats) {
          onRtcStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int statsDuration = 10;
        const int statsTxBytes = 10;
        const int statsRxBytes = 10;
        const int statsTxAudioBytes = 10;
        const int statsTxVideoBytes = 10;
        const int statsRxAudioBytes = 10;
        const int statsRxVideoBytes = 10;
        const int statsTxKBitRate = 10;
        const int statsRxKBitRate = 10;
        const int statsRxAudioKBitRate = 10;
        const int statsTxAudioKBitRate = 10;
        const int statsRxVideoKBitRate = 10;
        const int statsTxVideoKBitRate = 10;
        const int statsLastmileDelay = 10;
        const int statsUserCount = 10;
        const double statsCpuAppUsage = 10.0;
        const double statsCpuTotalUsage = 10.0;
        const int statsGatewayRtt = 10;
        const double statsMemoryAppUsageRatio = 10.0;
        const double statsMemoryTotalUsageRatio = 10.0;
        const int statsMemoryAppUsageInKbytes = 10;
        const int statsConnectTimeMs = 10;
        const int statsFirstAudioPacketDuration = 10;
        const int statsFirstVideoPacketDuration = 10;
        const int statsFirstVideoKeyFramePacketDuration = 10;
        const int statsPacketsBeforeFirstKeyFramePacket = 10;
        const int statsFirstAudioPacketDurationAfterUnmute = 10;
        const int statsFirstVideoPacketDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFramePacketDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFrameDecodedDurationAfterUnmute = 10;
        const int statsFirstVideoKeyFrameRenderedDurationAfterUnmute = 10;
        const int statsTxPacketLossRate = 10;
        const int statsRxPacketLossRate = 10;
        const RtcStats stats = RtcStats(
          duration: statsDuration,
          txBytes: statsTxBytes,
          rxBytes: statsRxBytes,
          txAudioBytes: statsTxAudioBytes,
          txVideoBytes: statsTxVideoBytes,
          rxAudioBytes: statsRxAudioBytes,
          rxVideoBytes: statsRxVideoBytes,
          txKBitRate: statsTxKBitRate,
          rxKBitRate: statsRxKBitRate,
          rxAudioKBitRate: statsRxAudioKBitRate,
          txAudioKBitRate: statsTxAudioKBitRate,
          rxVideoKBitRate: statsRxVideoKBitRate,
          txVideoKBitRate: statsTxVideoKBitRate,
          lastmileDelay: statsLastmileDelay,
          userCount: statsUserCount,
          cpuAppUsage: statsCpuAppUsage,
          cpuTotalUsage: statsCpuTotalUsage,
          gatewayRtt: statsGatewayRtt,
          memoryAppUsageRatio: statsMemoryAppUsageRatio,
          memoryTotalUsageRatio: statsMemoryTotalUsageRatio,
          memoryAppUsageInKbytes: statsMemoryAppUsageInKbytes,
          connectTimeMs: statsConnectTimeMs,
          firstAudioPacketDuration: statsFirstAudioPacketDuration,
          firstVideoPacketDuration: statsFirstVideoPacketDuration,
          firstVideoKeyFramePacketDuration:
              statsFirstVideoKeyFramePacketDuration,
          packetsBeforeFirstKeyFramePacket:
              statsPacketsBeforeFirstKeyFramePacket,
          firstAudioPacketDurationAfterUnmute:
              statsFirstAudioPacketDurationAfterUnmute,
          firstVideoPacketDurationAfterUnmute:
              statsFirstVideoPacketDurationAfterUnmute,
          firstVideoKeyFramePacketDurationAfterUnmute:
              statsFirstVideoKeyFramePacketDurationAfterUnmute,
          firstVideoKeyFrameDecodedDurationAfterUnmute:
              statsFirstVideoKeyFrameDecodedDurationAfterUnmute,
          firstVideoKeyFrameRenderedDurationAfterUnmute:
              statsFirstVideoKeyFrameRenderedDurationAfterUnmute,
          txPacketLossRate: statsTxPacketLossRate,
          rxPacketLossRate: statsRxPacketLossRate,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRtcStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRtcStats',
            params: eventJson);
      }

      final eventCalled = await onRtcStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioDeviceStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioDeviceStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioDeviceStateChanged: (String deviceId, MediaDeviceType deviceType,
            MediaDeviceStateType deviceState) {
          onAudioDeviceStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String deviceId = "hello";
        const MediaDeviceType deviceType = MediaDeviceType.unknownAudioDevice;
        const MediaDeviceStateType deviceState =
            MediaDeviceStateType.mediaDeviceStateIdle;

        final eventJson = {
          'deviceId': deviceId,
          'deviceType': deviceType.value(),
          'deviceState': deviceState.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioDeviceStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioDeviceStateChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioDeviceStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioMixingPositionChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioMixingPositionChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioMixingPositionChanged: (int position) {
          onAudioMixingPositionChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int position = 10;

        final eventJson = {
          'position': position,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onAudioMixingPositionChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioMixingPositionChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioMixingPositionChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioMixingFinished',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioMixingFinishedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioMixingFinished: () {
          onAudioMixingFinishedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        final eventJson = {};

        irisTester.fireEvent('RtcEngineEventHandler_onAudioMixingFinished',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onAudioMixingFinished',
            params: eventJson);
      }

      final eventCalled = await onAudioMixingFinishedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioEffectFinished',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioEffectFinishedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioEffectFinished: (int soundId) {
          onAudioEffectFinishedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int soundId = 10;

        final eventJson = {
          'soundId': soundId,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioEffectFinished',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onAudioEffectFinished',
            params: eventJson);
      }

      final eventCalled = await onAudioEffectFinishedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onVideoDeviceStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onVideoDeviceStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onVideoDeviceStateChanged: (String deviceId, MediaDeviceType deviceType,
            MediaDeviceStateType deviceState) {
          onVideoDeviceStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String deviceId = "hello";
        const MediaDeviceType deviceType = MediaDeviceType.unknownAudioDevice;
        const MediaDeviceStateType deviceState =
            MediaDeviceStateType.mediaDeviceStateIdle;

        final eventJson = {
          'deviceId': deviceId,
          'deviceType': deviceType.value(),
          'deviceState': deviceState.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onVideoDeviceStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onVideoDeviceStateChanged',
            params: eventJson);
      }

      final eventCalled = await onVideoDeviceStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onNetworkQuality',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onNetworkQualityCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onNetworkQuality: (RtcConnection connection, int remoteUid,
            QualityType txQuality, QualityType rxQuality) {
          onNetworkQualityCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const QualityType txQuality = QualityType.qualityUnknown;
        const QualityType rxQuality = QualityType.qualityUnknown;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'txQuality': txQuality.value(),
          'rxQuality': rxQuality.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onNetworkQuality',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onNetworkQuality',
            params: eventJson);
      }

      final eventCalled = await onNetworkQualityCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onIntraRequestReceived',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onIntraRequestReceivedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onIntraRequestReceived: (RtcConnection connection) {
          onIntraRequestReceivedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );

        final eventJson = {
          'connection': connection.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onIntraRequestReceived',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onIntraRequestReceived',
            params: eventJson);
      }

      final eventCalled = await onIntraRequestReceivedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUplinkNetworkInfoUpdated',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUplinkNetworkInfoUpdatedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUplinkNetworkInfoUpdated: (UplinkNetworkInfo info) {
          onUplinkNetworkInfoUpdatedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int infoVideoEncoderTargetBitrateBps = 10;
        const UplinkNetworkInfo info = UplinkNetworkInfo(
          videoEncoderTargetBitrateBps: infoVideoEncoderTargetBitrateBps,
        );

        final eventJson = {
          'info': info.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUplinkNetworkInfoUpdated',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onUplinkNetworkInfoUpdated',
            params: eventJson);
      }

      final eventCalled = await onUplinkNetworkInfoUpdatedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onDownlinkNetworkInfoUpdated',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onDownlinkNetworkInfoUpdatedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onDownlinkNetworkInfoUpdated: (DownlinkNetworkInfo info) {
          onDownlinkNetworkInfoUpdatedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int infoLastmileBufferDelayTimeMs = 10;
        const int infoBandwidthEstimationBps = 10;
        const int infoTotalDownscaleLevelCount = 10;
        const List<PeerDownlinkInfo> infoPeerDownlinkInfo = [];
        const int infoTotalReceivedVideoCount = 10;
        const DownlinkNetworkInfo info = DownlinkNetworkInfo(
          lastmileBufferDelayTimeMs: infoLastmileBufferDelayTimeMs,
          bandwidthEstimationBps: infoBandwidthEstimationBps,
          totalDownscaleLevelCount: infoTotalDownscaleLevelCount,
          peerDownlinkInfo: infoPeerDownlinkInfo,
          totalReceivedVideoCount: infoTotalReceivedVideoCount,
        );

        final eventJson = {
          'info': info.toJson(),
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onDownlinkNetworkInfoUpdated',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onDownlinkNetworkInfoUpdated',
            params: eventJson);
      }

      final eventCalled = await onDownlinkNetworkInfoUpdatedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLastmileQuality',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLastmileQualityCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLastmileQuality: (QualityType quality) {
          onLastmileQualityCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const QualityType quality = QualityType.qualityUnknown;

        final eventJson = {
          'quality': quality.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLastmileQuality',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLastmileQuality',
            params: eventJson);
      }

      final eventCalled = await onLastmileQualityCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstLocalVideoFrame',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstLocalVideoFrameCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstLocalVideoFrame:
            (RtcConnection connection, int width, int height, int elapsed) {
          onFirstLocalVideoFrameCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int width = 10;
        const int height = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'width': width,
          'height': height,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFirstLocalVideoFrame',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onFirstLocalVideoFrame',
            params: eventJson);
      }

      final eventCalled = await onFirstLocalVideoFrameCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstLocalVideoFramePublished',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstLocalVideoFramePublishedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstLocalVideoFramePublished:
            (RtcConnection connection, int elapsed) {
          onFirstLocalVideoFramePublishedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onFirstLocalVideoFramePublished',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onFirstLocalVideoFramePublished',
            params: eventJson);
      }

      final eventCalled = await onFirstLocalVideoFramePublishedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstRemoteVideoDecoded',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstRemoteVideoDecodedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstRemoteVideoDecoded: (RtcConnection connection, int remoteUid,
            int width, int height, int elapsed) {
          onFirstRemoteVideoDecodedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int width = 10;
        const int height = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'width': width,
          'height': height,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFirstRemoteVideoDecoded',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onFirstRemoteVideoDecoded',
            params: eventJson);
      }

      final eventCalled = await onFirstRemoteVideoDecodedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onVideoSizeChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onVideoSizeChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onVideoSizeChanged: (RtcConnection connection,
            VideoSourceType sourceType,
            int uid,
            int width,
            int height,
            int rotation) {
          onVideoSizeChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const VideoSourceType sourceType =
            VideoSourceType.videoSourceCameraPrimary;
        const int uid = 10;
        const int width = 10;
        const int height = 10;
        const int rotation = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'sourceType': sourceType.value(),
          'uid': uid,
          'width': width,
          'height': height,
          'rotation': rotation,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onVideoSizeChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onVideoSizeChanged',
            params: eventJson);
      }

      final eventCalled = await onVideoSizeChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalVideoStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalVideoStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalVideoStateChanged: (VideoSourceType source,
            LocalVideoStreamState state, LocalVideoStreamError error) {
          onLocalVideoStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const VideoSourceType source = VideoSourceType.videoSourceCameraPrimary;
        const LocalVideoStreamState state =
            LocalVideoStreamState.localVideoStreamStateStopped;
        const LocalVideoStreamError error =
            LocalVideoStreamError.localVideoStreamErrorOk;

        final eventJson = {
          'source': source.value(),
          'state': state.value(),
          'error': error.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLocalVideoStateChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLocalVideoStateChanged',
            params: eventJson);
      }

      final eventCalled = await onLocalVideoStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteVideoStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteVideoStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteVideoStateChanged: (RtcConnection connection,
            int remoteUid,
            RemoteVideoState state,
            RemoteVideoStateReason reason,
            int elapsed) {
          onRemoteVideoStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const RemoteVideoState state = RemoteVideoState.remoteVideoStateStopped;
        const RemoteVideoStateReason reason =
            RemoteVideoStateReason.remoteVideoStateReasonInternal;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'state': state.value(),
          'reason': reason.value(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRemoteVideoStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRemoteVideoStateChanged',
            params: eventJson);
      }

      final eventCalled = await onRemoteVideoStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstRemoteVideoFrame',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstRemoteVideoFrameCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstRemoteVideoFrame: (RtcConnection connection, int remoteUid,
            int width, int height, int elapsed) {
          onFirstRemoteVideoFrameCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int width = 10;
        const int height = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'width': width,
          'height': height,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFirstRemoteVideoFrame',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onFirstRemoteVideoFrame',
            params: eventJson);
      }

      final eventCalled = await onFirstRemoteVideoFrameCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserJoined',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserJoinedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          onUserJoinedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserJoined',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserJoined',
            params: eventJson);
      }

      final eventCalled = await onUserJoinedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserOffline',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserOfflineCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          onUserOfflineCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const UserOfflineReasonType reason =
            UserOfflineReasonType.userOfflineQuit;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'reason': reason.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserOffline',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserOffline',
            params: eventJson);
      }

      final eventCalled = await onUserOfflineCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserMuteAudio',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserMuteAudioCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserMuteAudio: (RtcConnection connection, int remoteUid, bool muted) {
          onUserMuteAudioCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const bool muted = true;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'muted': muted,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserMuteAudio',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserMuteAudio',
            params: eventJson);
      }

      final eventCalled = await onUserMuteAudioCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserMuteVideo',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserMuteVideoCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserMuteVideo: (RtcConnection connection, int remoteUid, bool muted) {
          onUserMuteVideoCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const bool muted = true;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'muted': muted,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserMuteVideo',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserMuteVideo',
            params: eventJson);
      }

      final eventCalled = await onUserMuteVideoCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserEnableVideo',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserEnableVideoCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserEnableVideo:
            (RtcConnection connection, int remoteUid, bool enabled) {
          onUserEnableVideoCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const bool enabled = true;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'enabled': enabled,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserEnableVideo',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserEnableVideo',
            params: eventJson);
      }

      final eventCalled = await onUserEnableVideoCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserStateChanged:
            (RtcConnection connection, int remoteUid, int state) {
          onUserStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int state = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'state': state,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserStateChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserStateChanged',
            params: eventJson);
      }

      final eventCalled = await onUserStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserEnableLocalVideo',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserEnableLocalVideoCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserEnableLocalVideo:
            (RtcConnection connection, int remoteUid, bool enabled) {
          onUserEnableLocalVideoCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const bool enabled = true;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'enabled': enabled,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserEnableLocalVideo',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserEnableLocalVideo',
            params: eventJson);
      }

      final eventCalled = await onUserEnableLocalVideoCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onApiCallExecuted',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onApiCallExecutedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onApiCallExecuted: (ErrorCodeType err, String api, String result) {
          onApiCallExecutedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const ErrorCodeType err = ErrorCodeType.errOk;
        const String api = "hello";
        const String result = "hello";

        final eventJson = {
          'err': err.value(),
          'api': api,
          'result': result,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onApiCallExecuted',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onApiCallExecuted',
            params: eventJson);
      }

      final eventCalled = await onApiCallExecutedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalAudioStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalAudioStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalAudioStats: (RtcConnection connection, LocalAudioStats stats) {
          onLocalAudioStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int statsNumChannels = 10;
        const int statsSentSampleRate = 10;
        const int statsSentBitrate = 10;
        const int statsInternalCodec = 10;
        const int statsTxPacketLossRate = 10;
        const int statsAudioDeviceDelay = 10;
        const LocalAudioStats stats = LocalAudioStats(
          numChannels: statsNumChannels,
          sentSampleRate: statsSentSampleRate,
          sentBitrate: statsSentBitrate,
          internalCodec: statsInternalCodec,
          txPacketLossRate: statsTxPacketLossRate,
          audioDeviceDelay: statsAudioDeviceDelay,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLocalAudioStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLocalAudioStats',
            params: eventJson);
      }

      final eventCalled = await onLocalAudioStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteAudioStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteAudioStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteAudioStats: (RtcConnection connection, RemoteAudioStats stats) {
          onRemoteAudioStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int statsUid = 10;
        const int statsQuality = 10;
        const int statsNetworkTransportDelay = 10;
        const int statsJitterBufferDelay = 10;
        const int statsAudioLossRate = 10;
        const int statsNumChannels = 10;
        const int statsReceivedSampleRate = 10;
        const int statsReceivedBitrate = 10;
        const int statsTotalFrozenTime = 10;
        const int statsFrozenRate = 10;
        const int statsMosValue = 10;
        const int statsTotalActiveTime = 10;
        const int statsPublishDuration = 10;
        const int statsQoeQuality = 10;
        const int statsQualityChangedReason = 10;
        const RemoteAudioStats stats = RemoteAudioStats(
          uid: statsUid,
          quality: statsQuality,
          networkTransportDelay: statsNetworkTransportDelay,
          jitterBufferDelay: statsJitterBufferDelay,
          audioLossRate: statsAudioLossRate,
          numChannels: statsNumChannels,
          receivedSampleRate: statsReceivedSampleRate,
          receivedBitrate: statsReceivedBitrate,
          totalFrozenTime: statsTotalFrozenTime,
          frozenRate: statsFrozenRate,
          mosValue: statsMosValue,
          totalActiveTime: statsTotalActiveTime,
          publishDuration: statsPublishDuration,
          qoeQuality: statsQoeQuality,
          qualityChangedReason: statsQualityChangedReason,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRemoteAudioStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRemoteAudioStats',
            params: eventJson);
      }

      final eventCalled = await onRemoteAudioStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalVideoStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalVideoStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalVideoStats: (RtcConnection connection, LocalVideoStats stats) {
          onLocalVideoStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const QualityAdaptIndication statsQualityAdaptIndication =
            QualityAdaptIndication.adaptNone;
        const VideoCodecType statsCodecType = VideoCodecType.videoCodecNone;
        const CaptureBrightnessLevelType statsCaptureBrightnessLevel =
            CaptureBrightnessLevelType.captureBrightnessLevelInvalid;
        const int statsUid = 10;
        const int statsSentBitrate = 10;
        const int statsSentFrameRate = 10;
        const int statsCaptureFrameRate = 10;
        const int statsCaptureFrameWidth = 10;
        const int statsCaptureFrameHeight = 10;
        const int statsRegulatedCaptureFrameRate = 10;
        const int statsRegulatedCaptureFrameWidth = 10;
        const int statsRegulatedCaptureFrameHeight = 10;
        const int statsEncoderOutputFrameRate = 10;
        const int statsEncodedFrameWidth = 10;
        const int statsEncodedFrameHeight = 10;
        const int statsRendererOutputFrameRate = 10;
        const int statsTargetBitrate = 10;
        const int statsTargetFrameRate = 10;
        const int statsEncodedBitrate = 10;
        const int statsEncodedFrameCount = 10;
        const int statsTxPacketLossRate = 10;
        const bool statsDualStreamEnabled = true;
        const int statsHwEncoderAccelerating = 10;
        const LocalVideoStats stats = LocalVideoStats(
          uid: statsUid,
          sentBitrate: statsSentBitrate,
          sentFrameRate: statsSentFrameRate,
          captureFrameRate: statsCaptureFrameRate,
          captureFrameWidth: statsCaptureFrameWidth,
          captureFrameHeight: statsCaptureFrameHeight,
          regulatedCaptureFrameRate: statsRegulatedCaptureFrameRate,
          regulatedCaptureFrameWidth: statsRegulatedCaptureFrameWidth,
          regulatedCaptureFrameHeight: statsRegulatedCaptureFrameHeight,
          encoderOutputFrameRate: statsEncoderOutputFrameRate,
          encodedFrameWidth: statsEncodedFrameWidth,
          encodedFrameHeight: statsEncodedFrameHeight,
          rendererOutputFrameRate: statsRendererOutputFrameRate,
          targetBitrate: statsTargetBitrate,
          targetFrameRate: statsTargetFrameRate,
          qualityAdaptIndication: statsQualityAdaptIndication,
          encodedBitrate: statsEncodedBitrate,
          encodedFrameCount: statsEncodedFrameCount,
          codecType: statsCodecType,
          txPacketLossRate: statsTxPacketLossRate,
          captureBrightnessLevel: statsCaptureBrightnessLevel,
          dualStreamEnabled: statsDualStreamEnabled,
          hwEncoderAccelerating: statsHwEncoderAccelerating,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLocalVideoStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLocalVideoStats',
            params: eventJson);
      }

      final eventCalled = await onLocalVideoStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteVideoStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteVideoStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteVideoStats: (RtcConnection connection, RemoteVideoStats stats) {
          onRemoteVideoStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const VideoStreamType statsRxStreamType =
            VideoStreamType.videoStreamHigh;
        const int statsUid = 10;
        const int statsDelay = 10;
        const int statsWidth = 10;
        const int statsHeight = 10;
        const int statsReceivedBitrate = 10;
        const int statsDecoderOutputFrameRate = 10;
        const int statsRendererOutputFrameRate = 10;
        const int statsFrameLossRate = 10;
        const int statsPacketLossRate = 10;
        const int statsTotalFrozenTime = 10;
        const int statsFrozenRate = 10;
        const int statsAvSyncTimeMs = 10;
        const int statsTotalActiveTime = 10;
        const int statsPublishDuration = 10;
        const int statsSuperResolutionType = 10;
        const int statsMosValue = 10;
        const RemoteVideoStats stats = RemoteVideoStats(
          uid: statsUid,
          delay: statsDelay,
          width: statsWidth,
          height: statsHeight,
          receivedBitrate: statsReceivedBitrate,
          decoderOutputFrameRate: statsDecoderOutputFrameRate,
          rendererOutputFrameRate: statsRendererOutputFrameRate,
          frameLossRate: statsFrameLossRate,
          packetLossRate: statsPacketLossRate,
          rxStreamType: statsRxStreamType,
          totalFrozenTime: statsTotalFrozenTime,
          frozenRate: statsFrozenRate,
          avSyncTimeMs: statsAvSyncTimeMs,
          totalActiveTime: statsTotalActiveTime,
          publishDuration: statsPublishDuration,
          superResolutionType: statsSuperResolutionType,
          mosValue: statsMosValue,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'stats': stats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRemoteVideoStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRemoteVideoStats',
            params: eventJson);
      }

      final eventCalled = await onRemoteVideoStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onCameraReady',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onCameraReadyCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onCameraReady: () {
          onCameraReadyCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        final eventJson = {};

        irisTester.fireEvent('RtcEngineEventHandler_onCameraReady',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onCameraReady',
            params: eventJson);
      }

      final eventCalled = await onCameraReadyCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onCameraFocusAreaChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onCameraFocusAreaChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onCameraFocusAreaChanged: (int x, int y, int width, int height) {
          onCameraFocusAreaChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int x = 10;
        const int y = 10;
        const int width = 10;
        const int height = 10;

        final eventJson = {
          'x': x,
          'y': y,
          'width': width,
          'height': height,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onCameraFocusAreaChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onCameraFocusAreaChanged',
            params: eventJson);
      }

      final eventCalled = await onCameraFocusAreaChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onCameraExposureAreaChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onCameraExposureAreaChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onCameraExposureAreaChanged: (int x, int y, int width, int height) {
          onCameraExposureAreaChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int x = 10;
        const int y = 10;
        const int width = 10;
        const int height = 10;

        final eventJson = {
          'x': x,
          'y': y,
          'width': width,
          'height': height,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onCameraExposureAreaChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onCameraExposureAreaChanged',
            params: eventJson);
      }

      final eventCalled = await onCameraExposureAreaChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFacePositionChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFacePositionChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFacePositionChanged: (int imageWidth, int imageHeight,
            Rectangle vecRectangle, int vecDistance, int numFaces) {
          onFacePositionChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int imageWidth = 10;
        const int imageHeight = 10;
        const int vecRectangleX = 10;
        const int vecRectangleY = 10;
        const int vecRectangleWidth = 10;
        const int vecRectangleHeight = 10;
        const Rectangle vecRectangle = Rectangle(
          x: vecRectangleX,
          y: vecRectangleY,
          width: vecRectangleWidth,
          height: vecRectangleHeight,
        );
        const int vecDistance = 10;
        const int numFaces = 10;

        final eventJson = {
          'imageWidth': imageWidth,
          'imageHeight': imageHeight,
          'vecRectangle': vecRectangle.toJson(),
          'vecDistance': vecDistance,
          'numFaces': numFaces,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFacePositionChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onFacePositionChanged',
            params: eventJson);
      }

      final eventCalled = await onFacePositionChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
    // TODO(littlegnal): Enable after the API signature fixed.
    skip: true,
  );

  testWidgets(
    'onVideoStopped',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onVideoStoppedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onVideoStopped: () {
          onVideoStoppedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        final eventJson = {};

        irisTester.fireEvent('RtcEngineEventHandler_onVideoStopped',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onVideoStopped',
            params: eventJson);
      }

      final eventCalled = await onVideoStoppedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioMixingStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioMixingStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioMixingStateChanged:
            (AudioMixingStateType state, AudioMixingReasonType reason) {
          onAudioMixingStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const AudioMixingStateType state =
            AudioMixingStateType.audioMixingStatePlaying;
        const AudioMixingReasonType reason =
            AudioMixingReasonType.audioMixingReasonCanNotOpen;

        final eventJson = {
          'state': state.value(),
          'reason': reason.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioMixingStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioMixingStateChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioMixingStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRhythmPlayerStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRhythmPlayerStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRhythmPlayerStateChanged:
            (RhythmPlayerStateType state, RhythmPlayerErrorType errorCode) {
          onRhythmPlayerStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const RhythmPlayerStateType state =
            RhythmPlayerStateType.rhythmPlayerStateIdle;
        const RhythmPlayerErrorType errorCode =
            RhythmPlayerErrorType.rhythmPlayerErrorOk;

        final eventJson = {
          'state': state.value(),
          'errorCode': errorCode.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRhythmPlayerStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRhythmPlayerStateChanged',
            params: eventJson);
      }

      final eventCalled = await onRhythmPlayerStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onConnectionLost',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onConnectionLostCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onConnectionLost: (RtcConnection connection) {
          onConnectionLostCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );

        final eventJson = {
          'connection': connection.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onConnectionLost',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onConnectionLost',
            params: eventJson);
      }

      final eventCalled = await onConnectionLostCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onConnectionInterrupted',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onConnectionInterruptedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onConnectionInterrupted: (RtcConnection connection) {
          onConnectionInterruptedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );

        final eventJson = {
          'connection': connection.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onConnectionInterrupted',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onConnectionInterrupted',
            params: eventJson);
      }

      final eventCalled = await onConnectionInterruptedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onConnectionBanned',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onConnectionBannedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onConnectionBanned: (RtcConnection connection) {
          onConnectionBannedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );

        final eventJson = {
          'connection': connection.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onConnectionBanned',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onConnectionBanned',
            params: eventJson);
      }

      final eventCalled = await onConnectionBannedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onStreamMessage',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onStreamMessageCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onStreamMessage: (RtcConnection connection, int remoteUid, int streamId,
            Uint8List data, int length, int sentTs) {
          onStreamMessageCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int streamId = 10;
        Uint8List data = Uint8List.fromList([1, 2, 3, 4, 5]);
        const int length = 10;
        const int sentTs = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'streamId': streamId,
          'data': data.toList(),
          'length': length,
          'sentTs': sentTs,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onStreamMessage',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onStreamMessage',
            params: eventJson);
      }

      final eventCalled = await onStreamMessageCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onStreamMessageError',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onStreamMessageErrorCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onStreamMessageError: (RtcConnection connection, int remoteUid,
            int streamId, ErrorCodeType code, int missed, int cached) {
          onStreamMessageErrorCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int streamId = 10;
        const ErrorCodeType code = ErrorCodeType.errOk;
        const int missed = 10;
        const int cached = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'streamId': streamId,
          'code': code.value(),
          'missed': missed,
          'cached': cached,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onStreamMessageError',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onStreamMessageError',
            params: eventJson);
      }

      final eventCalled = await onStreamMessageErrorCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRequestToken',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRequestTokenCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRequestToken: (RtcConnection connection) {
          onRequestTokenCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );

        final eventJson = {
          'connection': connection.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRequestToken',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRequestToken',
            params: eventJson);
      }

      final eventCalled = await onRequestTokenCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onTokenPrivilegeWillExpire',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onTokenPrivilegeWillExpireCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onTokenPrivilegeWillExpire: (RtcConnection connection, String token) {
          onTokenPrivilegeWillExpireCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const String token = "hello";

        final eventJson = {
          'connection': connection.toJson(),
          'token': token,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onTokenPrivilegeWillExpire',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onTokenPrivilegeWillExpire',
            params: eventJson);
      }

      final eventCalled = await onTokenPrivilegeWillExpireCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLicenseValidationFailure',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLicenseValidationFailureCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLicenseValidationFailure:
            (RtcConnection connection, LicenseErrorType reason) {
          onLicenseValidationFailureCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const LicenseErrorType reason = LicenseErrorType.licenseErrInvalid;

        final eventJson = {
          'connection': connection.toJson(),
          'reason': reason.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLicenseValidationFailure',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onLicenseValidationFailure',
            params: eventJson);
      }

      final eventCalled = await onLicenseValidationFailureCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstLocalAudioFramePublished',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstLocalAudioFramePublishedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstLocalAudioFramePublished:
            (RtcConnection connection, int elapsed) {
          onFirstLocalAudioFramePublishedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onFirstLocalAudioFramePublished',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onFirstLocalAudioFramePublished',
            params: eventJson);
      }

      final eventCalled = await onFirstLocalAudioFramePublishedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onFirstRemoteAudioFrame',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstRemoteAudioFrameCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstRemoteAudioFrame:
            (RtcConnection connection, int userId, int elapsed) {
          onFirstRemoteAudioFrameCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int userId = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'userId': userId,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFirstRemoteAudioFrame',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onFirstRemoteAudioFrame',
            params: eventJson);
      }

      final eventCalled = await onFirstRemoteAudioFrameCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
    // TODO(littlegnal): Enable after iris fixed.
    skip: true,
  );

  testWidgets(
    'onFirstRemoteAudioDecoded',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onFirstRemoteAudioDecodedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onFirstRemoteAudioDecoded:
            (RtcConnection connection, int uid, int elapsed) {
          onFirstRemoteAudioDecodedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int uid = 10;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'uid': uid,
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onFirstRemoteAudioDecoded',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onFirstRemoteAudioDecoded',
            params: eventJson);
      }

      final eventCalled = await onFirstRemoteAudioDecodedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalAudioStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalAudioStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalAudioStateChanged: (RtcConnection connection,
            LocalAudioStreamState state, LocalAudioStreamError error) {
          onLocalAudioStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const LocalAudioStreamState state =
            LocalAudioStreamState.localAudioStreamStateStopped;
        const LocalAudioStreamError error =
            LocalAudioStreamError.localAudioStreamErrorOk;

        final eventJson = {
          'connection': connection.toJson(),
          'state': state.value(),
          'error': error.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLocalAudioStateChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLocalAudioStateChanged',
            params: eventJson);
      }

      final eventCalled = await onLocalAudioStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteAudioStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteAudioStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteAudioStateChanged: (RtcConnection connection,
            int remoteUid,
            RemoteAudioState state,
            RemoteAudioStateReason reason,
            int elapsed) {
          onRemoteAudioStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const RemoteAudioState state = RemoteAudioState.remoteAudioStateStopped;
        const RemoteAudioStateReason reason =
            RemoteAudioStateReason.remoteAudioReasonInternal;
        const int elapsed = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'state': state.value(),
          'reason': reason.value(),
          'elapsed': elapsed,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRemoteAudioStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRemoteAudioStateChanged',
            params: eventJson);
      }

      final eventCalled = await onRemoteAudioStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onActiveSpeaker',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onActiveSpeakerCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onActiveSpeaker: (RtcConnection connection, int uid) {
          onActiveSpeakerCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int uid = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'uid': uid,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onActiveSpeaker',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onActiveSpeaker',
            params: eventJson);
      }

      final eventCalled = await onActiveSpeakerCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onContentInspectResult',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onContentInspectResultCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onContentInspectResult: (ContentInspectResult result) {
          onContentInspectResultCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const ContentInspectResult result =
            ContentInspectResult.contentInspectNeutral;

        final eventJson = {
          'result': result.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onContentInspectResult',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onContentInspectResult',
            params: eventJson);
      }

      final eventCalled = await onContentInspectResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onSnapshotTaken',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onSnapshotTakenCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onSnapshotTaken: (RtcConnection connection, int uid, String filePath,
            int width, int height, int errCode) {
          onSnapshotTakenCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int uid = 10;
        const String filePath = "hello";
        const int width = 10;
        const int height = 10;
        const int errCode = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'uid': uid,
          'filePath': filePath,
          'width': width,
          'height': height,
          'errCode': errCode,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onSnapshotTaken',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onSnapshotTaken',
            params: eventJson);
      }

      final eventCalled = await onSnapshotTakenCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onClientRoleChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onClientRoleChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onClientRoleChanged: (RtcConnection connection, ClientRoleType oldRole,
            ClientRoleType newRole, ClientRoleOptions newRoleOptions) {
          onClientRoleChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const ClientRoleType oldRole = ClientRoleType.clientRoleBroadcaster;
        const ClientRoleType newRole = ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType newRoleOptionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const ClientRoleOptions newRoleOptions = ClientRoleOptions(
          audienceLatencyLevel: newRoleOptionsAudienceLatencyLevel,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'oldRole': oldRole.value(),
          'newRole': newRole.value(),
          'newRoleOptions': newRoleOptions.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onClientRoleChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onClientRoleChanged',
            params: eventJson);
      }

      final eventCalled = await onClientRoleChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onClientRoleChangeFailed',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onClientRoleChangeFailedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onClientRoleChangeFailed: (RtcConnection connection,
            ClientRoleChangeFailedReason reason, ClientRoleType currentRole) {
          onClientRoleChangeFailedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const ClientRoleChangeFailedReason reason = ClientRoleChangeFailedReason
            .clientRoleChangeFailedTooManyBroadcasters;
        const ClientRoleType currentRole = ClientRoleType.clientRoleBroadcaster;

        final eventJson = {
          'connection': connection.toJson(),
          'reason': reason.value(),
          'currentRole': currentRole.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onClientRoleChangeFailed',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onClientRoleChangeFailed',
            params: eventJson);
      }

      final eventCalled = await onClientRoleChangeFailedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioDeviceVolumeChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioDeviceVolumeChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioDeviceVolumeChanged:
            (MediaDeviceType deviceType, int volume, bool muted) {
          onAudioDeviceVolumeChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const MediaDeviceType deviceType = MediaDeviceType.unknownAudioDevice;
        const int volume = 10;
        const bool muted = true;

        final eventJson = {
          'deviceType': deviceType.value(),
          'volume': volume,
          'muted': muted,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioDeviceVolumeChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioDeviceVolumeChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioDeviceVolumeChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRtmpStreamingStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRtmpStreamingStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRtmpStreamingStateChanged: (String url, RtmpStreamPublishState state,
            RtmpStreamPublishErrorType errCode) {
          onRtmpStreamingStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String url = "hello";
        const RtmpStreamPublishState state =
            RtmpStreamPublishState.rtmpStreamPublishStateIdle;
        const RtmpStreamPublishErrorType errCode =
            RtmpStreamPublishErrorType.rtmpStreamPublishErrorOk;

        final eventJson = {
          'url': url,
          'state': state.value(),
          'errCode': errCode.value(),
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onRtmpStreamingStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRtmpStreamingStateChanged',
            params: eventJson);
      }

      final eventCalled = await onRtmpStreamingStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRtmpStreamingEvent',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRtmpStreamingEventCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRtmpStreamingEvent: (String url, RtmpStreamingEvent eventCode) {
          onRtmpStreamingEventCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String url = "hello";
        const RtmpStreamingEvent eventCode =
            RtmpStreamingEvent.rtmpStreamingEventFailedLoadImage;

        final eventJson = {
          'url': url,
          'eventCode': eventCode.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onRtmpStreamingEvent',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onRtmpStreamingEvent',
            params: eventJson);
      }

      final eventCalled = await onRtmpStreamingEventCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onTranscodingUpdated',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onTranscodingUpdatedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onTranscodingUpdated: () {
          onTranscodingUpdatedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        final eventJson = {};

        irisTester.fireEvent('RtcEngineEventHandler_onTranscodingUpdated',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onTranscodingUpdated',
            params: eventJson);
      }

      final eventCalled = await onTranscodingUpdatedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioRoutingChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioRoutingChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioRoutingChanged: (int routing) {
          onAudioRoutingChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int routing = 10;

        final eventJson = {
          'routing': routing,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioRoutingChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onAudioRoutingChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioRoutingChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onChannelMediaRelayStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onChannelMediaRelayStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onChannelMediaRelayStateChanged:
            (ChannelMediaRelayState state, ChannelMediaRelayError code) {
          onChannelMediaRelayStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const ChannelMediaRelayState state =
            ChannelMediaRelayState.relayStateIdle;
        const ChannelMediaRelayError code = ChannelMediaRelayError.relayOk;

        final eventJson = {
          'state': state.value(),
          'code': code.value(),
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onChannelMediaRelayStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onChannelMediaRelayStateChanged',
            params: eventJson);
      }

      final eventCalled = await onChannelMediaRelayStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onChannelMediaRelayEvent',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onChannelMediaRelayEventCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onChannelMediaRelayEvent: (ChannelMediaRelayEvent code) {
          onChannelMediaRelayEventCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const ChannelMediaRelayEvent code =
            ChannelMediaRelayEvent.relayEventNetworkDisconnected;

        final eventJson = {
          'code': code.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onChannelMediaRelayEvent',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onChannelMediaRelayEvent',
            params: eventJson);
      }

      final eventCalled = await onChannelMediaRelayEventCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalPublishFallbackToAudioOnly',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalPublishFallbackToAudioOnlyCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalPublishFallbackToAudioOnly: (bool isFallbackOrRecover) {
          onLocalPublishFallbackToAudioOnlyCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const bool isFallbackOrRecover = true;

        final eventJson = {
          'isFallbackOrRecover': isFallbackOrRecover,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onLocalPublishFallbackToAudioOnly',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onLocalPublishFallbackToAudioOnly',
            params: eventJson);
      }

      final eventCalled =
          await onLocalPublishFallbackToAudioOnlyCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteSubscribeFallbackToAudioOnly',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteSubscribeFallbackToAudioOnlyCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteSubscribeFallbackToAudioOnly:
            (int uid, bool isFallbackOrRecover) {
          onRemoteSubscribeFallbackToAudioOnlyCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int uid = 10;
        const bool isFallbackOrRecover = true;

        final eventJson = {
          'uid': uid,
          'isFallbackOrRecover': isFallbackOrRecover,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onRemoteSubscribeFallbackToAudioOnly',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRemoteSubscribeFallbackToAudioOnly',
            params: eventJson);
      }

      final eventCalled =
          await onRemoteSubscribeFallbackToAudioOnlyCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteAudioTransportStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteAudioTransportStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteAudioTransportStats: (RtcConnection connection, int remoteUid,
            int delay, int lost, int rxKBitRate) {
          onRemoteAudioTransportStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int delay = 10;
        const int lost = 10;
        const int rxKBitRate = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'delay': delay,
          'lost': lost,
          'rxKBitRate': rxKBitRate,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onRemoteAudioTransportStats',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRemoteAudioTransportStats',
            params: eventJson);
      }

      final eventCalled = await onRemoteAudioTransportStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onRemoteVideoTransportStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onRemoteVideoTransportStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onRemoteVideoTransportStats: (RtcConnection connection, int remoteUid,
            int delay, int lost, int rxKBitRate) {
          onRemoteVideoTransportStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const int delay = 10;
        const int lost = 10;
        const int rxKBitRate = 10;

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'delay': delay,
          'lost': lost,
          'rxKBitRate': rxKBitRate,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onRemoteVideoTransportStats',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onRemoteVideoTransportStats',
            params: eventJson);
      }

      final eventCalled = await onRemoteVideoTransportStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onConnectionStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onConnectionStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onConnectionStateChanged: (RtcConnection connection,
            ConnectionStateType state, ConnectionChangedReasonType reason) {
          onConnectionStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const ConnectionStateType state =
            ConnectionStateType.connectionStateDisconnected;
        const ConnectionChangedReasonType reason =
            ConnectionChangedReasonType.connectionChangedConnecting;

        final eventJson = {
          'connection': connection.toJson(),
          'state': state.value(),
          'reason': reason.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onConnectionStateChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onConnectionStateChanged',
            params: eventJson);
      }

      final eventCalled = await onConnectionStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onWlAccMessage',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onWlAccMessageCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onWlAccMessage: (RtcConnection connection, WlaccMessageReason reason,
            WlaccSuggestAction action, String wlAccMsg) {
          onWlAccMessageCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const WlaccMessageReason reason =
            WlaccMessageReason.wlaccMessageReasonWeakSignal;
        const WlaccSuggestAction action =
            WlaccSuggestAction.wlaccSuggestActionCloseToWifi;
        const String wlAccMsg = "hello";

        final eventJson = {
          'connection': connection.toJson(),
          'reason': reason.value(),
          'action': action.value(),
          'wlAccMsg': wlAccMsg,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onWlAccMessage',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onWlAccMessage',
            params: eventJson);
      }

      final eventCalled = await onWlAccMessageCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onWlAccStats',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onWlAccStatsCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onWlAccStats: (RtcConnection connection, WlAccStats currentStats,
            WlAccStats averageStats) {
          onWlAccStatsCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int currentStatsE2eDelayPercent = 10;
        const int currentStatsFrozenRatioPercent = 10;
        const int currentStatsLossRatePercent = 10;
        const WlAccStats currentStats = WlAccStats(
          e2eDelayPercent: currentStatsE2eDelayPercent,
          frozenRatioPercent: currentStatsFrozenRatioPercent,
          lossRatePercent: currentStatsLossRatePercent,
        );
        const int averageStatsE2eDelayPercent = 10;
        const int averageStatsFrozenRatioPercent = 10;
        const int averageStatsLossRatePercent = 10;
        const WlAccStats averageStats = WlAccStats(
          e2eDelayPercent: averageStatsE2eDelayPercent,
          frozenRatioPercent: averageStatsFrozenRatioPercent,
          lossRatePercent: averageStatsLossRatePercent,
        );

        final eventJson = {
          'connection': connection.toJson(),
          'currentStats': currentStats.toJson(),
          'averageStats': averageStats.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onWlAccStats',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onWlAccStats',
            params: eventJson);
      }

      final eventCalled = await onWlAccStatsCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onNetworkTypeChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onNetworkTypeChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onNetworkTypeChanged: (RtcConnection connection, NetworkType type) {
          onNetworkTypeChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const NetworkType type = NetworkType.networkTypeUnknown;

        final eventJson = {
          'connection': connection.toJson(),
          'type': type.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onNetworkTypeChanged',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onNetworkTypeChanged',
            params: eventJson);
      }

      final eventCalled = await onNetworkTypeChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onEncryptionError',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onEncryptionErrorCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onEncryptionError:
            (RtcConnection connection, EncryptionErrorType errorType) {
          onEncryptionErrorCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const EncryptionErrorType errorType =
            EncryptionErrorType.encryptionErrorInternalFailure;

        final eventJson = {
          'connection': connection.toJson(),
          'errorType': errorType.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onEncryptionError',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onEncryptionError',
            params: eventJson);
      }

      final eventCalled = await onEncryptionErrorCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onPermissionError',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onPermissionErrorCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onPermissionError: (PermissionType permissionType) {
          onPermissionErrorCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const PermissionType permissionType = PermissionType.recordAudio;

        final eventJson = {
          'permissionType': permissionType.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onPermissionError',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onPermissionError',
            params: eventJson);
      }

      final eventCalled = await onPermissionErrorCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onLocalUserRegistered',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onLocalUserRegisteredCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onLocalUserRegistered: (int uid, String userAccount) {
          onLocalUserRegisteredCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int uid = 10;
        const String userAccount = "hello";

        final eventJson = {
          'uid': uid,
          'userAccount': userAccount,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onLocalUserRegistered',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onLocalUserRegistered',
            params: eventJson);
      }

      final eventCalled = await onLocalUserRegisteredCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserInfoUpdated',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserInfoUpdatedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserInfoUpdated: (int uid, UserInfo info) {
          onUserInfoUpdatedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const int uid = 10;
        const int infoUid = 10;
        const String infoUserAccount = "hello";
        const UserInfo info = UserInfo(
          uid: infoUid,
          userAccount: infoUserAccount,
        );

        final eventJson = {
          'uid': uid,
          'info': info.toJson(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserInfoUpdated',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserInfoUpdated',
            params: eventJson);
      }

      final eventCalled = await onUserInfoUpdatedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUploadLogResult',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUploadLogResultCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUploadLogResult: (RtcConnection connection, String requestId,
            bool success, UploadErrorReason reason) {
          onUploadLogResultCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const String requestId = "hello";
        const bool success = true;
        const UploadErrorReason reason = UploadErrorReason.uploadSuccess;

        final eventJson = {
          'connection': connection.toJson(),
          'requestId': requestId,
          'success': success,
          'reason': reason.value(),
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUploadLogResult',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUploadLogResult',
            params: eventJson);
      }

      final eventCalled = await onUploadLogResultCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioSubscribeStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioSubscribeStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioSubscribeStateChanged: (String channel,
            int uid,
            StreamSubscribeState oldState,
            StreamSubscribeState newState,
            int elapseSinceLastState) {
          onAudioSubscribeStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String channel = "hello";
        const int uid = 10;
        const StreamSubscribeState oldState = StreamSubscribeState.subStateIdle;
        const StreamSubscribeState newState = StreamSubscribeState.subStateIdle;
        const int elapseSinceLastState = 10;

        final eventJson = {
          'channel': channel,
          'uid': uid,
          'oldState': oldState.value(),
          'newState': newState.value(),
          'elapseSinceLastState': elapseSinceLastState,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onAudioSubscribeStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioSubscribeStateChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioSubscribeStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onVideoSubscribeStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onVideoSubscribeStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onVideoSubscribeStateChanged: (String channel,
            int uid,
            StreamSubscribeState oldState,
            StreamSubscribeState newState,
            int elapseSinceLastState) {
          onVideoSubscribeStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String channel = "hello";
        const int uid = 10;
        const StreamSubscribeState oldState = StreamSubscribeState.subStateIdle;
        const StreamSubscribeState newState = StreamSubscribeState.subStateIdle;
        const int elapseSinceLastState = 10;

        final eventJson = {
          'channel': channel,
          'uid': uid,
          'oldState': oldState.value(),
          'newState': newState.value(),
          'elapseSinceLastState': elapseSinceLastState,
        };

        irisTester.fireEvent(
            'RtcEngineEventHandler_onVideoSubscribeStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onVideoSubscribeStateChanged',
            params: eventJson);
      }

      final eventCalled = await onVideoSubscribeStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onAudioPublishStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onAudioPublishStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onAudioPublishStateChanged: (String channel,
            StreamPublishState oldState,
            StreamPublishState newState,
            int elapseSinceLastState) {
          onAudioPublishStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String channel = "hello";
        const StreamPublishState oldState = StreamPublishState.pubStateIdle;
        const StreamPublishState newState = StreamPublishState.pubStateIdle;
        const int elapseSinceLastState = 10;

        final eventJson = {
          'channel': channel,
          'oldState': oldState.value(),
          'newState': newState.value(),
          'elapseSinceLastState': elapseSinceLastState,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onAudioPublishStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onAudioPublishStateChanged',
            params: eventJson);
      }

      final eventCalled = await onAudioPublishStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onVideoPublishStateChanged',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onVideoPublishStateChangedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onVideoPublishStateChanged: (VideoSourceType source,
            String channel,
            StreamPublishState oldState,
            StreamPublishState newState,
            int elapseSinceLastState) {
          onVideoPublishStateChangedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const VideoSourceType source = VideoSourceType.videoSourceCameraPrimary;
        const String channel = "hello";
        const StreamPublishState oldState = StreamPublishState.pubStateIdle;
        const StreamPublishState newState = StreamPublishState.pubStateIdle;
        const int elapseSinceLastState = 10;

        final eventJson = {
          'source': source.value(),
          'channel': channel,
          'oldState': oldState.value(),
          'newState': newState.value(),
          'elapseSinceLastState': elapseSinceLastState,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onVideoPublishStateChanged',
            params: eventJson);
        irisTester.fireEvent(
            'RtcEngineEventHandlerEx_onVideoPublishStateChanged',
            params: eventJson);
      }

      final eventCalled = await onVideoPublishStateChangedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onExtensionEvent',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onExtensionEventCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onExtensionEvent:
            (String provider, String extension, String key, String value) {
          onExtensionEventCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String provider = "hello";
        const String extension = "hello";
        const String key = "hello";
        const String value = "hello";

        final eventJson = {
          'provider': provider,
          'extension': extension,
          'key': key,
          'value': value,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onExtensionEvent',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onExtensionEvent',
            params: eventJson);
      }

      final eventCalled = await onExtensionEventCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onExtensionStarted',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onExtensionStartedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onExtensionStarted: (String provider, String extension) {
          onExtensionStartedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String provider = "hello";
        const String extension = "hello";

        final eventJson = {
          'provider': provider,
          'extension': extension,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onExtensionStarted',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onExtensionStarted',
            params: eventJson);
      }

      final eventCalled = await onExtensionStartedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onExtensionStopped',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onExtensionStoppedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onExtensionStopped: (String provider, String extension) {
          onExtensionStoppedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String provider = "hello";
        const String extension = "hello";

        final eventJson = {
          'provider': provider,
          'extension': extension,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onExtensionStopped',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onExtensionStopped',
            params: eventJson);
      }

      final eventCalled = await onExtensionStoppedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onExtensionError',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onExtensionErrorCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onExtensionError:
            (String provider, String extension, int error, String message) {
          onExtensionErrorCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String provider = "hello";
        const String extension = "hello";
        const int error = 10;
        const String message = "hello";

        final eventJson = {
          'provider': provider,
          'extension': extension,
          'error': error,
          'message': message,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onExtensionError',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onExtensionError',
            params: eventJson);
      }

      final eventCalled = await onExtensionErrorCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );

  testWidgets(
    'onUserAccountUpdated',
    (WidgetTester tester) async {
      final irisTester = IrisTester();
      final debugApiEngineIntPtr = irisTester.getDebugApiEngineNativeHandle();
      setMockIrisMethodChannelNativeHandle(debugApiEngineIntPtr);

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: 'app_id',
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final onUserAccountUpdatedCompleter = Completer<bool>();
      final theRtcEngineEventHandler = RtcEngineEventHandler(
        onUserAccountUpdated:
            (RtcConnection connection, int remoteUid, String userAccount) {
          onUserAccountUpdatedCompleter.complete(true);
        },
      );

      rtcEngine.registerEventHandler(
        theRtcEngineEventHandler,
      );

// Delay 500 milliseconds to ensure the registerEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        const int remoteUid = 10;
        const String userAccount = "hello";

        final eventJson = {
          'connection': connection.toJson(),
          'remoteUid': remoteUid,
          'userAccount': userAccount,
        };

        irisTester.fireEvent('RtcEngineEventHandler_onUserAccountUpdated',
            params: eventJson);
        irisTester.fireEvent('RtcEngineEventHandlerEx_onUserAccountUpdated',
            params: eventJson);
      }

      final eventCalled = await onUserAccountUpdatedCompleter.future;
      expect(eventCalled, isTrue);

      {
        rtcEngine.unregisterEventHandler(
          theRtcEngineEventHandler,
        );
      }
// Delay 500 milliseconds to ensure the unregisterEventHandler call completed.
      await Future.delayed(const Duration(milliseconds: 500));

      await rtcEngine.release();
    },
    timeout: const Timeout(Duration(minutes: 1)),
  );
}
