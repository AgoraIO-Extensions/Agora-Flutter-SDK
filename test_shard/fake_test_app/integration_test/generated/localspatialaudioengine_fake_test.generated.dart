/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/foundation.dart';
import 'package:fake_test_app/main.dart' as app;
import 'package:iris_tester/iris_tester.dart';
import 'package:iris_method_channel/iris_method_channel.dart';

void localSpatialAudioEngineSmokeTestCases() {
  testWidgets(
    'LocalSpatialAudioEngine.initialize',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        await localSpatialAudioEngine.initialize();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.initialize] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.updateRemotePosition',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const int uid = 10;
        const List<double> posInfoPosition = [];
        const List<double> posInfoForward = [];
        const RemoteVoicePositionInfo posInfo = RemoteVoicePositionInfo(
          position: posInfoPosition,
          forward: posInfoForward,
        );
        await localSpatialAudioEngine.updateRemotePosition(
          uid: uid,
          posInfo: posInfo,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.updateRemotePosition] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.updateRemotePositionEx',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const int uid = 10;
        const List<double> posInfoPosition = [];
        const List<double> posInfoForward = [];
        const RemoteVoicePositionInfo posInfo = RemoteVoicePositionInfo(
          position: posInfoPosition,
          forward: posInfoForward,
        );
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        await localSpatialAudioEngine.updateRemotePositionEx(
          uid: uid,
          posInfo: posInfo,
          connection: connection,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.updateRemotePositionEx] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.removeRemotePosition',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const int uid = 10;
        await localSpatialAudioEngine.removeRemotePosition(
          uid,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.removeRemotePosition] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.removeRemotePositionEx',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const int uid = 10;
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        await localSpatialAudioEngine.removeRemotePositionEx(
          uid: uid,
          connection: connection,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.removeRemotePositionEx] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.clearRemotePositions',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        await localSpatialAudioEngine.clearRemotePositions();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.clearRemotePositions] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.clearRemotePositionsEx',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const String connectionChannelId = "hello";
        const int connectionLocalUid = 10;
        const RtcConnection connection = RtcConnection(
          channelId: connectionChannelId,
          localUid: connectionLocalUid,
        );
        await localSpatialAudioEngine.clearRemotePositionsEx(
          connection,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.clearRemotePositionsEx] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'LocalSpatialAudioEngine.setRemoteAudioAttenuation',
    (WidgetTester tester) async {
      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));
      await rtcEngine.setParameters('{"rtc.enable_debug_log": true}');

      final localSpatialAudioEngine = rtcEngine.getLocalSpatialAudioEngine();
      await localSpatialAudioEngine.initialize();

      try {
        const int uid = 10;
        const double attenuation = 10.0;
        const bool forceSet = true;
        await localSpatialAudioEngine.setRemoteAudioAttenuation(
          uid: uid,
          attenuation: attenuation,
          forceSet: forceSet,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[LocalSpatialAudioEngine.setRemoteAudioAttenuation] error: ${e.toString()}');
          rethrow;
        }

        if (e.code != -4) {
          // Only not supported error supported.
          rethrow;
        }
      }

      await localSpatialAudioEngine.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );
}

