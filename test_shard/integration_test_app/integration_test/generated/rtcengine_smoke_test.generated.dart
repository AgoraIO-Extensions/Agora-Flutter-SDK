/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:integration_test_app/main.dart' as app;

void rtcEngineSmokeTestCases() {
  testWidgets(
    'initialize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const ChannelProfileType contextChannelProfile =
            ChannelProfileType.channelProfileCommunication;
        const AudioScenarioType contextAudioScenario =
            AudioScenarioType.audioScenarioDefault;
        const LogLevel logConfigLevel = LogLevel.logLevelNone;
        const String logConfigFilePath = "hello";
        const int logConfigFileSizeInKB = 10;
        const LogConfig contextLogConfig = LogConfig(
          filePath: logConfigFilePath,
          fileSizeInKB: logConfigFileSizeInKB,
          level: logConfigLevel,
        );
        const ThreadPriorityType contextThreadPriority =
            ThreadPriorityType.lowest;
        const String contextAppId = "hello";
        const int contextAreaCode = 10;
        const bool contextUseExternalEglContext = true;
        const RtcEngineContext context = RtcEngineContext(
          appId: contextAppId,
          channelProfile: contextChannelProfile,
          audioScenario: contextAudioScenario,
          areaCode: contextAreaCode,
          logConfig: contextLogConfig,
          threadPriority: contextThreadPriority,
          useExternalEglContext: contextUseExternalEglContext,
        );
        await rtcEngine.initialize(
          context,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[initialize] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[initialize] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVersion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getVersion();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getVersion] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getVersion] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getErrorDescription',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int code = 10;
        await rtcEngine.getErrorDescription(
          code,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getErrorDescription] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getErrorDescription] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateChannelMediaOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const ClientRoleType optionsClientRoleType =
            ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType optionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const VideoStreamType optionsDefaultVideoStreamType =
            VideoStreamType.videoStreamHigh;
        const ChannelProfileType optionsChannelProfile =
            ChannelProfileType.channelProfileCommunication;
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishSecondaryCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishScreenCaptureVideo = true;
        const bool optionsPublishScreenCaptureAudio = true;
        const bool optionsPublishScreenTrack = true;
        const bool optionsPublishSecondaryScreenTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const int optionsPublishCustomAudioSourceId = 10;
        const bool optionsPublishCustomAudioTrackEnableAec = true;
        const bool optionsPublishDirectCustomAudioTrack = true;
        const bool optionsPublishCustomAudioTrackAec = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishEncodedVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const bool optionsPublishMediaPlayerVideoTrack = true;
        const bool optionsPublishTrancodedVideoTrack = true;
        const bool optionsAutoSubscribeAudio = true;
        const bool optionsAutoSubscribeVideo = true;
        const bool optionsEnableAudioRecordingOrPlayout = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsAudioDelayMs = 10;
        const int optionsMediaPlayerAudioDelayMs = 10;
        const String optionsToken = "hello";
        const bool optionsEnableBuiltInMediaEncryption = true;
        const bool optionsPublishRhythmPlayerTrack = true;
        const bool optionsIsInteractiveAudience = true;
        const int optionsCustomVideoTrackId = 10;
        const bool optionsIsAudioFilterable = true;
        const ChannelMediaOptions options = ChannelMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishScreenCaptureVideo: optionsPublishScreenCaptureVideo,
          publishScreenCaptureAudio: optionsPublishScreenCaptureAudio,
          publishScreenTrack: optionsPublishScreenTrack,
          publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
          publishCustomAudioTrackEnableAec:
              optionsPublishCustomAudioTrackEnableAec,
          publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
          publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
          publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
          autoSubscribeAudio: optionsAutoSubscribeAudio,
          autoSubscribeVideo: optionsAutoSubscribeVideo,
          enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          clientRoleType: optionsClientRoleType,
          audienceLatencyLevel: optionsAudienceLatencyLevel,
          defaultVideoStreamType: optionsDefaultVideoStreamType,
          channelProfile: optionsChannelProfile,
          audioDelayMs: optionsAudioDelayMs,
          mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
          token: optionsToken,
          enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
          publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
          isInteractiveAudience: optionsIsInteractiveAudience,
          customVideoTrackId: optionsCustomVideoTrackId,
          isAudioFilterable: optionsIsAudioFilterable,
        );
        await rtcEngine.updateChannelMediaOptions(
          options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateChannelMediaOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateChannelMediaOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'renewToken',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String token = "hello";
        await rtcEngine.renewToken(
          token,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[renewToken] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[renewToken] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setChannelProfile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const ChannelProfileType profile =
            ChannelProfileType.channelProfileCommunication;
        await rtcEngine.setChannelProfile(
          profile,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setChannelProfile] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setChannelProfile] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopEchoTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopEchoTest();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopEchoTest] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopEchoTest] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.enableVideo();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableVideo] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[enableVideo] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.disableVideo();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[disableVideo] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[disableVideo] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startLastmileProbeTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool configProbeUplink = true;
        const bool configProbeDownlink = true;
        const int configExpectedUplinkBitrate = 10;
        const int configExpectedDownlinkBitrate = 10;
        const LastmileProbeConfig config = LastmileProbeConfig(
          probeUplink: configProbeUplink,
          probeDownlink: configProbeDownlink,
          expectedUplinkBitrate: configExpectedUplinkBitrate,
          expectedDownlinkBitrate: configExpectedDownlinkBitrate,
        );
        await rtcEngine.startLastmileProbeTest(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startLastmileProbeTest] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startLastmileProbeTest] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopLastmileProbeTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopLastmileProbeTest();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopLastmileProbeTest] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopLastmileProbeTest] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVideoEncoderConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoCodecType configCodecType = VideoCodecType.videoCodecNone;
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions configDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const OrientationMode configOrientationMode =
            OrientationMode.orientationModeAdaptive;
        const DegradationPreference configDegradationPreference =
            DegradationPreference.maintainQuality;
        const VideoMirrorModeType configMirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        const int configFrameRate = 10;
        const int configBitrate = 10;
        const int configMinBitrate = 10;
        const VideoEncoderConfiguration config = VideoEncoderConfiguration(
          codecType: configCodecType,
          dimensions: configDimensions,
          frameRate: configFrameRate,
          bitrate: configBitrate,
          minBitrate: configMinBitrate,
          orientationMode: configOrientationMode,
          degradationPreference: configDegradationPreference,
          mirrorMode: configMirrorMode,
        );
        await rtcEngine.setVideoEncoderConfiguration(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVideoEncoderConfiguration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVideoEncoderConfiguration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setBeautyEffectOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const LighteningContrastLevel optionsLighteningContrastLevel =
            LighteningContrastLevel.lighteningContrastLow;
        const double optionsLighteningLevel = 10.0;
        const double optionsSmoothnessLevel = 10.0;
        const double optionsRednessLevel = 10.0;
        const double optionsSharpnessLevel = 10.0;
        const BeautyOptions options = BeautyOptions(
          lighteningContrastLevel: optionsLighteningContrastLevel,
          lighteningLevel: optionsLighteningLevel,
          smoothnessLevel: optionsSmoothnessLevel,
          rednessLevel: optionsRednessLevel,
          sharpnessLevel: optionsSharpnessLevel,
        );
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.setBeautyEffectOptions(
          enabled: enabled,
          options: options,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setBeautyEffectOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setBeautyEffectOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLowlightEnhanceOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const LowLightEnhanceMode optionsMode =
            LowLightEnhanceMode.lowLightEnhanceAuto;
        const LowLightEnhanceLevel optionsLevel =
            LowLightEnhanceLevel.lowLightEnhanceLevelHighQuality;
        const LowlightEnhanceOptions options = LowlightEnhanceOptions(
          mode: optionsMode,
          level: optionsLevel,
        );
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.setLowlightEnhanceOptions(
          enabled: enabled,
          options: options,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLowlightEnhanceOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLowlightEnhanceOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVideoDenoiserOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const VideoDenoiserMode optionsMode =
            VideoDenoiserMode.videoDenoiserAuto;
        const VideoDenoiserLevel optionsLevel =
            VideoDenoiserLevel.videoDenoiserLevelHighQuality;
        const VideoDenoiserOptions options = VideoDenoiserOptions(
          mode: optionsMode,
          level: optionsLevel,
        );
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.setVideoDenoiserOptions(
          enabled: enabled,
          options: options,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVideoDenoiserOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVideoDenoiserOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setColorEnhanceOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const double optionsStrengthLevel = 10.0;
        const double optionsSkinProtectLevel = 10.0;
        const ColorEnhanceOptions options = ColorEnhanceOptions(
          strengthLevel: optionsStrengthLevel,
          skinProtectLevel: optionsSkinProtectLevel,
        );
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.setColorEnhanceOptions(
          enabled: enabled,
          options: options,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setColorEnhanceOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setColorEnhanceOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableVirtualBackground',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const BackgroundSourceType backgroundSourceBackgroundSourceType =
            BackgroundSourceType.backgroundColor;
        const BackgroundBlurDegree backgroundSourceBlurDegree =
            BackgroundBlurDegree.blurDegreeLow;
        const int backgroundSourceColor = 10;
        const String backgroundSourceSource = "hello";
        const VirtualBackgroundSource backgroundSource =
            VirtualBackgroundSource(
          backgroundSourceType: backgroundSourceBackgroundSourceType,
          color: backgroundSourceColor,
          source: backgroundSourceSource,
          blurDegree: backgroundSourceBlurDegree,
        );
        const SegModelType segpropertyModelType = SegModelType.segModelAi;
        const double segpropertyGreenCapacity = 10.0;
        const SegmentationProperty segproperty = SegmentationProperty(
          modelType: segpropertyModelType,
          greenCapacity: segpropertyGreenCapacity,
        );
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.enableVirtualBackground(
          enabled: enabled,
          backgroundSource: backgroundSource,
          segproperty: segproperty,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableVirtualBackground] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableVirtualBackground] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableRemoteSuperResolution',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int userId = 10;
        const bool enable = true;
        await rtcEngine.enableRemoteSuperResolution(
          userId: userId,
          enable: enable,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableRemoteSuperResolution] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableRemoteSuperResolution] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.enableAudio();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[enableAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.disableAudio();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[disableAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[disableAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioScenario',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioScenarioType scenario =
            AudioScenarioType.audioScenarioDefault;
        await rtcEngine.setAudioScenario(
          scenario,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioScenario] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioScenario] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLocalAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableLocalAudio(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableLocalAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableLocalAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteLocalAudioStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.muteLocalAudioStream(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteLocalAudioStream] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteLocalAudioStream] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteAllRemoteAudioStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.muteAllRemoteAudioStreams(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteAllRemoteAudioStreams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteAllRemoteAudioStreams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultMuteAllRemoteAudioStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.setDefaultMuteAllRemoteAudioStreams(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setDefaultMuteAllRemoteAudioStreams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setDefaultMuteAllRemoteAudioStreams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRemoteAudioStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const bool mute = true;
        await rtcEngine.muteRemoteAudioStream(
          uid: uid,
          mute: mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteRemoteAudioStream] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteRemoteAudioStream] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteLocalVideoStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.muteLocalVideoStream(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteLocalVideoStream] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteLocalVideoStream] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLocalVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableLocalVideo(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableLocalVideo] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableLocalVideo] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteAllRemoteVideoStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.muteAllRemoteVideoStreams(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteAllRemoteVideoStreams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteAllRemoteVideoStreams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultMuteAllRemoteVideoStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.setDefaultMuteAllRemoteVideoStreams(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setDefaultMuteAllRemoteVideoStreams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setDefaultMuteAllRemoteVideoStreams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRemoteVideoStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const bool mute = true;
        await rtcEngine.muteRemoteVideoStream(
          uid: uid,
          mute: mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteRemoteVideoStream] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteRemoteVideoStream] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteVideoStreamType',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const VideoStreamType streamType = VideoStreamType.videoStreamHigh;
        await rtcEngine.setRemoteVideoStreamType(
          uid: uid,
          streamType: streamType,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setRemoteVideoStreamType] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteVideoStreamType] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteVideoSubscriptionOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const VideoStreamType optionsType = VideoStreamType.videoStreamHigh;
        const bool optionsEncodedFrameOnly = true;
        const VideoSubscriptionOptions options = VideoSubscriptionOptions(
          type: optionsType,
          encodedFrameOnly: optionsEncodedFrameOnly,
        );
        await rtcEngine.setRemoteVideoSubscriptionOptions(
          uid: uid,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setRemoteVideoSubscriptionOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteVideoSubscriptionOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteDefaultVideoStreamType',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoStreamType streamType = VideoStreamType.videoStreamHigh;
        await rtcEngine.setRemoteDefaultVideoStreamType(
          streamType,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setRemoteDefaultVideoStreamType] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteDefaultVideoStreamType] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSubscribeAudioBlacklist',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const List<int> uidList = [];
        const int uidNumber = 10;
        await rtcEngine.setSubscribeAudioBlacklist(
          uidList: uidList,
          uidNumber: uidNumber,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSubscribeAudioBlacklist] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSubscribeAudioBlacklist] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSubscribeAudioWhitelist',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const List<int> uidList = [];
        const int uidNumber = 10;
        await rtcEngine.setSubscribeAudioWhitelist(
          uidList: uidList,
          uidNumber: uidNumber,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSubscribeAudioWhitelist] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSubscribeAudioWhitelist] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSubscribeVideoBlacklist',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const List<int> uidList = [];
        const int uidNumber = 10;
        await rtcEngine.setSubscribeVideoBlacklist(
          uidList: uidList,
          uidNumber: uidNumber,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSubscribeVideoBlacklist] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSubscribeVideoBlacklist] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSubscribeVideoWhitelist',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const List<int> uidList = [];
        const int uidNumber = 10;
        await rtcEngine.setSubscribeVideoWhitelist(
          uidList: uidList,
          uidNumber: uidNumber,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setSubscribeVideoWhitelist] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setSubscribeVideoWhitelist] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudioVolumeIndication',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int interval = 10;
        const int smooth = 10;
        const bool reportVad = true;
        await rtcEngine.enableAudioVolumeIndication(
          interval: interval,
          smooth: smooth,
          reportVad: reportVad,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableAudioVolumeIndication] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableAudioVolumeIndication] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopAudioRecording();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopAudioRecording] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopAudioRecording] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopAudioMixing();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopAudioMixing] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopAudioMixing] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.pauseAudioMixing();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pauseAudioMixing] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[pauseAudioMixing] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.resumeAudioMixing();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resumeAudioMixing] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[resumeAudioMixing] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'selectAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int index = 10;
        await rtcEngine.selectAudioTrack(
          index,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[selectAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[selectAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioTrackCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioTrackCount();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioTrackCount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioTrackCount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustAudioMixingVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustAudioMixingVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustAudioMixingVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustAudioMixingPublishVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustAudioMixingPublishVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustAudioMixingPublishVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioMixingPublishVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioMixingPublishVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioMixingPublishVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustAudioMixingPlayoutVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustAudioMixingPlayoutVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustAudioMixingPlayoutVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioMixingPlayoutVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioMixingPlayoutVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioMixingPlayoutVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingDuration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioMixingDuration();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioMixingDuration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioMixingDuration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingCurrentPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioMixingCurrentPosition();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioMixingCurrentPosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioMixingCurrentPosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioMixingPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int pos = 10;
        await rtcEngine.setAudioMixingPosition(
          pos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioMixingPosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioMixingPosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioMixingDualMonoMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioMixingDualMonoMode mode =
            AudioMixingDualMonoMode.audioMixingDualMonoAuto;
        await rtcEngine.setAudioMixingDualMonoMode(
          mode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioMixingDualMonoMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioMixingDualMonoMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioMixingPitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int pitch = 10;
        await rtcEngine.setAudioMixingPitch(
          pitch,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioMixingPitch] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioMixingPitch] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getEffectsVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getEffectsVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getEffectsVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getEffectsVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEffectsVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.setEffectsVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setEffectsVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setEffectsVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'preloadEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        const String filePath = "hello";
        const int startPos = 10;
        await rtcEngine.preloadEffect(
          soundId: soundId,
          filePath: filePath,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[preloadEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[preloadEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        const String filePath = "hello";
        const int loopCount = 10;
        const double pitch = 10.0;
        const double pan = 10.0;
        const int gain = 10;
        const bool publish = true;
        const int startPos = 10;
        await rtcEngine.playEffect(
          soundId: soundId,
          filePath: filePath,
          loopCount: loopCount,
          pitch: pitch,
          pan: pan,
          gain: gain,
          publish: publish,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[playEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[playEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int loopCount = 10;
        const double pitch = 10.0;
        const double pan = 10.0;
        const int gain = 10;
        const bool publish = true;
        await rtcEngine.playAllEffects(
          loopCount: loopCount,
          pitch: pitch,
          pan: pan,
          gain: gain,
          publish: publish,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[playAllEffects] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[playAllEffects] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVolumeOfEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.getVolumeOfEffect(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getVolumeOfEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getVolumeOfEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVolumeOfEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        const int volume = 10;
        await rtcEngine.setVolumeOfEffect(
          soundId: soundId,
          volume: volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVolumeOfEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVolumeOfEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.pauseEffect(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pauseEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[pauseEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.pauseAllEffects();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pauseAllEffects] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[pauseAllEffects] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.resumeEffect(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resumeEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[resumeEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.resumeAllEffects();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resumeAllEffects] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[resumeAllEffects] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.stopEffect(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[stopEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopAllEffects();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopAllEffects] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopAllEffects] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.unloadEffect(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unloadEffect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unloadEffect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.unloadAllEffects();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[unloadAllEffects] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unloadAllEffects] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEffectPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        const int pos = 10;
        await rtcEngine.setEffectPosition(
          soundId: soundId,
          pos: pos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setEffectPosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setEffectPosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getEffectCurrentPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int soundId = 10;
        await rtcEngine.getEffectCurrentPosition(
          soundId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getEffectCurrentPosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getEffectCurrentPosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableSoundPositionIndication',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableSoundPositionIndication(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableSoundPositionIndication] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableSoundPositionIndication] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteVoicePosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const double pan = 10.0;
        const double gain = 10.0;
        await rtcEngine.setRemoteVoicePosition(
          uid: uid,
          pan: pan,
          gain: gain,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setRemoteVoicePosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteVoicePosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableSpatialAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableSpatialAudio(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableSpatialAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableSpatialAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteUserSpatialAudioParams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const double paramsSpeakerAzimuth = 10.0;
        const double paramsSpeakerElevation = 10.0;
        const double paramsSpeakerDistance = 10.0;
        const int paramsSpeakerOrientation = 10;
        const bool paramsEnableBlur = true;
        const bool paramsEnableAirAbsorb = true;
        const double paramsSpeakerAttenuation = 10.0;
        const SpatialAudioParams params = SpatialAudioParams(
          speakerAzimuth: paramsSpeakerAzimuth,
          speakerElevation: paramsSpeakerElevation,
          speakerDistance: paramsSpeakerDistance,
          speakerOrientation: paramsSpeakerOrientation,
          enableBlur: paramsEnableBlur,
          enableAirAbsorb: paramsEnableAirAbsorb,
          speakerAttenuation: paramsSpeakerAttenuation,
        );
        await rtcEngine.setRemoteUserSpatialAudioParams(
          uid: uid,
          params: params,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setRemoteUserSpatialAudioParams] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteUserSpatialAudioParams] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceBeautifierPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VoiceBeautifierPreset preset =
            VoiceBeautifierPreset.voiceBeautifierOff;
        await rtcEngine.setVoiceBeautifierPreset(
          preset,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVoiceBeautifierPreset] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVoiceBeautifierPreset] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioEffectPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioEffectPreset preset = AudioEffectPreset.audioEffectOff;
        await rtcEngine.setAudioEffectPreset(
          preset,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioEffectPreset] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioEffectPreset] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceConversionPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VoiceConversionPreset preset =
            VoiceConversionPreset.voiceConversionOff;
        await rtcEngine.setVoiceConversionPreset(
          preset,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVoiceConversionPreset] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVoiceConversionPreset] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioEffectParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioEffectPreset preset = AudioEffectPreset.audioEffectOff;
        const int param1 = 10;
        const int param2 = 10;
        await rtcEngine.setAudioEffectParameters(
          preset: preset,
          param1: param1,
          param2: param2,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioEffectParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioEffectParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceBeautifierParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VoiceBeautifierPreset preset =
            VoiceBeautifierPreset.voiceBeautifierOff;
        const int param1 = 10;
        const int param2 = 10;
        await rtcEngine.setVoiceBeautifierParameters(
          preset: preset,
          param1: param1,
          param2: param2,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVoiceBeautifierParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVoiceBeautifierParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceConversionParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VoiceConversionPreset preset =
            VoiceConversionPreset.voiceConversionOff;
        const int param1 = 10;
        const int param2 = 10;
        await rtcEngine.setVoiceConversionParameters(
          preset: preset,
          param1: param1,
          param2: param2,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setVoiceConversionParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setVoiceConversionParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoicePitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const double pitch = 10.0;
        await rtcEngine.setLocalVoicePitch(
          pitch,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalVoicePitch] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalVoicePitch] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoiceEqualization',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioEqualizationBandFrequency bandFrequency =
            AudioEqualizationBandFrequency.audioEqualizationBand31;
        const int bandGain = 10;
        await rtcEngine.setLocalVoiceEqualization(
          bandFrequency: bandFrequency,
          bandGain: bandGain,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalVoiceEqualization] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalVoiceEqualization] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoiceReverb',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioReverbType reverbKey = AudioReverbType.audioReverbDryLevel;
        const int value = 10;
        await rtcEngine.setLocalVoiceReverb(
          reverbKey: reverbKey,
          value: value,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalVoiceReverb] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalVoiceReverb] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String filePath = "hello";
        await rtcEngine.setLogFile(
          filePath,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLogFile] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[setLogFile] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFilter',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const LogFilterType filter = LogFilterType.logFilterOff;
        await rtcEngine.setLogFilter(
          filter,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLogFilter] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLogFilter] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogLevel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const LogLevel level = LogLevel.logLevelNone;
        await rtcEngine.setLogLevel(
          level,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLogLevel] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[setLogLevel] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFileSize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int fileSizeInKBytes = 10;
        await rtcEngine.setLogFileSize(
          fileSizeInKBytes,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLogFileSize] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLogFileSize] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'uploadLogFile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String requestId = "hello";
        await rtcEngine.uploadLogFile(
          requestId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[uploadLogFile] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[uploadLogFile] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const RenderModeType renderMode = RenderModeType.renderModeHidden;
        const VideoMirrorModeType mirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        await rtcEngine.setRemoteRenderMode(
          uid: uid,
          renderMode: renderMode,
          mirrorMode: mirrorMode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setRemoteRenderMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteRenderMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVideoMirrorMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoMirrorModeType mirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        await rtcEngine.setLocalVideoMirrorMode(
          mirrorMode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalVideoMirrorMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalVideoMirrorMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableEchoCancellationExternal',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const int audioSourceDelay = 10;
        await rtcEngine.enableEchoCancellationExternal(
          enabled: enabled,
          audioSourceDelay: audioSourceDelay,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableEchoCancellationExternal] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableEchoCancellationExternal] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableCustomAudioLocalPlayback',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sourceId = 10;
        const bool enabled = true;
        await rtcEngine.enableCustomAudioLocalPlayback(
          sourceId: sourceId,
          enabled: enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableCustomAudioLocalPlayback] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableCustomAudioLocalPlayback] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool configEnableLocalPlayback = true;
        const AudioTrackConfig config = AudioTrackConfig(
          enableLocalPlayback: configEnableLocalPlayback,
        );
        await rtcEngine.startPrimaryCustomAudioTrack(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startPrimaryCustomAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startPrimaryCustomAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopPrimaryCustomAudioTrack();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopPrimaryCustomAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopPrimaryCustomAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool configEnableLocalPlayback = true;
        const AudioTrackConfig config = AudioTrackConfig(
          enableLocalPlayback: configEnableLocalPlayback,
        );
        await rtcEngine.startSecondaryCustomAudioTrack(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startSecondaryCustomAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startSecondaryCustomAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopSecondaryCustomAudioTrack();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopSecondaryCustomAudioTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopSecondaryCustomAudioTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRecordingAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sampleRate = 10;
        const int channel = 10;
        const RawAudioFrameOpModeType mode =
            RawAudioFrameOpModeType.rawAudioFrameOpModeReadOnly;
        const int samplesPerCall = 10;
        await rtcEngine.setRecordingAudioFrameParameters(
          sampleRate: sampleRate,
          channel: channel,
          mode: mode,
          samplesPerCall: samplesPerCall,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setRecordingAudioFrameParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRecordingAudioFrameParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sampleRate = 10;
        const int channel = 10;
        const RawAudioFrameOpModeType mode =
            RawAudioFrameOpModeType.rawAudioFrameOpModeReadOnly;
        const int samplesPerCall = 10;
        await rtcEngine.setPlaybackAudioFrameParameters(
          sampleRate: sampleRate,
          channel: channel,
          mode: mode,
          samplesPerCall: samplesPerCall,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setPlaybackAudioFrameParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setPlaybackAudioFrameParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setMixedAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sampleRate = 10;
        const int channel = 10;
        const int samplesPerCall = 10;
        await rtcEngine.setMixedAudioFrameParameters(
          sampleRate: sampleRate,
          channel: channel,
          samplesPerCall: samplesPerCall,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setMixedAudioFrameParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setMixedAudioFrameParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackAudioFrameBeforeMixingParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sampleRate = 10;
        const int channel = 10;
        await rtcEngine.setPlaybackAudioFrameBeforeMixingParameters(
          sampleRate: sampleRate,
          channel: channel,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setPlaybackAudioFrameBeforeMixingParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setPlaybackAudioFrameBeforeMixingParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudioSpectrumMonitor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int intervalInMS = 10;
        await rtcEngine.enableAudioSpectrumMonitor(
          intervalInMS: intervalInMS,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableAudioSpectrumMonitor] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableAudioSpectrumMonitor] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableAudioSpectrumMonitor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.disableAudioSpectrumMonitor();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[disableAudioSpectrumMonitor] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[disableAudioSpectrumMonitor] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustRecordingSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustRecordingSignalVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustRecordingSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustRecordingSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRecordingSignal',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool mute = true;
        await rtcEngine.muteRecordingSignal(
          mute,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[muteRecordingSignal] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[muteRecordingSignal] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPlaybackSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustPlaybackSignalVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustPlaybackSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustPlaybackSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustUserPlaybackSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const int volume = 10;
        await rtcEngine.adjustUserPlaybackSignalVolume(
          uid: uid,
          volume: volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustUserPlaybackSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustUserPlaybackSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalPublishFallbackOption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const StreamFallbackOptions option =
            StreamFallbackOptions.streamFallbackOptionDisabled;
        await rtcEngine.setLocalPublishFallbackOption(
          option,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalPublishFallbackOption] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalPublishFallbackOption] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteSubscribeFallbackOption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const StreamFallbackOptions option =
            StreamFallbackOptions.streamFallbackOptionDisabled;
        await rtcEngine.setRemoteSubscribeFallbackOption(
          option,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setRemoteSubscribeFallbackOption] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteSubscribeFallbackOption] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLoopbackRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const String deviceName = "hello";
        await rtcEngine.enableLoopbackRecording(
          enabled: enabled,
          deviceName: deviceName,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableLoopbackRecording] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableLoopbackRecording] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustLoopbackSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.adjustLoopbackSignalVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustLoopbackSignalVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustLoopbackSignalVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getLoopbackRecordingVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getLoopbackRecordingVolume();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getLoopbackRecordingVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getLoopbackRecordingVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableInEarMonitoring',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const EarMonitoringFilterType includeAudioFilters =
            EarMonitoringFilterType.earMonitoringFilterNone;
        await rtcEngine.enableInEarMonitoring(
          enabled: enabled,
          includeAudioFilters: includeAudioFilters,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableInEarMonitoring] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableInEarMonitoring] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setInEarMonitoringVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int volume = 10;
        await rtcEngine.setInEarMonitoringVolume(
          volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setInEarMonitoringVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setInEarMonitoringVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'loadExtensionProvider',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String path = "hello";
        const bool unloadAfterUse = true;
        await rtcEngine.loadExtensionProvider(
          path: path,
          unloadAfterUse: unloadAfterUse,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[loadExtensionProvider] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[loadExtensionProvider] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExtensionProviderProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String provider = "hello";
        const String key = "hello";
        const String value = "hello";
        await rtcEngine.setExtensionProviderProperty(
          provider: provider,
          key: key,
          value: value,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setExtensionProviderProperty] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setExtensionProviderProperty] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableExtension',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String provider = "hello";
        const String extension = "hello";
        const bool enable = true;
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.enableExtension(
          provider: provider,
          extension: extension,
          enable: enable,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableExtension] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableExtension] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExtensionProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String provider = "hello";
        const String extension = "hello";
        const String key = "hello";
        const String value = "hello";
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.setExtensionProperty(
          provider: provider,
          extension: extension,
          key: key,
          value: value,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setExtensionProperty] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setExtensionProperty] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getExtensionProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String provider = "hello";
        const String extension = "hello";
        const String key = "hello";
        const int bufLen = 10;
        const MediaSourceType type = MediaSourceType.audioPlayoutSource;
        await rtcEngine.getExtensionProperty(
          provider: provider,
          extension: extension,
          key: key,
          bufLen: bufLen,
          type: type,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getExtensionProperty] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getExtensionProperty] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraCapturerConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const CameraDirection configCameraDirection =
            CameraDirection.cameraRear;
        const int formatWidth = 10;
        const int formatHeight = 10;
        const int formatFps = 10;
        const VideoFormat configFormat = VideoFormat(
          width: formatWidth,
          height: formatHeight,
          fps: formatFps,
        );
        const String configDeviceId = "hello";
        const bool configFollowEncodeDimensionRatio = true;
        const CameraCapturerConfiguration config = CameraCapturerConfiguration(
          cameraDirection: configCameraDirection,
          deviceId: configDeviceId,
          format: configFormat,
          followEncodeDimensionRatio: configFollowEncodeDimensionRatio,
        );
        await rtcEngine.setCameraCapturerConfiguration(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCameraCapturerConfiguration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraCapturerConfiguration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'destroyCustomVideoTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int videoTrackId = 10;
        await rtcEngine.destroyCustomVideoTrack(
          videoTrackId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[destroyCustomVideoTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[destroyCustomVideoTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'destroyCustomEncodedVideoTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int videoTrackId = 10;
        await rtcEngine.destroyCustomEncodedVideoTrack(
          videoTrackId,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[destroyCustomEncodedVideoTrack] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[destroyCustomEncodedVideoTrack] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchCamera',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.switchCamera();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[switchCamera] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[switchCamera] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraZoomSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraZoomSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[isCameraZoomSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraZoomSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraFaceDetectSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraFaceDetectSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[isCameraFaceDetectSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraFaceDetectSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraTorchSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraTorchSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[isCameraTorchSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraTorchSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraFocusSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraFocusSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[isCameraFocusSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraFocusSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraAutoFocusFaceModeSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraAutoFocusFaceModeSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[isCameraAutoFocusFaceModeSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraAutoFocusFaceModeSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraZoomFactor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const double factor = 10.0;
        await rtcEngine.setCameraZoomFactor(
          factor,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCameraZoomFactor] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraZoomFactor] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableFaceDetection',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableFaceDetection(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableFaceDetection] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableFaceDetection] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCameraMaxZoomFactor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getCameraMaxZoomFactor();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getCameraMaxZoomFactor] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getCameraMaxZoomFactor] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraFocusPositionInPreview',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const double positionX = 10.0;
        const double positionY = 10.0;
        await rtcEngine.setCameraFocusPositionInPreview(
          positionX: positionX,
          positionY: positionY,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setCameraFocusPositionInPreview] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraFocusPositionInPreview] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraTorchOn',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool isOn = true;
        await rtcEngine.setCameraTorchOn(
          isOn,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCameraTorchOn] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraTorchOn] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraAutoFocusFaceModeEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.setCameraAutoFocusFaceModeEnabled(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setCameraAutoFocusFaceModeEnabled] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraAutoFocusFaceModeEnabled] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraExposurePositionSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraExposurePositionSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[isCameraExposurePositionSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraExposurePositionSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraExposurePosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const double positionXinView = 10.0;
        const double positionYinView = 10.0;
        await rtcEngine.setCameraExposurePosition(
          positionXinView: positionXinView,
          positionYinView: positionYinView,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCameraExposurePosition] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraExposurePosition] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraAutoExposureFaceModeSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isCameraAutoExposureFaceModeSupported();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[isCameraAutoExposureFaceModeSupported] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isCameraAutoExposureFaceModeSupported] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraAutoExposureFaceModeEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.setCameraAutoExposureFaceModeEnabled(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setCameraAutoExposureFaceModeEnabled] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraAutoExposureFaceModeEnabled] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultAudioRouteToSpeakerphone',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool defaultToSpeaker = true;
        await rtcEngine.setDefaultAudioRouteToSpeakerphone(
          defaultToSpeaker,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setDefaultAudioRouteToSpeakerphone] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setDefaultAudioRouteToSpeakerphone] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEnableSpeakerphone',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool speakerOn = true;
        await rtcEngine.setEnableSpeakerphone(
          speakerOn,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setEnableSpeakerphone] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setEnableSpeakerphone] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isSpeakerphoneEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.isSpeakerphoneEnabled();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[isSpeakerphoneEnabled] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[isSpeakerphoneEnabled] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getScreenCaptureSources',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int thumbSizeWidth = 10;
        const int thumbSizeHeight = 10;
        const SIZE thumbSize = SIZE(
          width: thumbSizeWidth,
          height: thumbSizeHeight,
        );
        const int iconSizeWidth = 10;
        const int iconSizeHeight = 10;
        const SIZE iconSize = SIZE(
          width: iconSizeWidth,
          height: iconSizeHeight,
        );
        const bool includeScreen = true;
        await rtcEngine.getScreenCaptureSources(
          thumbSize: thumbSize,
          iconSize: iconSize,
          includeScreen: includeScreen,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getScreenCaptureSources] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getScreenCaptureSources] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioSessionOperationRestriction',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioSessionOperationRestriction restriction =
            AudioSessionOperationRestriction
                .audioSessionOperationRestrictionNone;
        await rtcEngine.setAudioSessionOperationRestriction(
          restriction,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setAudioSessionOperationRestriction] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioSessionOperationRestriction] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByDisplayId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int displayId = 10;
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle regionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions captureParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int captureParamsFrameRate = 10;
        const int captureParamsBitrate = 10;
        const bool captureParamsCaptureMouseCursor = true;
        const bool captureParamsWindowFocus = true;
        const List<int> captureParamsExcludeWindowList = [];
        const int captureParamsExcludeWindowCount = 10;
        const int captureParamsHighLightWidth = 10;
        const int captureParamsHighLightColor = 10;
        const bool captureParamsEnableHighLight = true;
        const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
          dimensions: captureParamsDimensions,
          frameRate: captureParamsFrameRate,
          bitrate: captureParamsBitrate,
          captureMouseCursor: captureParamsCaptureMouseCursor,
          windowFocus: captureParamsWindowFocus,
          excludeWindowList: captureParamsExcludeWindowList,
          excludeWindowCount: captureParamsExcludeWindowCount,
          highLightWidth: captureParamsHighLightWidth,
          highLightColor: captureParamsHighLightColor,
          enableHighLight: captureParamsEnableHighLight,
        );
        await rtcEngine.startScreenCaptureByDisplayId(
          displayId: displayId,
          regionRect: regionRect,
          captureParams: captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startScreenCaptureByDisplayId] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startScreenCaptureByDisplayId] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByScreenRect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int screenRectX = 10;
        const int screenRectY = 10;
        const int screenRectWidth = 10;
        const int screenRectHeight = 10;
        const Rectangle screenRect = Rectangle(
          x: screenRectX,
          y: screenRectY,
          width: screenRectWidth,
          height: screenRectHeight,
        );
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle regionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions captureParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int captureParamsFrameRate = 10;
        const int captureParamsBitrate = 10;
        const bool captureParamsCaptureMouseCursor = true;
        const bool captureParamsWindowFocus = true;
        const List<int> captureParamsExcludeWindowList = [];
        const int captureParamsExcludeWindowCount = 10;
        const int captureParamsHighLightWidth = 10;
        const int captureParamsHighLightColor = 10;
        const bool captureParamsEnableHighLight = true;
        const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
          dimensions: captureParamsDimensions,
          frameRate: captureParamsFrameRate,
          bitrate: captureParamsBitrate,
          captureMouseCursor: captureParamsCaptureMouseCursor,
          windowFocus: captureParamsWindowFocus,
          excludeWindowList: captureParamsExcludeWindowList,
          excludeWindowCount: captureParamsExcludeWindowCount,
          highLightWidth: captureParamsHighLightWidth,
          highLightColor: captureParamsHighLightColor,
          enableHighLight: captureParamsEnableHighLight,
        );
        await rtcEngine.startScreenCaptureByScreenRect(
          screenRect: screenRect,
          regionRect: regionRect,
          captureParams: captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startScreenCaptureByScreenRect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startScreenCaptureByScreenRect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioDeviceInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getAudioDeviceInfo();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioDeviceInfo] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioDeviceInfo] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByWindowId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int windowId = 10;
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle regionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions captureParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int captureParamsFrameRate = 10;
        const int captureParamsBitrate = 10;
        const bool captureParamsCaptureMouseCursor = true;
        const bool captureParamsWindowFocus = true;
        const List<int> captureParamsExcludeWindowList = [];
        const int captureParamsExcludeWindowCount = 10;
        const int captureParamsHighLightWidth = 10;
        const int captureParamsHighLightColor = 10;
        const bool captureParamsEnableHighLight = true;
        const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
          dimensions: captureParamsDimensions,
          frameRate: captureParamsFrameRate,
          bitrate: captureParamsBitrate,
          captureMouseCursor: captureParamsCaptureMouseCursor,
          windowFocus: captureParamsWindowFocus,
          excludeWindowList: captureParamsExcludeWindowList,
          excludeWindowCount: captureParamsExcludeWindowCount,
          highLightWidth: captureParamsHighLightWidth,
          highLightColor: captureParamsHighLightColor,
          enableHighLight: captureParamsEnableHighLight,
        );
        await rtcEngine.startScreenCaptureByWindowId(
          windowId: windowId,
          regionRect: regionRect,
          captureParams: captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startScreenCaptureByWindowId] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startScreenCaptureByWindowId] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setScreenCaptureContentHint',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoContentHint contentHint = VideoContentHint.contentHintNone;
        await rtcEngine.setScreenCaptureContentHint(
          contentHint,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setScreenCaptureContentHint] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setScreenCaptureContentHint] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setScreenCaptureScenario',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const ScreenScenarioType screenScenario =
            ScreenScenarioType.screenScenarioDocument;
        await rtcEngine.setScreenCaptureScenario(
          screenScenario,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setScreenCaptureScenario] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setScreenCaptureScenario] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateScreenCaptureRegion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle regionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        await rtcEngine.updateScreenCaptureRegion(
          regionRect,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateScreenCaptureRegion] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateScreenCaptureRegion] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateScreenCaptureParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions captureParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int captureParamsFrameRate = 10;
        const int captureParamsBitrate = 10;
        const bool captureParamsCaptureMouseCursor = true;
        const bool captureParamsWindowFocus = true;
        const List<int> captureParamsExcludeWindowList = [];
        const int captureParamsExcludeWindowCount = 10;
        const int captureParamsHighLightWidth = 10;
        const int captureParamsHighLightColor = 10;
        const bool captureParamsEnableHighLight = true;
        const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
          dimensions: captureParamsDimensions,
          frameRate: captureParamsFrameRate,
          bitrate: captureParamsBitrate,
          captureMouseCursor: captureParamsCaptureMouseCursor,
          windowFocus: captureParamsWindowFocus,
          excludeWindowList: captureParamsExcludeWindowList,
          excludeWindowCount: captureParamsExcludeWindowCount,
          highLightWidth: captureParamsHighLightWidth,
          highLightColor: captureParamsHighLightColor,
          enableHighLight: captureParamsEnableHighLight,
        );
        await rtcEngine.updateScreenCaptureParameters(
          captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateScreenCaptureParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateScreenCaptureParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int audioParamsSampleRate = 10;
        const int audioParamsChannels = 10;
        const int audioParamsCaptureSignalVolume = 10;
        const ScreenAudioParameters captureParamsAudioParams =
            ScreenAudioParameters(
          sampleRate: audioParamsSampleRate,
          channels: audioParamsChannels,
          captureSignalVolume: audioParamsCaptureSignalVolume,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions videoParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const VideoContentHint videoParamsContentHint =
            VideoContentHint.contentHintNone;
        const int videoParamsFrameRate = 10;
        const int videoParamsBitrate = 10;
        const ScreenVideoParameters captureParamsVideoParams =
            ScreenVideoParameters(
          dimensions: videoParamsDimensions,
          frameRate: videoParamsFrameRate,
          bitrate: videoParamsBitrate,
          contentHint: videoParamsContentHint,
        );
        const bool captureParamsCaptureAudio = true;
        const bool captureParamsCaptureVideo = true;
        const ScreenCaptureParameters2 captureParams = ScreenCaptureParameters2(
          captureAudio: captureParamsCaptureAudio,
          audioParams: captureParamsAudioParams,
          captureVideo: captureParamsCaptureVideo,
          videoParams: captureParamsVideoParams,
        );
        await rtcEngine.startScreenCapture(
          captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int audioParamsSampleRate = 10;
        const int audioParamsChannels = 10;
        const int audioParamsCaptureSignalVolume = 10;
        const ScreenAudioParameters captureParamsAudioParams =
            ScreenAudioParameters(
          sampleRate: audioParamsSampleRate,
          channels: audioParamsChannels,
          captureSignalVolume: audioParamsCaptureSignalVolume,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions videoParamsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const VideoContentHint videoParamsContentHint =
            VideoContentHint.contentHintNone;
        const int videoParamsFrameRate = 10;
        const int videoParamsBitrate = 10;
        const ScreenVideoParameters captureParamsVideoParams =
            ScreenVideoParameters(
          dimensions: videoParamsDimensions,
          frameRate: videoParamsFrameRate,
          bitrate: videoParamsBitrate,
          contentHint: videoParamsContentHint,
        );
        const bool captureParamsCaptureAudio = true;
        const bool captureParamsCaptureVideo = true;
        const ScreenCaptureParameters2 captureParams = ScreenCaptureParameters2(
          captureAudio: captureParamsCaptureAudio,
          audioParams: captureParamsAudioParams,
          captureVideo: captureParamsCaptureVideo,
          videoParams: captureParamsVideoParams,
        );
        await rtcEngine.updateScreenCapture(
          captureParams,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopScreenCapture();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCallId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getCallId();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getCallId] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[getCallId] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'rate',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String callId = "hello";
        const int rating = 10;
        const String description = "hello";
        await rtcEngine.rate(
          callId: callId,
          rating: rating,
          description: description,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[rate] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[rate] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'complain',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String callId = "hello";
        const String description = "hello";
        await rtcEngine.complain(
          callId: callId,
          description: description,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[complain] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[complain] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRtmpStreamWithoutTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String url = "hello";
        await rtcEngine.startRtmpStreamWithoutTranscoding(
          url,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[startRtmpStreamWithoutTranscoding] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startRtmpStreamWithoutTranscoding] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRtmpStreamWithTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String url = "hello";
        const VideoCodecProfileType transcodingVideoCodecProfile =
            VideoCodecProfileType.videoCodecProfileBaseline;
        const VideoCodecTypeForStream transcodingVideoCodecType =
            VideoCodecTypeForStream.videoCodecH264ForStream;
        const AudioSampleRateType transcodingAudioSampleRate =
            AudioSampleRateType.audioSampleRate32000;
        const AudioCodecProfileType transcodingAudioCodecProfile =
            AudioCodecProfileType.audioCodecProfileLcAac;
        const int transcodingWidth = 10;
        const int transcodingHeight = 10;
        const int transcodingVideoBitrate = 10;
        const int transcodingVideoFramerate = 10;
        const bool transcodingLowLatency = true;
        const int transcodingVideoGop = 10;
        const int transcodingBackgroundColor = 10;
        const int transcodingUserCount = 10;
        const List<TranscodingUser> transcodingTranscodingUsers = [];
        const String transcodingTranscodingExtraInfo = "hello";
        const String transcodingMetadata = "hello";
        const List<RtcImage> transcodingWatermark = [];
        const int transcodingWatermarkCount = 10;
        const List<RtcImage> transcodingBackgroundImage = [];
        const int transcodingBackgroundImageCount = 10;
        const int transcodingAudioBitrate = 10;
        const int transcodingAudioChannels = 10;
        const List<LiveStreamAdvancedFeature> transcodingAdvancedFeatures = [];
        const int transcodingAdvancedFeatureCount = 10;
        const LiveTranscoding transcoding = LiveTranscoding(
          width: transcodingWidth,
          height: transcodingHeight,
          videoBitrate: transcodingVideoBitrate,
          videoFramerate: transcodingVideoFramerate,
          lowLatency: transcodingLowLatency,
          videoGop: transcodingVideoGop,
          videoCodecProfile: transcodingVideoCodecProfile,
          backgroundColor: transcodingBackgroundColor,
          videoCodecType: transcodingVideoCodecType,
          userCount: transcodingUserCount,
          transcodingUsers: transcodingTranscodingUsers,
          transcodingExtraInfo: transcodingTranscodingExtraInfo,
          metadata: transcodingMetadata,
          watermark: transcodingWatermark,
          watermarkCount: transcodingWatermarkCount,
          backgroundImage: transcodingBackgroundImage,
          backgroundImageCount: transcodingBackgroundImageCount,
          audioSampleRate: transcodingAudioSampleRate,
          audioBitrate: transcodingAudioBitrate,
          audioChannels: transcodingAudioChannels,
          audioCodecProfile: transcodingAudioCodecProfile,
          advancedFeatures: transcodingAdvancedFeatures,
          advancedFeatureCount: transcodingAdvancedFeatureCount,
        );
        await rtcEngine.startRtmpStreamWithTranscoding(
          url: url,
          transcoding: transcoding,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startRtmpStreamWithTranscoding] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startRtmpStreamWithTranscoding] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateRtmpTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoCodecProfileType transcodingVideoCodecProfile =
            VideoCodecProfileType.videoCodecProfileBaseline;
        const VideoCodecTypeForStream transcodingVideoCodecType =
            VideoCodecTypeForStream.videoCodecH264ForStream;
        const AudioSampleRateType transcodingAudioSampleRate =
            AudioSampleRateType.audioSampleRate32000;
        const AudioCodecProfileType transcodingAudioCodecProfile =
            AudioCodecProfileType.audioCodecProfileLcAac;
        const int transcodingWidth = 10;
        const int transcodingHeight = 10;
        const int transcodingVideoBitrate = 10;
        const int transcodingVideoFramerate = 10;
        const bool transcodingLowLatency = true;
        const int transcodingVideoGop = 10;
        const int transcodingBackgroundColor = 10;
        const int transcodingUserCount = 10;
        const List<TranscodingUser> transcodingTranscodingUsers = [];
        const String transcodingTranscodingExtraInfo = "hello";
        const String transcodingMetadata = "hello";
        const List<RtcImage> transcodingWatermark = [];
        const int transcodingWatermarkCount = 10;
        const List<RtcImage> transcodingBackgroundImage = [];
        const int transcodingBackgroundImageCount = 10;
        const int transcodingAudioBitrate = 10;
        const int transcodingAudioChannels = 10;
        const List<LiveStreamAdvancedFeature> transcodingAdvancedFeatures = [];
        const int transcodingAdvancedFeatureCount = 10;
        const LiveTranscoding transcoding = LiveTranscoding(
          width: transcodingWidth,
          height: transcodingHeight,
          videoBitrate: transcodingVideoBitrate,
          videoFramerate: transcodingVideoFramerate,
          lowLatency: transcodingLowLatency,
          videoGop: transcodingVideoGop,
          videoCodecProfile: transcodingVideoCodecProfile,
          backgroundColor: transcodingBackgroundColor,
          videoCodecType: transcodingVideoCodecType,
          userCount: transcodingUserCount,
          transcodingUsers: transcodingTranscodingUsers,
          transcodingExtraInfo: transcodingTranscodingExtraInfo,
          metadata: transcodingMetadata,
          watermark: transcodingWatermark,
          watermarkCount: transcodingWatermarkCount,
          backgroundImage: transcodingBackgroundImage,
          backgroundImageCount: transcodingBackgroundImageCount,
          audioSampleRate: transcodingAudioSampleRate,
          audioBitrate: transcodingAudioBitrate,
          audioChannels: transcodingAudioChannels,
          audioCodecProfile: transcodingAudioCodecProfile,
          advancedFeatures: transcodingAdvancedFeatures,
          advancedFeatureCount: transcodingAdvancedFeatureCount,
        );
        await rtcEngine.updateRtmpTranscoding(
          transcoding,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateRtmpTranscoding] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateRtmpTranscoding] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopRtmpStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String url = "hello";
        await rtcEngine.stopRtmpStream(
          url,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopRtmpStream] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopRtmpStream] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startLocalVideoTranscoder',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoCodecType videoOutputConfigurationCodecType =
            VideoCodecType.videoCodecNone;
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions videoOutputConfigurationDimensions =
            VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const OrientationMode videoOutputConfigurationOrientationMode =
            OrientationMode.orientationModeAdaptive;
        const DegradationPreference
            videoOutputConfigurationDegradationPreference =
            DegradationPreference.maintainQuality;
        const VideoMirrorModeType videoOutputConfigurationMirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        const int videoOutputConfigurationFrameRate = 10;
        const int videoOutputConfigurationBitrate = 10;
        const int videoOutputConfigurationMinBitrate = 10;
        const VideoEncoderConfiguration configVideoOutputConfiguration =
            VideoEncoderConfiguration(
          codecType: videoOutputConfigurationCodecType,
          dimensions: videoOutputConfigurationDimensions,
          frameRate: videoOutputConfigurationFrameRate,
          bitrate: videoOutputConfigurationBitrate,
          minBitrate: videoOutputConfigurationMinBitrate,
          orientationMode: videoOutputConfigurationOrientationMode,
          degradationPreference: videoOutputConfigurationDegradationPreference,
          mirrorMode: videoOutputConfigurationMirrorMode,
        );
        const int configStreamCount = 10;
        const List<TranscodingVideoStream> configVideoInputStreams = [];
        const LocalTranscoderConfiguration config =
            LocalTranscoderConfiguration(
          streamCount: configStreamCount,
          videoInputStreams: configVideoInputStreams,
          videoOutputConfiguration: configVideoOutputConfiguration,
        );
        await rtcEngine.startLocalVideoTranscoder(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startLocalVideoTranscoder] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startLocalVideoTranscoder] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateLocalTranscoderConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoCodecType videoOutputConfigurationCodecType =
            VideoCodecType.videoCodecNone;
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions videoOutputConfigurationDimensions =
            VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const OrientationMode videoOutputConfigurationOrientationMode =
            OrientationMode.orientationModeAdaptive;
        const DegradationPreference
            videoOutputConfigurationDegradationPreference =
            DegradationPreference.maintainQuality;
        const VideoMirrorModeType videoOutputConfigurationMirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        const int videoOutputConfigurationFrameRate = 10;
        const int videoOutputConfigurationBitrate = 10;
        const int videoOutputConfigurationMinBitrate = 10;
        const VideoEncoderConfiguration configVideoOutputConfiguration =
            VideoEncoderConfiguration(
          codecType: videoOutputConfigurationCodecType,
          dimensions: videoOutputConfigurationDimensions,
          frameRate: videoOutputConfigurationFrameRate,
          bitrate: videoOutputConfigurationBitrate,
          minBitrate: videoOutputConfigurationMinBitrate,
          orientationMode: videoOutputConfigurationOrientationMode,
          degradationPreference: videoOutputConfigurationDegradationPreference,
          mirrorMode: videoOutputConfigurationMirrorMode,
        );
        const int configStreamCount = 10;
        const List<TranscodingVideoStream> configVideoInputStreams = [];
        const LocalTranscoderConfiguration config =
            LocalTranscoderConfiguration(
          streamCount: configStreamCount,
          videoInputStreams: configVideoInputStreams,
          videoOutputConfiguration: configVideoOutputConfiguration,
        );
        await rtcEngine.updateLocalTranscoderConfiguration(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[updateLocalTranscoderConfiguration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateLocalTranscoderConfiguration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopLocalVideoTranscoder',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopLocalVideoTranscoder();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopLocalVideoTranscoder] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopLocalVideoTranscoder] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const CameraDirection configCameraDirection =
            CameraDirection.cameraRear;
        const int formatWidth = 10;
        const int formatHeight = 10;
        const int formatFps = 10;
        const VideoFormat configFormat = VideoFormat(
          width: formatWidth,
          height: formatHeight,
          fps: formatFps,
        );
        const String configDeviceId = "hello";
        const bool configFollowEncodeDimensionRatio = true;
        const CameraCapturerConfiguration config = CameraCapturerConfiguration(
          cameraDirection: configCameraDirection,
          deviceId: configDeviceId,
          format: configFormat,
          followEncodeDimensionRatio: configFollowEncodeDimensionRatio,
        );
        await rtcEngine.startPrimaryCameraCapture(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startPrimaryCameraCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startPrimaryCameraCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const CameraDirection configCameraDirection =
            CameraDirection.cameraRear;
        const int formatWidth = 10;
        const int formatHeight = 10;
        const int formatFps = 10;
        const VideoFormat configFormat = VideoFormat(
          width: formatWidth,
          height: formatHeight,
          fps: formatFps,
        );
        const String configDeviceId = "hello";
        const bool configFollowEncodeDimensionRatio = true;
        const CameraCapturerConfiguration config = CameraCapturerConfiguration(
          cameraDirection: configCameraDirection,
          deviceId: configDeviceId,
          format: configFormat,
          followEncodeDimensionRatio: configFollowEncodeDimensionRatio,
        );
        await rtcEngine.startSecondaryCameraCapture(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startSecondaryCameraCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startSecondaryCameraCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopPrimaryCameraCapture();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopPrimaryCameraCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopPrimaryCameraCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopSecondaryCameraCapture();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopSecondaryCameraCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopSecondaryCameraCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraDeviceOrientation',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoSourceType type = VideoSourceType.videoSourceCameraPrimary;
        const VideoOrientation orientation = VideoOrientation.videoOrientation0;
        await rtcEngine.setCameraDeviceOrientation(
          type: type,
          orientation: orientation,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCameraDeviceOrientation] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCameraDeviceOrientation] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setScreenCaptureOrientation',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoSourceType type = VideoSourceType.videoSourceCameraPrimary;
        const VideoOrientation orientation = VideoOrientation.videoOrientation0;
        await rtcEngine.setScreenCaptureOrientation(
          type: type,
          orientation: orientation,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setScreenCaptureOrientation] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setScreenCaptureOrientation] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int screenRectX = 10;
        const int screenRectY = 10;
        const int screenRectWidth = 10;
        const int screenRectHeight = 10;
        const Rectangle configScreenRect = Rectangle(
          x: screenRectX,
          y: screenRectY,
          width: screenRectWidth,
          height: screenRectHeight,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions paramsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int paramsFrameRate = 10;
        const int paramsBitrate = 10;
        const bool paramsCaptureMouseCursor = true;
        const bool paramsWindowFocus = true;
        const List<int> paramsExcludeWindowList = [];
        const int paramsExcludeWindowCount = 10;
        const int paramsHighLightWidth = 10;
        const int paramsHighLightColor = 10;
        const bool paramsEnableHighLight = true;
        const ScreenCaptureParameters configParams = ScreenCaptureParameters(
          dimensions: paramsDimensions,
          frameRate: paramsFrameRate,
          bitrate: paramsBitrate,
          captureMouseCursor: paramsCaptureMouseCursor,
          windowFocus: paramsWindowFocus,
          excludeWindowList: paramsExcludeWindowList,
          excludeWindowCount: paramsExcludeWindowCount,
          highLightWidth: paramsHighLightWidth,
          highLightColor: paramsHighLightColor,
          enableHighLight: paramsEnableHighLight,
        );
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle configRegionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        const bool configIsCaptureWindow = true;
        const int configDisplayId = 10;
        const int configWindowId = 10;
        const ScreenCaptureConfiguration config = ScreenCaptureConfiguration(
          isCaptureWindow: configIsCaptureWindow,
          displayId: configDisplayId,
          screenRect: configScreenRect,
          windowId: configWindowId,
          params: configParams,
          regionRect: configRegionRect,
        );
        await rtcEngine.startPrimaryScreenCapture(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startPrimaryScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startPrimaryScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int screenRectX = 10;
        const int screenRectY = 10;
        const int screenRectWidth = 10;
        const int screenRectHeight = 10;
        const Rectangle configScreenRect = Rectangle(
          x: screenRectX,
          y: screenRectY,
          width: screenRectWidth,
          height: screenRectHeight,
        );
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions paramsDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int paramsFrameRate = 10;
        const int paramsBitrate = 10;
        const bool paramsCaptureMouseCursor = true;
        const bool paramsWindowFocus = true;
        const List<int> paramsExcludeWindowList = [];
        const int paramsExcludeWindowCount = 10;
        const int paramsHighLightWidth = 10;
        const int paramsHighLightColor = 10;
        const bool paramsEnableHighLight = true;
        const ScreenCaptureParameters configParams = ScreenCaptureParameters(
          dimensions: paramsDimensions,
          frameRate: paramsFrameRate,
          bitrate: paramsBitrate,
          captureMouseCursor: paramsCaptureMouseCursor,
          windowFocus: paramsWindowFocus,
          excludeWindowList: paramsExcludeWindowList,
          excludeWindowCount: paramsExcludeWindowCount,
          highLightWidth: paramsHighLightWidth,
          highLightColor: paramsHighLightColor,
          enableHighLight: paramsEnableHighLight,
        );
        const int regionRectX = 10;
        const int regionRectY = 10;
        const int regionRectWidth = 10;
        const int regionRectHeight = 10;
        const Rectangle configRegionRect = Rectangle(
          x: regionRectX,
          y: regionRectY,
          width: regionRectWidth,
          height: regionRectHeight,
        );
        const bool configIsCaptureWindow = true;
        const int configDisplayId = 10;
        const int configWindowId = 10;
        const ScreenCaptureConfiguration config = ScreenCaptureConfiguration(
          isCaptureWindow: configIsCaptureWindow,
          displayId: configDisplayId,
          screenRect: configScreenRect,
          windowId: configWindowId,
          params: configParams,
          regionRect: configRegionRect,
        );
        await rtcEngine.startSecondaryScreenCapture(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startSecondaryScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startSecondaryScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopPrimaryScreenCapture();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopPrimaryScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopPrimaryScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopSecondaryScreenCapture();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopSecondaryScreenCapture] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopSecondaryScreenCapture] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getConnectionState',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.getConnectionState();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getConnectionState] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getConnectionState] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteUserPriority',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const PriorityType userPriority = PriorityType.priorityHigh;
        await rtcEngine.setRemoteUserPriority(
          uid: uid,
          userPriority: userPriority,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setRemoteUserPriority] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setRemoteUserPriority] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEncryptionMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String encryptionMode = "hello";
        await rtcEngine.setEncryptionMode(
          encryptionMode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setEncryptionMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setEncryptionMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEncryptionSecret',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String secret = "hello";
        await rtcEngine.setEncryptionSecret(
          secret,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setEncryptionSecret] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setEncryptionSecret] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableEncryption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const EncryptionMode configEncryptionMode = EncryptionMode.aes128Xts;
        const String configEncryptionKey = "hello";
        Uint8List configEncryptionKdfSalt = Uint8List.fromList([]);
        final EncryptionConfig config = EncryptionConfig(
          encryptionMode: configEncryptionMode,
          encryptionKey: configEncryptionKey,
          encryptionKdfSalt: configEncryptionKdfSalt,
        );
        await rtcEngine.enableEncryption(
          enabled: enabled,
          config: config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableEncryption] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableEncryption] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendStreamMessage',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int streamId = 10;
        Uint8List data = Uint8List.fromList([]);
        const int length = 10;
        await rtcEngine.sendStreamMessage(
          streamId: streamId,
          data: data,
          length: length,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[sendStreamMessage] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[sendStreamMessage] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'clearVideoWatermark',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.clearVideoWatermark();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[clearVideoWatermark] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[clearVideoWatermark] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'clearVideoWatermarks',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.clearVideoWatermarks();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[clearVideoWatermarks] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[clearVideoWatermarks] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'addInjectStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String url = "hello";
        const AudioSampleRateType configAudioSampleRate =
            AudioSampleRateType.audioSampleRate32000;
        const int configWidth = 10;
        const int configHeight = 10;
        const int configVideoGop = 10;
        const int configVideoFramerate = 10;
        const int configVideoBitrate = 10;
        const int configAudioBitrate = 10;
        const int configAudioChannels = 10;
        const InjectStreamConfig config = InjectStreamConfig(
          width: configWidth,
          height: configHeight,
          videoGop: configVideoGop,
          videoFramerate: configVideoFramerate,
          videoBitrate: configVideoBitrate,
          audioSampleRate: configAudioSampleRate,
          audioBitrate: configAudioBitrate,
          audioChannels: configAudioChannels,
        );
        await rtcEngine.addInjectStreamUrl(
          url: url,
          config: config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[addInjectStreamUrl] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[addInjectStreamUrl] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'removeInjectStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String url = "hello";
        await rtcEngine.removeInjectStreamUrl(
          url,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[removeInjectStreamUrl] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[removeInjectStreamUrl] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.pauseAudio();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pauseAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[pauseAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.resumeAudio();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resumeAudio] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[resumeAudio] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableWebSdkInteroperability',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableWebSdkInteroperability(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableWebSdkInteroperability] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableWebSdkInteroperability] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendCustomReportMessage',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String id = "hello";
        const String category = "hello";
        const String event = "hello";
        const String label = "hello";
        const int value = 10;
        await rtcEngine.sendCustomReportMessage(
          id: id,
          category: category,
          event: event,
          label: label,
          value: value,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[sendCustomReportMessage] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[sendCustomReportMessage] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioFrameDump',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String channelId = "hello";
        const int userId = 10;
        const String location = "hello";
        const String uuid = "hello";
        const String passwd = "hello";
        const int durationMs = 10;
        const bool autoUpload = true;
        await rtcEngine.startAudioFrameDump(
          channelId: channelId,
          userId: userId,
          location: location,
          uuid: uuid,
          passwd: passwd,
          durationMs: durationMs,
          autoUpload: autoUpload,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startAudioFrameDump] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startAudioFrameDump] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioFrameDump',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String channelId = "hello";
        const int userId = 10;
        const String location = "hello";
        await rtcEngine.stopAudioFrameDump(
          channelId: channelId,
          userId: userId,
          location: location,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopAudioFrameDump] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopAudioFrameDump] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerLocalUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String appId = "hello";
        const String userAccount = "hello";
        await rtcEngine.registerLocalUserAccount(
          appId: appId,
          userAccount: userAccount,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[registerLocalUserAccount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[registerLocalUserAccount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannelWithUserAccountEx',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String token = "hello";
        const String channelId = "hello";
        const String userAccount = "hello";
        const ClientRoleType optionsClientRoleType =
            ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType optionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const VideoStreamType optionsDefaultVideoStreamType =
            VideoStreamType.videoStreamHigh;
        const ChannelProfileType optionsChannelProfile =
            ChannelProfileType.channelProfileCommunication;
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishSecondaryCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishScreenCaptureVideo = true;
        const bool optionsPublishScreenCaptureAudio = true;
        const bool optionsPublishScreenTrack = true;
        const bool optionsPublishSecondaryScreenTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const int optionsPublishCustomAudioSourceId = 10;
        const bool optionsPublishCustomAudioTrackEnableAec = true;
        const bool optionsPublishDirectCustomAudioTrack = true;
        const bool optionsPublishCustomAudioTrackAec = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishEncodedVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const bool optionsPublishMediaPlayerVideoTrack = true;
        const bool optionsPublishTrancodedVideoTrack = true;
        const bool optionsAutoSubscribeAudio = true;
        const bool optionsAutoSubscribeVideo = true;
        const bool optionsEnableAudioRecordingOrPlayout = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsAudioDelayMs = 10;
        const int optionsMediaPlayerAudioDelayMs = 10;
        const String optionsToken = "hello";
        const bool optionsEnableBuiltInMediaEncryption = true;
        const bool optionsPublishRhythmPlayerTrack = true;
        const bool optionsIsInteractiveAudience = true;
        const int optionsCustomVideoTrackId = 10;
        const bool optionsIsAudioFilterable = true;
        const ChannelMediaOptions options = ChannelMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishScreenCaptureVideo: optionsPublishScreenCaptureVideo,
          publishScreenCaptureAudio: optionsPublishScreenCaptureAudio,
          publishScreenTrack: optionsPublishScreenTrack,
          publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
          publishCustomAudioTrackEnableAec:
              optionsPublishCustomAudioTrackEnableAec,
          publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
          publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
          publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
          autoSubscribeAudio: optionsAutoSubscribeAudio,
          autoSubscribeVideo: optionsAutoSubscribeVideo,
          enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          clientRoleType: optionsClientRoleType,
          audienceLatencyLevel: optionsAudienceLatencyLevel,
          defaultVideoStreamType: optionsDefaultVideoStreamType,
          channelProfile: optionsChannelProfile,
          audioDelayMs: optionsAudioDelayMs,
          mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
          token: optionsToken,
          enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
          publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
          isInteractiveAudience: optionsIsInteractiveAudience,
          customVideoTrackId: optionsCustomVideoTrackId,
          isAudioFilterable: optionsIsAudioFilterable,
        );
        await rtcEngine.joinChannelWithUserAccountEx(
          token: token,
          channelId: channelId,
          userAccount: userAccount,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[joinChannelWithUserAccountEx] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[joinChannelWithUserAccountEx] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getUserInfoByUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String userAccount = "hello";
        await rtcEngine.getUserInfoByUserAccount(
          userAccount,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getUserInfoByUserAccount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getUserInfoByUserAccount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getUserInfoByUid',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        await rtcEngine.getUserInfoByUid(
          uid,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getUserInfoByUid] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getUserInfoByUid] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String srcInfoChannelName = "hello";
        const String srcInfoToken = "hello";
        const int srcInfoUid = 10;
        const ChannelMediaInfo configurationSrcInfo = ChannelMediaInfo(
          channelName: srcInfoChannelName,
          token: srcInfoToken,
          uid: srcInfoUid,
        );
        const List<ChannelMediaInfo> configurationDestInfos = [];
        const int configurationDestCount = 10;
        const ChannelMediaRelayConfiguration configuration =
            ChannelMediaRelayConfiguration(
          srcInfo: configurationSrcInfo,
          destInfos: configurationDestInfos,
          destCount: configurationDestCount,
        );
        await rtcEngine.startChannelMediaRelay(
          configuration,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startChannelMediaRelay] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startChannelMediaRelay] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String srcInfoChannelName = "hello";
        const String srcInfoToken = "hello";
        const int srcInfoUid = 10;
        const ChannelMediaInfo configurationSrcInfo = ChannelMediaInfo(
          channelName: srcInfoChannelName,
          token: srcInfoToken,
          uid: srcInfoUid,
        );
        const List<ChannelMediaInfo> configurationDestInfos = [];
        const int configurationDestCount = 10;
        const ChannelMediaRelayConfiguration configuration =
            ChannelMediaRelayConfiguration(
          srcInfo: configurationSrcInfo,
          destInfos: configurationDestInfos,
          destCount: configurationDestCount,
        );
        await rtcEngine.updateChannelMediaRelay(
          configuration,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[updateChannelMediaRelay] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateChannelMediaRelay] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopChannelMediaRelay();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopChannelMediaRelay] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopChannelMediaRelay] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAllChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.pauseAllChannelMediaRelay();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[pauseAllChannelMediaRelay] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[pauseAllChannelMediaRelay] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAllChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.resumeAllChannelMediaRelay();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[resumeAllChannelMediaRelay] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[resumeAllChannelMediaRelay] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDirectCdnStreamingAudioConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioProfileType profile = AudioProfileType.audioProfileDefault;
        await rtcEngine.setDirectCdnStreamingAudioConfiguration(
          profile,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setDirectCdnStreamingAudioConfiguration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setDirectCdnStreamingAudioConfiguration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDirectCdnStreamingVideoConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const VideoCodecType configCodecType = VideoCodecType.videoCodecNone;
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions configDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const OrientationMode configOrientationMode =
            OrientationMode.orientationModeAdaptive;
        const DegradationPreference configDegradationPreference =
            DegradationPreference.maintainQuality;
        const VideoMirrorModeType configMirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        const int configFrameRate = 10;
        const int configBitrate = 10;
        const int configMinBitrate = 10;
        const VideoEncoderConfiguration config = VideoEncoderConfiguration(
          codecType: configCodecType,
          dimensions: configDimensions,
          frameRate: configFrameRate,
          bitrate: configBitrate,
          minBitrate: configMinBitrate,
          orientationMode: configOrientationMode,
          degradationPreference: configDegradationPreference,
          mirrorMode: configMirrorMode,
        );
        await rtcEngine.setDirectCdnStreamingVideoConfiguration(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[setDirectCdnStreamingVideoConfiguration] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setDirectCdnStreamingVideoConfiguration] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startDirectCdnStreaming',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        final DirectCdnStreamingEventHandler eventHandler =
            DirectCdnStreamingEventHandler(
          onDirectCdnStreamingStateChanged: (DirectCdnStreamingState state,
              DirectCdnStreamingError error, String message) {},
          onDirectCdnStreamingStats: (DirectCdnStreamingStats stats) {},
        );
        const String publishUrl = "hello";
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsCustomVideoTrackId = 10;
        const DirectCdnStreamingMediaOptions options =
            DirectCdnStreamingMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          customVideoTrackId: optionsCustomVideoTrackId,
        );
        await rtcEngine.startDirectCdnStreaming(
          eventHandler: eventHandler,
          publishUrl: publishUrl,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startDirectCdnStreaming] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startDirectCdnStreaming] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopDirectCdnStreaming',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopDirectCdnStreaming();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopDirectCdnStreaming] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopDirectCdnStreaming] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateDirectCdnStreamingMediaOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsCustomVideoTrackId = 10;
        const DirectCdnStreamingMediaOptions options =
            DirectCdnStreamingMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          customVideoTrackId: optionsCustomVideoTrackId,
        );
        await rtcEngine.updateDirectCdnStreamingMediaOptions(
          options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[updateDirectCdnStreamingMediaOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[updateDirectCdnStreamingMediaOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String sound1 = "hello";
        const String sound2 = "hello";
        const int configBeatsPerMeasure = 10;
        const int configBeatsPerMinute = 10;
        const AgoraRhythmPlayerConfig config = AgoraRhythmPlayerConfig(
          beatsPerMeasure: configBeatsPerMeasure,
          beatsPerMinute: configBeatsPerMinute,
        );
        await rtcEngine.startRhythmPlayer(
          sound1: sound1,
          sound2: sound2,
          config: config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startRhythmPlayer] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startRhythmPlayer] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.stopRhythmPlayer();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[stopRhythmPlayer] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[stopRhythmPlayer] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'configRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int configBeatsPerMeasure = 10;
        const int configBeatsPerMinute = 10;
        const AgoraRhythmPlayerConfig config = AgoraRhythmPlayerConfig(
          beatsPerMeasure: configBeatsPerMeasure,
          beatsPerMinute: configBeatsPerMinute,
        );
        await rtcEngine.configRhythmPlayer(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[configRhythmPlayer] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[configRhythmPlayer] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'takeSnapshot',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int uid = 10;
        const String filePath = "hello";
        await rtcEngine.takeSnapshot(
          uid: uid,
          filePath: filePath,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[takeSnapshot] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[takeSnapshot] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableContentInspect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const String configExtraInfo = "hello";
        const List<ContentInspectModule> configModules = [];
        const int configModuleCount = 10;
        const ContentInspectConfig config = ContentInspectConfig(
          extraInfo: configExtraInfo,
          modules: configModules,
          moduleCount: configModuleCount,
        );
        await rtcEngine.enableContentInspect(
          enabled: enabled,
          config: config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableContentInspect] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableContentInspect] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustCustomAudioPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sourceId = 10;
        const int volume = 10;
        await rtcEngine.adjustCustomAudioPublishVolume(
          sourceId: sourceId,
          volume: volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustCustomAudioPublishVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustCustomAudioPublishVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustCustomAudioPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int sourceId = 10;
        const int volume = 10;
        await rtcEngine.adjustCustomAudioPlayoutVolume(
          sourceId: sourceId,
          volume: volume,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[adjustCustomAudioPlayoutVolume] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[adjustCustomAudioPlayoutVolume] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCloudProxy',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const CloudProxyType proxyType = CloudProxyType.noneProxy;
        await rtcEngine.setCloudProxy(
          proxyType,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setCloudProxy] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setCloudProxy] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalAccessPoint',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const LocalProxyMode configMode = LocalProxyMode.connectivityFirst;
        const List<String> configIpList = [];
        const int configIpListSize = 10;
        const List<String> configDomainList = [];
        const int configDomainListSize = 10;
        const String configVerifyDomainName = "hello";
        const LocalAccessPointConfiguration config =
            LocalAccessPointConfiguration(
          ipList: configIpList,
          ipListSize: configIpListSize,
          domainList: configDomainList,
          domainListSize: configDomainListSize,
          verifyDomainName: configVerifyDomainName,
          mode: configMode,
        );
        await rtcEngine.setLocalAccessPoint(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalAccessPoint] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalAccessPoint] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAdvancedAudioOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        await rtcEngine.setAdvancedAudioOptions();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAdvancedAudioOptions] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAdvancedAudioOptions] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAVSyncSource',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String channelId = "hello";
        const int uid = 10;
        await rtcEngine.setAVSyncSource(
          channelId: channelId,
          uid: uid,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAVSyncSource] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAVSyncSource] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableVideoImageSource',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enable = true;
        const VideoMirrorModeType optionsMirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        const String optionsImageUrl = "hello";
        const int optionsFps = 10;
        const ImageTrackOptions options = ImageTrackOptions(
          imageUrl: optionsImageUrl,
          fps: optionsFps,
          mirrorMode: optionsMirrorMode,
        );
        await rtcEngine.enableVideoImageSource(
          enable: enable,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableVideoImageSource] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableVideoImageSource] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableWirelessAccelerate',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        await rtcEngine.enableWirelessAccelerate(
          enabled,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableWirelessAccelerate] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableWirelessAccelerate] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String token = "hello";
        const String channelId = "hello";
        const int uid = 10;
        const ClientRoleType optionsClientRoleType =
            ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType optionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const VideoStreamType optionsDefaultVideoStreamType =
            VideoStreamType.videoStreamHigh;
        const ChannelProfileType optionsChannelProfile =
            ChannelProfileType.channelProfileCommunication;
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishSecondaryCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishScreenCaptureVideo = true;
        const bool optionsPublishScreenCaptureAudio = true;
        const bool optionsPublishScreenTrack = true;
        const bool optionsPublishSecondaryScreenTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const int optionsPublishCustomAudioSourceId = 10;
        const bool optionsPublishCustomAudioTrackEnableAec = true;
        const bool optionsPublishDirectCustomAudioTrack = true;
        const bool optionsPublishCustomAudioTrackAec = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishEncodedVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const bool optionsPublishMediaPlayerVideoTrack = true;
        const bool optionsPublishTrancodedVideoTrack = true;
        const bool optionsAutoSubscribeAudio = true;
        const bool optionsAutoSubscribeVideo = true;
        const bool optionsEnableAudioRecordingOrPlayout = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsAudioDelayMs = 10;
        const int optionsMediaPlayerAudioDelayMs = 10;
        const String optionsToken = "hello";
        const bool optionsEnableBuiltInMediaEncryption = true;
        const bool optionsPublishRhythmPlayerTrack = true;
        const bool optionsIsInteractiveAudience = true;
        const int optionsCustomVideoTrackId = 10;
        const bool optionsIsAudioFilterable = true;
        const ChannelMediaOptions options = ChannelMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishScreenCaptureVideo: optionsPublishScreenCaptureVideo,
          publishScreenCaptureAudio: optionsPublishScreenCaptureAudio,
          publishScreenTrack: optionsPublishScreenTrack,
          publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
          publishCustomAudioTrackEnableAec:
              optionsPublishCustomAudioTrackEnableAec,
          publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
          publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
          publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
          autoSubscribeAudio: optionsAutoSubscribeAudio,
          autoSubscribeVideo: optionsAutoSubscribeVideo,
          enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          clientRoleType: optionsClientRoleType,
          audienceLatencyLevel: optionsAudienceLatencyLevel,
          defaultVideoStreamType: optionsDefaultVideoStreamType,
          channelProfile: optionsChannelProfile,
          audioDelayMs: optionsAudioDelayMs,
          mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
          token: optionsToken,
          enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
          publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
          isInteractiveAudience: optionsIsInteractiveAudience,
          customVideoTrackId: optionsCustomVideoTrackId,
          isAudioFilterable: optionsIsAudioFilterable,
        );
        await rtcEngine.joinChannel(
          token: token,
          channelId: channelId,
          uid: uid,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[joinChannel] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[joinChannel] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'leaveChannel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool optionsStopAudioMixing = true;
        const bool optionsStopAllEffect = true;
        const bool optionsStopMicrophoneRecording = true;
        const LeaveChannelOptions options = LeaveChannelOptions(
          stopAudioMixing: optionsStopAudioMixing,
          stopAllEffect: optionsStopAllEffect,
          stopMicrophoneRecording: optionsStopMicrophoneRecording,
        );
        await rtcEngine.leaveChannel(
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[leaveChannel] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[leaveChannel] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setClientRole',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const ClientRoleType role = ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType optionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const ClientRoleOptions options = ClientRoleOptions(
          audienceLatencyLevel: optionsAudienceLatencyLevel,
        );
        await rtcEngine.setClientRole(
          role: role,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setClientRole] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setClientRole] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startEchoTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int intervalInSeconds = 10;
        await rtcEngine.startEchoTest(
          intervalInSeconds: intervalInSeconds,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startEchoTest] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startEchoTest] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioProfile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioProfileType profile = AudioProfileType.audioProfileDefault;
        const AudioScenarioType scenario =
            AudioScenarioType.audioScenarioDefault;
        await rtcEngine.setAudioProfile(
          profile: profile,
          scenario: scenario,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setAudioProfile] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setAudioProfile] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const AudioFileRecordingType configFileRecordingType =
            AudioFileRecordingType.audioFileRecordingMic;
        const AudioRecordingQualityType configQuality =
            AudioRecordingQualityType.audioRecordingQualityLow;
        const String configFilePath = "hello";
        const bool configEncode = true;
        const int configSampleRate = 10;
        const int configRecordingChannel = 10;
        const AudioRecordingConfiguration config = AudioRecordingConfiguration(
          filePath: configFilePath,
          encode: configEncode,
          sampleRate: configSampleRate,
          fileRecordingType: configFileRecordingType,
          quality: configQuality,
          recordingChannel: configRecordingChannel,
        );
        await rtcEngine.startAudioRecording(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startAudioRecording] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startAudioRecording] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String filePath = "hello";
        const bool loopback = true;
        const int cycle = 10;
        const int startPos = 10;
        await rtcEngine.startAudioMixing(
          filePath: filePath,
          loopback: loopback,
          cycle: cycle,
          startPos: startPos,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[startAudioMixing] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[startAudioMixing] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const RenderModeType renderMode = RenderModeType.renderModeHidden;
        const VideoMirrorModeType mirrorMode =
            VideoMirrorModeType.videoMirrorModeAuto;
        await rtcEngine.setLocalRenderMode(
          renderMode: renderMode,
          mirrorMode: mirrorMode,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setLocalRenderMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setLocalRenderMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableDualStreamMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const bool enabled = true;
        const VideoSourceType sourceType =
            VideoSourceType.videoSourceCameraPrimary;
        const int dimensionsWidth = 10;
        const int dimensionsHeight = 10;
        const VideoDimensions streamConfigDimensions = VideoDimensions(
          width: dimensionsWidth,
          height: dimensionsHeight,
        );
        const int streamConfigBitrate = 10;
        const int streamConfigFramerate = 10;
        const SimulcastStreamConfig streamConfig = SimulcastStreamConfig(
          dimensions: streamConfigDimensions,
          bitrate: streamConfigBitrate,
          framerate: streamConfigFramerate,
        );
        await rtcEngine.enableDualStreamMode(
          enabled: enabled,
          sourceType: sourceType,
          streamConfig: streamConfig,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[enableDualStreamMode] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[enableDualStreamMode] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'addVideoWatermark',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String watermarkUrl = "hello";
        const int positionInLandscapeModeX = 10;
        const int positionInLandscapeModeY = 10;
        const int positionInLandscapeModeWidth = 10;
        const int positionInLandscapeModeHeight = 10;
        const Rectangle optionsPositionInLandscapeMode = Rectangle(
          x: positionInLandscapeModeX,
          y: positionInLandscapeModeY,
          width: positionInLandscapeModeWidth,
          height: positionInLandscapeModeHeight,
        );
        const int positionInPortraitModeX = 10;
        const int positionInPortraitModeY = 10;
        const int positionInPortraitModeWidth = 10;
        const int positionInPortraitModeHeight = 10;
        const Rectangle optionsPositionInPortraitMode = Rectangle(
          x: positionInPortraitModeX,
          y: positionInPortraitModeY,
          width: positionInPortraitModeWidth,
          height: positionInPortraitModeHeight,
        );
        const double watermarkRatioXRatio = 10.0;
        const double watermarkRatioYRatio = 10.0;
        const double watermarkRatioWidthRatio = 10.0;
        const WatermarkRatio optionsWatermarkRatio = WatermarkRatio(
          xRatio: watermarkRatioXRatio,
          yRatio: watermarkRatioYRatio,
          widthRatio: watermarkRatioWidthRatio,
        );
        const WatermarkFitMode optionsMode =
            WatermarkFitMode.fitModeCoverPosition;
        const bool optionsVisibleInPreview = true;
        const WatermarkOptions options = WatermarkOptions(
          visibleInPreview: optionsVisibleInPreview,
          positionInLandscapeMode: optionsPositionInLandscapeMode,
          positionInPortraitMode: optionsPositionInPortraitMode,
          watermarkRatio: optionsWatermarkRatio,
          mode: optionsMode,
        );
        await rtcEngine.addVideoWatermark(
          watermarkUrl: watermarkUrl,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[addVideoWatermark] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[addVideoWatermark] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannelWithUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String token = "hello";
        const String channelId = "hello";
        const String userAccount = "hello";
        const ClientRoleType optionsClientRoleType =
            ClientRoleType.clientRoleBroadcaster;
        const AudienceLatencyLevelType optionsAudienceLatencyLevel =
            AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
        const VideoStreamType optionsDefaultVideoStreamType =
            VideoStreamType.videoStreamHigh;
        const ChannelProfileType optionsChannelProfile =
            ChannelProfileType.channelProfileCommunication;
        const bool optionsPublishCameraTrack = true;
        const bool optionsPublishSecondaryCameraTrack = true;
        const bool optionsPublishMicrophoneTrack = true;
        const bool optionsPublishScreenCaptureVideo = true;
        const bool optionsPublishScreenCaptureAudio = true;
        const bool optionsPublishScreenTrack = true;
        const bool optionsPublishSecondaryScreenTrack = true;
        const bool optionsPublishCustomAudioTrack = true;
        const int optionsPublishCustomAudioSourceId = 10;
        const bool optionsPublishCustomAudioTrackEnableAec = true;
        const bool optionsPublishDirectCustomAudioTrack = true;
        const bool optionsPublishCustomAudioTrackAec = true;
        const bool optionsPublishCustomVideoTrack = true;
        const bool optionsPublishEncodedVideoTrack = true;
        const bool optionsPublishMediaPlayerAudioTrack = true;
        const bool optionsPublishMediaPlayerVideoTrack = true;
        const bool optionsPublishTrancodedVideoTrack = true;
        const bool optionsAutoSubscribeAudio = true;
        const bool optionsAutoSubscribeVideo = true;
        const bool optionsEnableAudioRecordingOrPlayout = true;
        const int optionsPublishMediaPlayerId = 10;
        const int optionsAudioDelayMs = 10;
        const int optionsMediaPlayerAudioDelayMs = 10;
        const String optionsToken = "hello";
        const bool optionsEnableBuiltInMediaEncryption = true;
        const bool optionsPublishRhythmPlayerTrack = true;
        const bool optionsIsInteractiveAudience = true;
        const int optionsCustomVideoTrackId = 10;
        const bool optionsIsAudioFilterable = true;
        const ChannelMediaOptions options = ChannelMediaOptions(
          publishCameraTrack: optionsPublishCameraTrack,
          publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
          publishMicrophoneTrack: optionsPublishMicrophoneTrack,
          publishScreenCaptureVideo: optionsPublishScreenCaptureVideo,
          publishScreenCaptureAudio: optionsPublishScreenCaptureAudio,
          publishScreenTrack: optionsPublishScreenTrack,
          publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
          publishCustomAudioTrack: optionsPublishCustomAudioTrack,
          publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
          publishCustomAudioTrackEnableAec:
              optionsPublishCustomAudioTrackEnableAec,
          publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
          publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
          publishCustomVideoTrack: optionsPublishCustomVideoTrack,
          publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
          publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
          publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
          publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
          autoSubscribeAudio: optionsAutoSubscribeAudio,
          autoSubscribeVideo: optionsAutoSubscribeVideo,
          enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
          publishMediaPlayerId: optionsPublishMediaPlayerId,
          clientRoleType: optionsClientRoleType,
          audienceLatencyLevel: optionsAudienceLatencyLevel,
          defaultVideoStreamType: optionsDefaultVideoStreamType,
          channelProfile: optionsChannelProfile,
          audioDelayMs: optionsAudioDelayMs,
          mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
          token: optionsToken,
          enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
          publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
          isInteractiveAudience: optionsIsInteractiveAudience,
          customVideoTrackId: optionsCustomVideoTrackId,
          isAudioFilterable: optionsIsAudioFilterable,
        );
        await rtcEngine.joinChannelWithUserAccount(
          token: token,
          channelId: channelId,
          userAccount: userAccount,
          options: options,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[joinChannelWithUserAccount] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[joinChannelWithUserAccount] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioDeviceManager',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        rtcEngine.getAudioDeviceManager();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getAudioDeviceManager] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getAudioDeviceManager] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVideoDeviceManager',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        rtcEngine.getVideoDeviceManager();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getVideoDeviceManager] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getVideoDeviceManager] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getMediaEngine',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        rtcEngine.getMediaEngine();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getMediaEngine] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getMediaEngine] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getMediaRecorder',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        rtcEngine.getMediaRecorder();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getMediaRecorder] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getMediaRecorder] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getLocalSpatialAudioEngine',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        rtcEngine.getLocalSpatialAudioEngine();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[getLocalSpatialAudioEngine] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[getLocalSpatialAudioEngine] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendMetaData',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int metadataUid = 10;
        const int metadataSize = 10;
        Uint8List metadataBuffer = Uint8List.fromList([]);
        const int metadataTimeStampMs = 10;
        final Metadata metadata = Metadata(
          uid: metadataUid,
          size: metadataSize,
          buffer: metadataBuffer,
          timeStampMs: metadataTimeStampMs,
        );
        const VideoSourceType sourceType =
            VideoSourceType.videoSourceCameraPrimary;
        await rtcEngine.sendMetaData(
          metadata: metadata,
          sourceType: sourceType,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[sendMetaData] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[sendMetaData] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setMaxMetadataSize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const int size = 10;
        await rtcEngine.setMaxMetadataSize(
          size,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setMaxMetadataSize] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setMaxMetadataSize] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterAudioEncodedFrameObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        final AudioEncodedFrameObserver observer = AudioEncodedFrameObserver(
          onRecordAudioEncodedFrame: (Uint8List frameBuffer, int length,
              EncodedAudioFrameInfo audioEncodedFrameInfo) {},
          onPlaybackAudioEncodedFrame: (Uint8List frameBuffer, int length,
              EncodedAudioFrameInfo audioEncodedFrameInfo) {},
          onMixedAudioEncodedFrame: (Uint8List frameBuffer, int length,
              EncodedAudioFrameInfo audioEncodedFrameInfo) {},
        );
        rtcEngine.unregisterAudioEncodedFrameObserver(
          observer,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint(
              '[unregisterAudioEncodedFrameObserver] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[unregisterAudioEncodedFrameObserver] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      try {
        await rtcEngine.enableVideo();
        const String parameters = "hello";
        await rtcEngine.setParameters(
          parameters,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[setParameters] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint(
            '[setParameters] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtcEngine.release();
    },
//  skip: !(),
  );
}
