/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/foundation.dart';
import 'package:integration_test_app/main.dart' as app;

void rtmClientSmokeTestCases() {
  testWidgets(
    'initialize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      RtmClient rtmClient = createAgoraRtmClient();

      try {
        final RtmEventHandler configEventHandler = RtmEventHandler(
          onMessageEvent: (MessageEvent event) {},
          onPresenceEvent: (PresenceEvent event) {},
          onJoinResult: (String channelName, String userId,
              StreamChannelErrorCode errorCode) {},
          onLeaveResult: (String channelName, String userId,
              StreamChannelErrorCode errorCode) {},
          onJoinTopicResult: (String channelName, String userId, String topic,
              String meta, StreamChannelErrorCode errorCode) {},
          onLeaveTopicResult: (String channelName, String userId, String topic,
              String meta, StreamChannelErrorCode errorCode) {},
          onTopicSubscribed: (String channelName,
              String userId,
              String topic,
              UserList succeedUsers,
              UserList failedUsers,
              StreamChannelErrorCode errorCode) {},
          onTopicUnsubscribed: (String channelName,
              String userId,
              String topic,
              UserList succeedUsers,
              UserList failedUsers,
              StreamChannelErrorCode errorCode) {},
          onConnectionStateChange: (String channelName,
              RtmConnectionState state, RtmConnectionChangeReason reason) {},
        );
        const LogLevel logConfigLevel = LogLevel.logLevelNone;
        const String logConfigFilePath = "hello";
        const int logConfigFileSizeInKB = 10;
        const LogConfig configLogConfig = LogConfig(
          filePath: logConfigFilePath,
          fileSizeInKB: logConfigFileSizeInKB,
          level: logConfigLevel,
        );
        const String configAppId = "hello";
        const String configUserId = "hello";
        const bool configUseStringUserId = true;
        final RtmConfig config = RtmConfig(
          appId: configAppId,
          userId: configUserId,
          useStringUserId: configUseStringUserId,
          eventHandler: configEventHandler,
          logConfig: configLogConfig,
        );
        await rtmClient.initialize(
          config,
        );
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[initialize] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[initialize] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtmClient.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'release',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      RtmClient rtmClient = createAgoraRtmClient();

      try {
        await rtmClient.release();
      } catch (e) {
        if (e is! AgoraRtcException) {
          debugPrint('[release] error: ${e.toString()}');
        }
        expect(e is AgoraRtcException, true);
        debugPrint('[release] errorcode: ${(e as AgoraRtcException).code}');
      }

      await rtmClient.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );
}

