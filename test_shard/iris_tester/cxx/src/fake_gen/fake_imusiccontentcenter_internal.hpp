/// Generated by terra, DO NOT MODIFY BY HAND.

#ifndef FAKE_IMUSICCONTENTCENTER_INTERNAL_H_
#define FAKE_IMUSICCONTENTCENTER_INTERNAL_H_

#include "IAgoraMusicContentCenter.h"

namespace agora {
namespace rtc {
class FakeIMusicContentCenterInternal : public agora::rtc::IMusicContentCenter {
  virtual int initialize(agora::rtc::MusicContentCenterConfiguration const
                             &configuration) override {
    return 0;
  }

  virtual void release() override {}

  virtual int registerEventHandler(
      agora::rtc::IMusicContentCenterEventHandler *eventHandler) override {
    return 0;
  }

  virtual int unregisterEventHandler() override { return 0; }

  virtual agora_refptr<agora::rtc::IMusicPlayer> createMusicPlayer() override {
    agora_refptr<agora::rtc::IMusicPlayer> the_return;
    return the_return;
  }

  virtual int getMusicCharts(agora::util::AString &requestId) override {
    return 0;
  }

  virtual int getMusicCollectionByMusicChartId(
      agora::util::AString &requestId, int32_t musicChartId, int32_t page,
      int32_t pageSize, char const *jsonOption) override {
    return 0;
  }

  virtual int searchMusic(agora::util::AString &requestId, char const *keyWord,
                          int32_t page, int32_t pageSize,
                          char const *jsonOption) override {
    return 0;
  }

  virtual int preload(int64_t songCode, char const *jsonOption) override {
    return 0;
  }

  virtual int isPreloaded(int64_t songCode) override { return 0; }

  virtual int getLyric(agora::util::AString &requestId, int64_t songCode,
                       int32_t LyricType) override {
    return 0;
  }
};

} // namespace rtc
} // namespace agora

#endif // FAKE_IMUSICCONTENTCENTER_INTERNAL_H_
